{"ast":null,"code":"/*import React, { useState, useEffect } from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport \"react-calendar/dist/Calendar.css\";\r\nimport \"../styles/Tracker.css\";\r\nimport Reports from \"./Reports\";\r\nimport { saveAs } from \"file-saver\"; \r\n\r\nfunction Tracker() {\r\n  const [date, setDate] = useState(new Date());\r\n  const [periodDates, setPeriodDates] = useState([]);\r\n\r\n  // Load stored period dates\r\n  useEffect(() => {\r\n    const savedDates = JSON.parse(localStorage.getItem(\"periodDates\"));\r\n    if (savedDates) {\r\n      setPeriodDates(savedDates);\r\n    }\r\n  }, []);\r\n\r\n  // Handle date selection\r\n  const handleDateChange = (selectedDate) => {\r\n    const formattedDate = selectedDate.toDateString();\r\n    if (!periodDates.includes(formattedDate)) {\r\n      const newDates = [...periodDates, formattedDate].sort((a, b) => new Date(a) - new Date(b));\r\n      setPeriodDates(newDates);\r\n      localStorage.setItem(\"periodDates\", JSON.stringify(newDates));\r\n      setDate(selectedDate);\r\n      showNotification(\"Period date logged!\");\r\n    }\r\n  };\r\n\r\n  // Delete period log\r\n  const deleteLog = (dateToDelete) => {\r\n    const updatedDates = periodDates.filter((d) => d !== dateToDelete);\r\n    setPeriodDates(updatedDates);\r\n    localStorage.setItem(\"periodDates\", JSON.stringify(updatedDates));\r\n  };\r\n\r\n  // Predict next period (assuming 28-day cycle)\r\n  const predictNextPeriod = () => {\r\n    if (periodDates.length > 0) {\r\n      let lastPeriod = new Date(periodDates[periodDates.length - 1]);\r\n      let nextPeriod = new Date(lastPeriod);\r\n      nextPeriod.setDate(nextPeriod.getDate() + 28);\r\n      return nextPeriod.toDateString();\r\n    }\r\n    return \"Not enough data to predict.\";\r\n  };\r\n\r\n  // Calculate cycle lengths\r\n  const cycleLengths = periodDates.map((date, i) => \r\n    i > 0 ? (new Date(date) - new Date(periodDates[i - 1])) / (1000 * 60 * 60 * 24) : null\r\n  ).filter(length => length !== null);\r\n\r\n  // Calculate average cycle length\r\n  const avgCycleLength = cycleLengths.length > 0 ? \r\n    (cycleLengths.reduce((a, b) => a + b, 0) / cycleLengths.length).toFixed(1) \r\n    : \"Not enough data\";\r\n\r\n  // Show browser notification\r\n  const showNotification = (message) => {\r\n    if (Notification.permission === \"granted\") {\r\n      new Notification(\"Menstrual Tracker\", { body: message });\r\n    }\r\n  };\r\n\r\n  // Export cycle data as CSV\r\n  const exportData = () => {\r\n    const csvContent = \"data:text/csv;charset=utf-8,Date\\n\" + periodDates.join(\"\\n\");\r\n    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\r\n    saveAs(blob, \"cycle_history.csv\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"tracker-container\">\r\n      <h2>Menstrual Cycle Tracker</h2>\r\n      <Calendar onClickDay={handleDateChange} value={date} />\r\n      \r\n      <h3>Logged Period Dates:</h3>\r\n      <ul>\r\n        {periodDates.map((d, index) => (\r\n          <li key={index}>\r\n            {d} \r\n            <button onClick={() => deleteLog(d)}>‚ùé</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      <h3>Next Predicted Period: {predictNextPeriod()}</h3>\r\n      <h3>Last Cycle Length: {cycleLengths.length > 0 ? cycleLengths[cycleLengths.length - 1] + \" days\" : \"N/A\"}</h3>\r\n      <h3>Average Cycle Length: {avgCycleLength}</h3> \r\n      \r\n      <button onClick={exportData}>üìÇ Export Cycle Data</button>\r\n\r\n      \r\n      <Reports periodDates={periodDates} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tracker;\r\n*/\n\n/*\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport \"react-calendar/dist/Calendar.css\";\r\nimport \"../styles/Tracker.css\";\r\nimport Reports from \"./Reports\";\r\nimport { saveAs } from \"file-saver\"; \r\n\r\nfunction Tracker() {\r\n  const [date, setDate] = useState(new Date());\r\n  const [periodDates, setPeriodDates] = useState([]);\r\n  const [cycleLength, setCycleLength] = useState(28); // Default cycle length\r\n\r\n  // Load stored period dates and cycle length\r\n  useEffect(() => {\r\n    const savedDates = JSON.parse(localStorage.getItem(\"periodDates\"));\r\n    if (savedDates) setPeriodDates(savedDates);\r\n\r\n    const savedCycleLength = localStorage.getItem(\"cycleLength\");\r\n    if (savedCycleLength) setCycleLength(Number(savedCycleLength));\r\n  }, []);\r\n\r\n  // Handle date selection\r\n  const handleDateChange = (selectedDate) => {\r\n    const formattedDate = selectedDate.toDateString();\r\n    if (!periodDates.includes(formattedDate)) {\r\n      const newDates = [...periodDates, formattedDate].sort((a, b) => new Date(a) - new Date(b));\r\n      setPeriodDates(newDates);\r\n      localStorage.setItem(\"periodDates\", JSON.stringify(newDates));\r\n      setDate(selectedDate);\r\n      showNotification(\"Period date logged!\");\r\n    }\r\n  };\r\n\r\n  // Delete period log\r\n  const deleteLog = (dateToDelete) => {\r\n    const updatedDates = periodDates.filter((d) => d !== dateToDelete);\r\n    setPeriodDates(updatedDates);\r\n    localStorage.setItem(\"periodDates\", JSON.stringify(updatedDates));\r\n  };\r\n\r\n  // Calculate cycle lengths\r\n  const cycleLengths = periodDates.map((date, i) => \r\n    i > 0 ? (new Date(date) - new Date(periodDates[i - 1])) / (1000 * 60 * 60 * 24) : null\r\n  ).filter(length => length !== null);\r\n\r\n  // Calculate average cycle length\r\n  const avgCycleLength = cycleLengths.length > 0 ? \r\n    Math.round(cycleLengths.reduce((a, b) => a + b, 0) / cycleLengths.length) \r\n    : 28; // Default to 28 if not enough data\r\n\r\n  // Predict next period based on user's actual cycle length or selected cycle length\r\n  const predictNextPeriod = () => {\r\n    if (periodDates.length > 0) {\r\n      let lastPeriod = new Date(periodDates[periodDates.length - 1]);\r\n      let nextPeriod = new Date(lastPeriod);\r\n      nextPeriod.setDate(nextPeriod.getDate() + cycleLength); // Use user-defined cycle length\r\n      return nextPeriod.toDateString();\r\n    }\r\n    return \"Not enough data to predict.\";\r\n  };\r\n\r\n  // Show browser notification\r\n  const showNotification = (message) => {\r\n    if (Notification.permission === \"granted\") {\r\n      new Notification(\"Menstrual Tracker\", { body: message });\r\n    }\r\n  };\r\n\r\n  // Handle cycle length change\r\n  const handleCycleLengthChange = (e) => {\r\n    const value = Number(e.target.value);\r\n    if (value > 15 && value < 50) { // Ensure valid range\r\n      setCycleLength(value);\r\n      localStorage.setItem(\"cycleLength\", value);\r\n    }\r\n  };\r\n\r\n  // Export cycle data as CSV\r\n  const exportData = () => {\r\n    const csvContent = \"data:text/csv;charset=utf-8,Date\\n\" + periodDates.join(\"\\n\");\r\n    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\r\n    saveAs(blob, \"cycle_history.csv\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"tracker-container\">\r\n      <h2>Menstrual Cycle Tracker</h2>\r\n      <Calendar onClickDay={handleDateChange} value={date} />\r\n      \r\n      <h3>Logged Period Dates:</h3>\r\n      <ul>\r\n        {periodDates.map((d, index) => (\r\n          <li key={index}>\r\n            {d} \r\n            <button onClick={() => deleteLog(d)}>‚ùé</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n\r\n       //Allow user to manually set cycle length \r\n      <label>Set Your Cycle Length: </label>\r\n      <input \r\n        type=\"number\" \r\n        value={cycleLength} \r\n        onChange={handleCycleLengthChange} \r\n        min=\"15\" \r\n        max=\"50\"\r\n      />\r\n\r\n      \r\n\r\n      <h3>Next Predicted Period: {predictNextPeriod()}</h3>\r\n      <h3>Last Cycle Length: {cycleLengths.length > 0 ? cycleLengths[cycleLengths.length - 1] + \" days\" : \"N/A\"}</h3>\r\n      <h3>Average Cycle Length: {avgCycleLength} days</h3>\r\n\r\n      \r\n\r\n      <button onClick={exportData}>üìÇ Export Cycle Data</button>\r\n\r\n      // Integrating Reports \r\n      <Reports periodDates={periodDates} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tracker;\r\n*/","map":{"version":3,"names":[],"sources":["C:/vardha/Menstrual/frontend/src/pages/Tracker.js"],"sourcesContent":["/*import React, { useState, useEffect } from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport \"react-calendar/dist/Calendar.css\";\r\nimport \"../styles/Tracker.css\";\r\nimport Reports from \"./Reports\";\r\nimport { saveAs } from \"file-saver\"; \r\n\r\nfunction Tracker() {\r\n  const [date, setDate] = useState(new Date());\r\n  const [periodDates, setPeriodDates] = useState([]);\r\n\r\n  // Load stored period dates\r\n  useEffect(() => {\r\n    const savedDates = JSON.parse(localStorage.getItem(\"periodDates\"));\r\n    if (savedDates) {\r\n      setPeriodDates(savedDates);\r\n    }\r\n  }, []);\r\n\r\n  // Handle date selection\r\n  const handleDateChange = (selectedDate) => {\r\n    const formattedDate = selectedDate.toDateString();\r\n    if (!periodDates.includes(formattedDate)) {\r\n      const newDates = [...periodDates, formattedDate].sort((a, b) => new Date(a) - new Date(b));\r\n      setPeriodDates(newDates);\r\n      localStorage.setItem(\"periodDates\", JSON.stringify(newDates));\r\n      setDate(selectedDate);\r\n      showNotification(\"Period date logged!\");\r\n    }\r\n  };\r\n\r\n  // Delete period log\r\n  const deleteLog = (dateToDelete) => {\r\n    const updatedDates = periodDates.filter((d) => d !== dateToDelete);\r\n    setPeriodDates(updatedDates);\r\n    localStorage.setItem(\"periodDates\", JSON.stringify(updatedDates));\r\n  };\r\n\r\n  // Predict next period (assuming 28-day cycle)\r\n  const predictNextPeriod = () => {\r\n    if (periodDates.length > 0) {\r\n      let lastPeriod = new Date(periodDates[periodDates.length - 1]);\r\n      let nextPeriod = new Date(lastPeriod);\r\n      nextPeriod.setDate(nextPeriod.getDate() + 28);\r\n      return nextPeriod.toDateString();\r\n    }\r\n    return \"Not enough data to predict.\";\r\n  };\r\n\r\n  // Calculate cycle lengths\r\n  const cycleLengths = periodDates.map((date, i) => \r\n    i > 0 ? (new Date(date) - new Date(periodDates[i - 1])) / (1000 * 60 * 60 * 24) : null\r\n  ).filter(length => length !== null);\r\n\r\n  // Calculate average cycle length\r\n  const avgCycleLength = cycleLengths.length > 0 ? \r\n    (cycleLengths.reduce((a, b) => a + b, 0) / cycleLengths.length).toFixed(1) \r\n    : \"Not enough data\";\r\n\r\n  // Show browser notification\r\n  const showNotification = (message) => {\r\n    if (Notification.permission === \"granted\") {\r\n      new Notification(\"Menstrual Tracker\", { body: message });\r\n    }\r\n  };\r\n\r\n  // Export cycle data as CSV\r\n  const exportData = () => {\r\n    const csvContent = \"data:text/csv;charset=utf-8,Date\\n\" + periodDates.join(\"\\n\");\r\n    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\r\n    saveAs(blob, \"cycle_history.csv\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"tracker-container\">\r\n      <h2>Menstrual Cycle Tracker</h2>\r\n      <Calendar onClickDay={handleDateChange} value={date} />\r\n      \r\n      <h3>Logged Period Dates:</h3>\r\n      <ul>\r\n        {periodDates.map((d, index) => (\r\n          <li key={index}>\r\n            {d} \r\n            <button onClick={() => deleteLog(d)}>‚ùé</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      <h3>Next Predicted Period: {predictNextPeriod()}</h3>\r\n      <h3>Last Cycle Length: {cycleLengths.length > 0 ? cycleLengths[cycleLengths.length - 1] + \" days\" : \"N/A\"}</h3>\r\n      <h3>Average Cycle Length: {avgCycleLength}</h3> \r\n      \r\n      <button onClick={exportData}>üìÇ Export Cycle Data</button>\r\n\r\n      \r\n      <Reports periodDates={periodDates} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tracker;\r\n*/\r\n\r\n\r\n/*\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport \"react-calendar/dist/Calendar.css\";\r\nimport \"../styles/Tracker.css\";\r\nimport Reports from \"./Reports\";\r\nimport { saveAs } from \"file-saver\"; \r\n\r\nfunction Tracker() {\r\n  const [date, setDate] = useState(new Date());\r\n  const [periodDates, setPeriodDates] = useState([]);\r\n  const [cycleLength, setCycleLength] = useState(28); // Default cycle length\r\n\r\n  // Load stored period dates and cycle length\r\n  useEffect(() => {\r\n    const savedDates = JSON.parse(localStorage.getItem(\"periodDates\"));\r\n    if (savedDates) setPeriodDates(savedDates);\r\n\r\n    const savedCycleLength = localStorage.getItem(\"cycleLength\");\r\n    if (savedCycleLength) setCycleLength(Number(savedCycleLength));\r\n  }, []);\r\n\r\n  // Handle date selection\r\n  const handleDateChange = (selectedDate) => {\r\n    const formattedDate = selectedDate.toDateString();\r\n    if (!periodDates.includes(formattedDate)) {\r\n      const newDates = [...periodDates, formattedDate].sort((a, b) => new Date(a) - new Date(b));\r\n      setPeriodDates(newDates);\r\n      localStorage.setItem(\"periodDates\", JSON.stringify(newDates));\r\n      setDate(selectedDate);\r\n      showNotification(\"Period date logged!\");\r\n    }\r\n  };\r\n\r\n  // Delete period log\r\n  const deleteLog = (dateToDelete) => {\r\n    const updatedDates = periodDates.filter((d) => d !== dateToDelete);\r\n    setPeriodDates(updatedDates);\r\n    localStorage.setItem(\"periodDates\", JSON.stringify(updatedDates));\r\n  };\r\n\r\n  // Calculate cycle lengths\r\n  const cycleLengths = periodDates.map((date, i) => \r\n    i > 0 ? (new Date(date) - new Date(periodDates[i - 1])) / (1000 * 60 * 60 * 24) : null\r\n  ).filter(length => length !== null);\r\n\r\n  // Calculate average cycle length\r\n  const avgCycleLength = cycleLengths.length > 0 ? \r\n    Math.round(cycleLengths.reduce((a, b) => a + b, 0) / cycleLengths.length) \r\n    : 28; // Default to 28 if not enough data\r\n\r\n  // Predict next period based on user's actual cycle length or selected cycle length\r\n  const predictNextPeriod = () => {\r\n    if (periodDates.length > 0) {\r\n      let lastPeriod = new Date(periodDates[periodDates.length - 1]);\r\n      let nextPeriod = new Date(lastPeriod);\r\n      nextPeriod.setDate(nextPeriod.getDate() + cycleLength); // Use user-defined cycle length\r\n      return nextPeriod.toDateString();\r\n    }\r\n    return \"Not enough data to predict.\";\r\n  };\r\n\r\n  // Show browser notification\r\n  const showNotification = (message) => {\r\n    if (Notification.permission === \"granted\") {\r\n      new Notification(\"Menstrual Tracker\", { body: message });\r\n    }\r\n  };\r\n\r\n  // Handle cycle length change\r\n  const handleCycleLengthChange = (e) => {\r\n    const value = Number(e.target.value);\r\n    if (value > 15 && value < 50) { // Ensure valid range\r\n      setCycleLength(value);\r\n      localStorage.setItem(\"cycleLength\", value);\r\n    }\r\n  };\r\n\r\n  // Export cycle data as CSV\r\n  const exportData = () => {\r\n    const csvContent = \"data:text/csv;charset=utf-8,Date\\n\" + periodDates.join(\"\\n\");\r\n    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\r\n    saveAs(blob, \"cycle_history.csv\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"tracker-container\">\r\n      <h2>Menstrual Cycle Tracker</h2>\r\n      <Calendar onClickDay={handleDateChange} value={date} />\r\n      \r\n      <h3>Logged Period Dates:</h3>\r\n      <ul>\r\n        {periodDates.map((d, index) => (\r\n          <li key={index}>\r\n            {d} \r\n            <button onClick={() => deleteLog(d)}>‚ùé</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n\r\n       //Allow user to manually set cycle length \r\n      <label>Set Your Cycle Length: </label>\r\n      <input \r\n        type=\"number\" \r\n        value={cycleLength} \r\n        onChange={handleCycleLengthChange} \r\n        min=\"15\" \r\n        max=\"50\"\r\n      />\r\n\r\n      \r\n\r\n      <h3>Next Predicted Period: {predictNextPeriod()}</h3>\r\n      <h3>Last Cycle Length: {cycleLengths.length > 0 ? cycleLengths[cycleLengths.length - 1] + \" days\" : \"N/A\"}</h3>\r\n      <h3>Average Cycle Length: {avgCycleLength} days</h3>\r\n\r\n      \r\n\r\n      <button onClick={exportData}>üìÇ Export Cycle Data</button>\r\n\r\n      // Integrating Reports \r\n      <Reports periodDates={periodDates} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tracker;\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}