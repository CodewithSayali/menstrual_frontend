{"ast":null,"code":"/*import React, { useEffect, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport \"../styles/Reminders.css\";\r\n\r\nconst socket = io(\"http://localhost:3000\"); // ✅ Connect to backend WebSocket\r\n\r\nfunction Reminders() {\r\n  const [reminders, setReminders] = useState([]);\r\n  const [newReminder, setNewReminder] = useState({ date: \"\", time: \"\", note: \"\" });\r\n  const [notifications, setNotifications] = useState([]); // ✅ Store real-time notifications\r\n\r\n  useEffect(() => {\r\n    // ✅ Listen for Reminder Notifications\r\n    socket.on(\"reminderNotification\", (data) => {\r\n      setNotifications((prev) => [...prev, data.message]);\r\n    });\r\n\r\n    return () => {\r\n      socket.off(\"reminderNotification\");\r\n    };\r\n  }, []);*/\n/*\r\n  // ✅ Fetch Reminders from Backend\r\n  const fetchReminders = async () => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:3000/api/reminders\");\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setReminders(data);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"❌ Error fetching reminders:\", error);\r\n    }\r\n  };\r\n*/\n/*\r\nconst fetchReminders = async () => {\r\n  const userId = localStorage.getItem(\"userId\");\r\n\r\n  try {\r\n    const response = await fetch(`http://localhost:3000/api/reminders/${userId}`);\r\n    if (response.ok) {\r\n      const data = await response.json();\r\n      setReminders(data);\r\n    }\r\n  } catch (error) {\r\n    console.error(\"❌ Error fetching reminders:\", error);\r\n  }\r\n};\r\n\r\n  useEffect(() => {\r\n    fetchReminders(); // ✅ Fetch reminders on load\r\n  }, []);\r\n\r\n  const handleInputChange = (e) => {\r\n    setNewReminder({ ...newReminder, [e.target.name]: e.target.value });\r\n  };*/\n/*\r\n  const addReminder = async () => {\r\n    if (newReminder.date && newReminder.time && newReminder.note) {\r\n      const dateTime = `${newReminder.date}T${newReminder.time}:00`;\r\n\r\n      const response = await fetch(\"http://localhost:3000/api/reminders/add\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ dateTime, note: newReminder.note }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        alert(\"✅ Reminder added successfully!\");\r\n        setNewReminder({ date: \"\", time: \"\", note: \"\" });\r\n        fetchReminders(); // ✅ Update reminders list\r\n      }\r\n    }\r\n  };\r\n*/\n/*\r\nconst addReminder = async () => {\r\n  if (newReminder.date && newReminder.time && newReminder.note) {\r\n    const dateTime = `${newReminder.date}T${newReminder.time}:00`;\r\n\r\n    try {\r\n      const response = await fetch(\"http://localhost:3000/api/reminders/add\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ dateTime, note: newReminder.note }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      console.log(\"🚀 Server Response:\", data); // ✅ Log Response for Debugging\r\n\r\n      if (response.ok) {\r\n        alert(\"✅ Reminder added successfully!\");\r\n        setNewReminder({ date: \"\", time: \"\", note: \"\" });\r\n        fetchReminders(); // ✅ Update reminders list\r\n      } else {\r\n        alert(\"❌ Failed to add reminder! Check backend logs.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"❌ Error adding reminder:\", error);\r\n      alert(\"❌ Could not connect to the server.\");\r\n    }\r\n  } else {\r\n    alert(\"⚠️ Please fill in all fields!\");\r\n  }\r\n};\r\n*/\n/*\r\nconst addReminder = async () => {\r\n  const userId = localStorage.getItem(\"userId\"); // Or get it from global state\r\n\r\n  if (newReminder.date && newReminder.time && newReminder.note) {\r\n    const dateTime = `${newReminder.date}T${newReminder.time}:00`;\r\n\r\n    try {\r\n      const response = await fetch(\"http://localhost:3000/api/reminders/add\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ dateTime, note: newReminder.note, userId }), // Include userId\r\n      });\r\n\r\n      //const data = await response.json();\r\n      const data = await response.json();\r\n      console.log(\"🚀 Server Response:\", data); // Keeps the log for future debugging\r\n\r\n      if (response.ok) {\r\n        alert(\"✅ Reminder added successfully!\");\r\n        setNewReminder({ date: \"\", time: \"\", note: \"\" });\r\n        fetchReminders(); // Update reminders list\r\n      } else {\r\n        alert(\"❌ Failed to add reminder!\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"❌ Error adding reminder:\", error);\r\n    }\r\n  } else {\r\n    alert(\"⚠️ Please fill in all fields!\");\r\n  }\r\n};\r\n\r\nconst deleteReminder = async (id) => {\r\n  const userId = localStorage.getItem(\"userId\");\r\n\r\n  if (!window.confirm(\"Are you sure you want to delete this reminder?\")) return;\r\n\r\n  try {\r\n    const response = await fetch(`http://localhost:3000/api/reminders/delete/${userId}/${id}`, {\r\n      method: \"DELETE\",\r\n    });\r\n\r\n    const data = await response.json();\r\n    if (response.ok) {\r\n      alert(\"✅ Reminder deleted successfully!\");\r\n      fetchReminders(); // Refresh the list\r\n    } else {\r\n      alert(`❌ Failed to delete reminder! Server says: ${data.message}`);\r\n    }\r\n  } catch (error) {\r\n    console.error(\"❌ Error deleting reminder:\", error);\r\n  }\r\n};\r\n*/\n\n/*\r\n// ✅ Delete Reminder Function\r\nconst deleteReminder = async (id) => {\r\n  console.log(\"🛠️ Attempting to delete reminder with ID:\", id);\r\n\r\n  if (!window.confirm(\"Are you sure you want to delete this reminder?\")) return;\r\n\r\n  try {\r\n    const response = await fetch(`http://localhost:3000/api/reminders/delete/${id}`, {\r\n      method: \"DELETE\",\r\n    });\r\n\r\n    const data = await response.json();\r\n    console.log(\"🚀 Server Response:\", data);\r\n    alert(data.message); // ✅ Show success message\r\n\r\n    */\n//if (response.ok) {\n//setReminders(reminders.filter((reminder) => reminder._id !== id)); // ✅ Update UI\n//}\n//} catch (error) {\n//console.error(\"❌ Error deleting reminder:\", error);\n//alert(\"❌ Failed to delete reminder!\");\n//}\n/*\r\nif (response.ok) {\r\n  alert(\"✅ Reminder deleted successfully!\");\r\n  fetchReminders(); // ✅ Refresh list after deletion\r\n} else {\r\n  alert(`❌ Failed to delete reminder! Server says: ${data.message}`);\r\n}\r\n} catch (error) {\r\nconsole.error(\"❌ Error deleting reminder:\", error);\r\nalert(\"❌ Could not connect to the server.\");\r\n}\r\n};*/\n/*\r\n  return (\r\n    <div className=\"reminders-container\">\r\n      <h2>📅 Reminders</h2>\r\n\r\n      <div className=\"reminder-inputs\">\r\n        <input type=\"date\" name=\"date\" value={newReminder.date} onChange={handleInputChange} />\r\n        <input type=\"time\" name=\"time\" value={newReminder.time} onChange={handleInputChange} />\r\n        <input type=\"text\" name=\"note\" placeholder=\"Reminder note...\" value={newReminder.note} onChange={handleInputChange} />\r\n        <button onClick={addReminder}>➕ Add Reminder</button>\r\n      </div>\r\n\r\n      <h3>📌 Scheduled Reminders:</h3>\r\n      <ul>\r\n        {reminders.length > 0 ? (\r\n          reminders.map((reminder, index) => (\r\n            <li key={index}>\r\n              {new Date(reminder.dateTime).toLocaleString()} - {reminder.note}\r\n              <button onClick={() => deleteReminder(reminder._id)}>❌ Delete</button> {/* ✅ Delete Button \r\n            </li>\r\n          ))\r\n        ) : (\r\n          <p>No reminders set.</p>\r\n        )}\r\n      </ul>\r\n\r\n      <h3>🔔 Notifications:</h3>\r\n      <ul>\r\n        {notifications.length > 0 ? (\r\n          notifications.map((note, index) => (\r\n            <li key={index} className=\"notification\">{note}</li>\r\n          ))\r\n        ) : (\r\n          <p>No notifications yet.</p>\r\n        )}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Reminders;\r\n*/\n\n/*import React, { useEffect, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport \"../styles/Reminders.css\";\r\n\r\nconst socket = io(\"http://localhost:5000\"); // Connect to backend WebSocket\r\n\r\nfunction Reminders() {\r\n  const [reminders, setReminders] = useState([]);\r\n  const [newReminder, setNewReminder] = useState({ date: \"\", time: \"\", note: \"\" });\r\n  const [notifications, setNotifications] = useState([]); // Store real-time notifications\r\n\r\n  useEffect(() => {\r\n    // ✅ Listen for Reminder Notifications\r\n    socket.on(\"reminderNotification\", (data) => {\r\n      setNotifications((prev) => [...prev, data.message]);\r\n    });\r\n\r\n    return () => {\r\n      socket.off(\"reminderNotification\");\r\n    };\r\n  }, []);\r\n\r\n  const handleInputChange = (e) => {\r\n    setNewReminder({ ...newReminder, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const addReminder = async () => {\r\n    if (newReminder.date && newReminder.time && newReminder.note) {\r\n      const dateTime = `${newReminder.date}T${newReminder.time}:00`;\r\n\r\n      const response = await fetch(\"http://localhost:3000/api/reminders/add\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ dateTime, note: newReminder.note }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        alert(\"✅ Reminder added successfully!\");\r\n        setNewReminder({ date: \"\", time: \"\", note: \"\" });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"reminders-container\">\r\n      <h2>📅 Reminders</h2>\r\n\r\n      <div className=\"reminder-inputs\">\r\n        <input type=\"date\" name=\"date\" value={newReminder.date} onChange={handleInputChange} />\r\n        <input type=\"time\" name=\"time\" value={newReminder.time} onChange={handleInputChange} />\r\n        <input type=\"text\" name=\"note\" placeholder=\"Reminder note...\" value={newReminder.note} onChange={handleInputChange} />\r\n        <button onClick={addReminder}>➕ Add Reminder</button>\r\n      </div>\r\n\r\n      <h3>📌 Scheduled Reminders:</h3>\r\n      <ul>\r\n        {reminders.map((reminder, index) => (\r\n          <li key={index}>{reminder.date} at {reminder.time} - {reminder.note}</li>\r\n        ))}\r\n      </ul>\r\n\r\n      <h3>🔔 Notifications:</h3>\r\n      <ul>\r\n        {notifications.map((note, index) => (\r\n          <li key={index} className=\"notification\">{note}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Reminders;\r\n*/\n\n/*import React, { useState, useEffect } from \"react\";\r\nimport \"../styles/Reminders.css\";\r\n\r\nfunction Reminders() {\r\n  const [reminders, setReminders] = useState([]);\r\n  const [newReminder, setNewReminder] = useState({ date: \"\", time: \"\", note: \"\" });\r\n\r\n  // Load reminders from localStorage when component mounts\r\n  useEffect(() => {\r\n    const savedReminders = JSON.parse(localStorage.getItem(\"reminders\")) || [];\r\n    setReminders(savedReminders);\r\n  }, []);\r\n\r\n  const handleInputChange = (e) => {\r\n    setNewReminder({ ...newReminder, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const addReminder = () => {\r\n    if (newReminder.date && newReminder.time && newReminder.note) {\r\n      const newList = [...reminders, newReminder];\r\n      setReminders(newList);\r\n      localStorage.setItem(\"reminders\", JSON.stringify(newList));\r\n      setNewReminder({ date: \"\", time: \"\", note: \"\" });\r\n\r\n      showNotification(`Reminder set for ${newReminder.date} at ${newReminder.time}`);\r\n    }\r\n  };\r\n\r\n  const deleteReminder = (index) => {\r\n    const updatedReminders = reminders.filter((_, i) => i !== index);\r\n    setReminders(updatedReminders);\r\n    localStorage.setItem(\"reminders\", JSON.stringify(updatedReminders));\r\n  };\r\n\r\n  const showNotification = (message) => {\r\n    if (Notification.permission === \"granted\") {\r\n      new Notification(\"Menstrual Tracker\", { body: message });\r\n    } else if (Notification.permission !== \"denied\") {\r\n      Notification.requestPermission().then((permission) => {\r\n        if (permission === \"granted\") {\r\n          new Notification(\"Menstrual Tracker\", { body: message });\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"reminders-container\">\r\n      <h2>Reminders</h2>\r\n\r\n      <div className=\"reminder-inputs\">\r\n        <input type=\"date\" name=\"date\" value={newReminder.date} onChange={handleInputChange} />\r\n        <input type=\"time\" name=\"time\" value={newReminder.time} onChange={handleInputChange} />\r\n        <input type=\"text\" name=\"note\" placeholder=\"Reminder note...\" value={newReminder.note} onChange={handleInputChange} />\r\n        <button onClick={addReminder}>Add Reminder</button>\r\n      </div>\r\n\r\n      <h3>Scheduled Reminders:</h3>\r\n      {reminders.length === 0 ? <p>No reminders set.</p> : (\r\n        <ul>\r\n          {reminders.map((reminder, index) => (\r\n            <li key={index}>\r\n              {reminder.date} at {reminder.time} - {reminder.note} \r\n              <button onClick={() => deleteReminder(index)}>❎</button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Reminders;\r\n*/\n\n/*import React, { useState } from \"react\";\r\nimport \"../styles/Reminders.css\";\r\n\r\nfunction Reminders() {\r\n  const [reminders, setReminders] = useState([]);\r\n  const [newReminder, setNewReminder] = useState({ date: \"\", time: \"\", note: \"\" });\r\n\r\n  const handleInputChange = (e) => {\r\n    setNewReminder({ ...newReminder, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const addReminder = () => {\r\n    if (newReminder.date && newReminder.time && newReminder.note) {\r\n      const newList = [...reminders, newReminder];\r\n      setReminders(newList);\r\n      localStorage.setItem(\"reminders\", JSON.stringify(newList));\r\n      setNewReminder({ date: \"\", time: \"\", note: \"\" });\r\n      showNotification(`Reminder set for ${newReminder.date} at ${newReminder.time}`);\r\n    }\r\n  };\r\n\r\n  const deleteReminder = (index) => {\r\n    const updatedReminders = reminders.filter((_, i) => i !== index);\r\n    setReminders(updatedReminders);\r\n    localStorage.setItem(\"reminders\", JSON.stringify(updatedReminders));\r\n  };\r\n\r\n  const showNotification = (message) => {\r\n    if (Notification.permission === \"granted\") {\r\n      new Notification(\"Menstrual Tracker\", { body: message });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"reminders-container\">\r\n      <h2>Reminders</h2>\r\n\r\n      <div className=\"reminder-inputs\">\r\n        <input type=\"date\" name=\"date\" value={newReminder.date} onChange={handleInputChange} />\r\n        <input type=\"time\" name=\"time\" value={newReminder.time} onChange={handleInputChange} />\r\n        <input type=\"text\" name=\"note\" placeholder=\"Reminder note...\" value={newReminder.note} onChange={handleInputChange} />\r\n        <button onClick={addReminder}>Add Reminder</button>\r\n      </div>\r\n\r\n      <h3>Scheduled Reminders:</h3>\r\n      <ul>\r\n        {reminders.map((reminder, index) => (\r\n          <li key={index}>\r\n            {reminder.date} at {reminder.time} - {reminder.note} \r\n            <button onClick={() => deleteReminder(index)}>❌</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Reminders;\r\n*/\n\n/*\r\nimport { useState } from \"react\";\r\n\r\nexport default function Reminders() {\r\n  const [reminders, setReminders] = useState([]);\r\n  const [newReminder, setNewReminder] = useState(\"\");\r\n\r\n  const addReminder = () => {\r\n    if (newReminder.trim() !== \"\") {\r\n      setReminders([...reminders, newReminder]);\r\n      setNewReminder(\"\");\r\n    }\r\n  };\r\n\r\n  const removeReminder = (index) => {\r\n    setReminders(reminders.filter((_, i) => i !== index));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3>Reminders</h3>\r\n      <input \r\n        type=\"text\" \r\n        placeholder=\"Add a reminder...\" \r\n        value={newReminder} \r\n        onChange={(e) => setNewReminder(e.target.value)}\r\n      />\r\n      <button onClick={addReminder}>Add</button>\r\n\r\n      <ul>\r\n        {reminders.map((reminder, index) => (\r\n          <li key={index}>\r\n            {reminder} <button onClick={() => removeReminder(index)}>❌</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n*/","map":{"version":3,"names":[],"sources":["C:/vardha/Menstrual/frontend/src/pages/Reminders.js"],"sourcesContent":["/*import React, { useEffect, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport \"../styles/Reminders.css\";\r\n\r\nconst socket = io(\"http://localhost:3000\"); // ✅ Connect to backend WebSocket\r\n\r\nfunction Reminders() {\r\n  const [reminders, setReminders] = useState([]);\r\n  const [newReminder, setNewReminder] = useState({ date: \"\", time: \"\", note: \"\" });\r\n  const [notifications, setNotifications] = useState([]); // ✅ Store real-time notifications\r\n\r\n  useEffect(() => {\r\n    // ✅ Listen for Reminder Notifications\r\n    socket.on(\"reminderNotification\", (data) => {\r\n      setNotifications((prev) => [...prev, data.message]);\r\n    });\r\n\r\n    return () => {\r\n      socket.off(\"reminderNotification\");\r\n    };\r\n  }, []);*/\r\n/*\r\n  // ✅ Fetch Reminders from Backend\r\n  const fetchReminders = async () => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:3000/api/reminders\");\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setReminders(data);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"❌ Error fetching reminders:\", error);\r\n    }\r\n  };\r\n*/\r\n/*\r\nconst fetchReminders = async () => {\r\n  const userId = localStorage.getItem(\"userId\");\r\n\r\n  try {\r\n    const response = await fetch(`http://localhost:3000/api/reminders/${userId}`);\r\n    if (response.ok) {\r\n      const data = await response.json();\r\n      setReminders(data);\r\n    }\r\n  } catch (error) {\r\n    console.error(\"❌ Error fetching reminders:\", error);\r\n  }\r\n};\r\n\r\n  useEffect(() => {\r\n    fetchReminders(); // ✅ Fetch reminders on load\r\n  }, []);\r\n\r\n  const handleInputChange = (e) => {\r\n    setNewReminder({ ...newReminder, [e.target.name]: e.target.value });\r\n  };*/\r\n/*\r\n  const addReminder = async () => {\r\n    if (newReminder.date && newReminder.time && newReminder.note) {\r\n      const dateTime = `${newReminder.date}T${newReminder.time}:00`;\r\n\r\n      const response = await fetch(\"http://localhost:3000/api/reminders/add\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ dateTime, note: newReminder.note }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        alert(\"✅ Reminder added successfully!\");\r\n        setNewReminder({ date: \"\", time: \"\", note: \"\" });\r\n        fetchReminders(); // ✅ Update reminders list\r\n      }\r\n    }\r\n  };\r\n*/\r\n/*\r\nconst addReminder = async () => {\r\n  if (newReminder.date && newReminder.time && newReminder.note) {\r\n    const dateTime = `${newReminder.date}T${newReminder.time}:00`;\r\n\r\n    try {\r\n      const response = await fetch(\"http://localhost:3000/api/reminders/add\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ dateTime, note: newReminder.note }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      console.log(\"🚀 Server Response:\", data); // ✅ Log Response for Debugging\r\n\r\n      if (response.ok) {\r\n        alert(\"✅ Reminder added successfully!\");\r\n        setNewReminder({ date: \"\", time: \"\", note: \"\" });\r\n        fetchReminders(); // ✅ Update reminders list\r\n      } else {\r\n        alert(\"❌ Failed to add reminder! Check backend logs.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"❌ Error adding reminder:\", error);\r\n      alert(\"❌ Could not connect to the server.\");\r\n    }\r\n  } else {\r\n    alert(\"⚠️ Please fill in all fields!\");\r\n  }\r\n};\r\n*/\r\n/*\r\nconst addReminder = async () => {\r\n  const userId = localStorage.getItem(\"userId\"); // Or get it from global state\r\n\r\n  if (newReminder.date && newReminder.time && newReminder.note) {\r\n    const dateTime = `${newReminder.date}T${newReminder.time}:00`;\r\n\r\n    try {\r\n      const response = await fetch(\"http://localhost:3000/api/reminders/add\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ dateTime, note: newReminder.note, userId }), // Include userId\r\n      });\r\n\r\n      //const data = await response.json();\r\n      const data = await response.json();\r\n      console.log(\"🚀 Server Response:\", data); // Keeps the log for future debugging\r\n\r\n      if (response.ok) {\r\n        alert(\"✅ Reminder added successfully!\");\r\n        setNewReminder({ date: \"\", time: \"\", note: \"\" });\r\n        fetchReminders(); // Update reminders list\r\n      } else {\r\n        alert(\"❌ Failed to add reminder!\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"❌ Error adding reminder:\", error);\r\n    }\r\n  } else {\r\n    alert(\"⚠️ Please fill in all fields!\");\r\n  }\r\n};\r\n\r\nconst deleteReminder = async (id) => {\r\n  const userId = localStorage.getItem(\"userId\");\r\n\r\n  if (!window.confirm(\"Are you sure you want to delete this reminder?\")) return;\r\n\r\n  try {\r\n    const response = await fetch(`http://localhost:3000/api/reminders/delete/${userId}/${id}`, {\r\n      method: \"DELETE\",\r\n    });\r\n\r\n    const data = await response.json();\r\n    if (response.ok) {\r\n      alert(\"✅ Reminder deleted successfully!\");\r\n      fetchReminders(); // Refresh the list\r\n    } else {\r\n      alert(`❌ Failed to delete reminder! Server says: ${data.message}`);\r\n    }\r\n  } catch (error) {\r\n    console.error(\"❌ Error deleting reminder:\", error);\r\n  }\r\n};\r\n*/\r\n\r\n/*\r\n// ✅ Delete Reminder Function\r\nconst deleteReminder = async (id) => {\r\n  console.log(\"🛠️ Attempting to delete reminder with ID:\", id);\r\n\r\n  if (!window.confirm(\"Are you sure you want to delete this reminder?\")) return;\r\n\r\n  try {\r\n    const response = await fetch(`http://localhost:3000/api/reminders/delete/${id}`, {\r\n      method: \"DELETE\",\r\n    });\r\n\r\n    const data = await response.json();\r\n    console.log(\"🚀 Server Response:\", data);\r\n    alert(data.message); // ✅ Show success message\r\n\r\n    */\r\n    //if (response.ok) {\r\n      //setReminders(reminders.filter((reminder) => reminder._id !== id)); // ✅ Update UI\r\n    //}\r\n  //} catch (error) {\r\n    //console.error(\"❌ Error deleting reminder:\", error);\r\n    //alert(\"❌ Failed to delete reminder!\");\r\n  //}\r\n  /*\r\n  if (response.ok) {\r\n    alert(\"✅ Reminder deleted successfully!\");\r\n    fetchReminders(); // ✅ Refresh list after deletion\r\n  } else {\r\n    alert(`❌ Failed to delete reminder! Server says: ${data.message}`);\r\n  }\r\n} catch (error) {\r\n  console.error(\"❌ Error deleting reminder:\", error);\r\n  alert(\"❌ Could not connect to the server.\");\r\n}\r\n\r\n};*/\r\n/*\r\n  return (\r\n    <div className=\"reminders-container\">\r\n      <h2>📅 Reminders</h2>\r\n\r\n      <div className=\"reminder-inputs\">\r\n        <input type=\"date\" name=\"date\" value={newReminder.date} onChange={handleInputChange} />\r\n        <input type=\"time\" name=\"time\" value={newReminder.time} onChange={handleInputChange} />\r\n        <input type=\"text\" name=\"note\" placeholder=\"Reminder note...\" value={newReminder.note} onChange={handleInputChange} />\r\n        <button onClick={addReminder}>➕ Add Reminder</button>\r\n      </div>\r\n\r\n      <h3>📌 Scheduled Reminders:</h3>\r\n      <ul>\r\n        {reminders.length > 0 ? (\r\n          reminders.map((reminder, index) => (\r\n            <li key={index}>\r\n              {new Date(reminder.dateTime).toLocaleString()} - {reminder.note}\r\n              <button onClick={() => deleteReminder(reminder._id)}>❌ Delete</button> {/* ✅ Delete Button \r\n            </li>\r\n          ))\r\n        ) : (\r\n          <p>No reminders set.</p>\r\n        )}\r\n      </ul>\r\n\r\n      <h3>🔔 Notifications:</h3>\r\n      <ul>\r\n        {notifications.length > 0 ? (\r\n          notifications.map((note, index) => (\r\n            <li key={index} className=\"notification\">{note}</li>\r\n          ))\r\n        ) : (\r\n          <p>No notifications yet.</p>\r\n        )}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Reminders;\r\n*/\r\n\r\n\r\n\r\n/*import React, { useEffect, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport \"../styles/Reminders.css\";\r\n\r\nconst socket = io(\"http://localhost:5000\"); // Connect to backend WebSocket\r\n\r\nfunction Reminders() {\r\n  const [reminders, setReminders] = useState([]);\r\n  const [newReminder, setNewReminder] = useState({ date: \"\", time: \"\", note: \"\" });\r\n  const [notifications, setNotifications] = useState([]); // Store real-time notifications\r\n\r\n  useEffect(() => {\r\n    // ✅ Listen for Reminder Notifications\r\n    socket.on(\"reminderNotification\", (data) => {\r\n      setNotifications((prev) => [...prev, data.message]);\r\n    });\r\n\r\n    return () => {\r\n      socket.off(\"reminderNotification\");\r\n    };\r\n  }, []);\r\n\r\n  const handleInputChange = (e) => {\r\n    setNewReminder({ ...newReminder, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const addReminder = async () => {\r\n    if (newReminder.date && newReminder.time && newReminder.note) {\r\n      const dateTime = `${newReminder.date}T${newReminder.time}:00`;\r\n\r\n      const response = await fetch(\"http://localhost:3000/api/reminders/add\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ dateTime, note: newReminder.note }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        alert(\"✅ Reminder added successfully!\");\r\n        setNewReminder({ date: \"\", time: \"\", note: \"\" });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"reminders-container\">\r\n      <h2>📅 Reminders</h2>\r\n\r\n      <div className=\"reminder-inputs\">\r\n        <input type=\"date\" name=\"date\" value={newReminder.date} onChange={handleInputChange} />\r\n        <input type=\"time\" name=\"time\" value={newReminder.time} onChange={handleInputChange} />\r\n        <input type=\"text\" name=\"note\" placeholder=\"Reminder note...\" value={newReminder.note} onChange={handleInputChange} />\r\n        <button onClick={addReminder}>➕ Add Reminder</button>\r\n      </div>\r\n\r\n      <h3>📌 Scheduled Reminders:</h3>\r\n      <ul>\r\n        {reminders.map((reminder, index) => (\r\n          <li key={index}>{reminder.date} at {reminder.time} - {reminder.note}</li>\r\n        ))}\r\n      </ul>\r\n\r\n      <h3>🔔 Notifications:</h3>\r\n      <ul>\r\n        {notifications.map((note, index) => (\r\n          <li key={index} className=\"notification\">{note}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Reminders;\r\n*/\r\n\r\n\r\n/*import React, { useState, useEffect } from \"react\";\r\nimport \"../styles/Reminders.css\";\r\n\r\nfunction Reminders() {\r\n  const [reminders, setReminders] = useState([]);\r\n  const [newReminder, setNewReminder] = useState({ date: \"\", time: \"\", note: \"\" });\r\n\r\n  // Load reminders from localStorage when component mounts\r\n  useEffect(() => {\r\n    const savedReminders = JSON.parse(localStorage.getItem(\"reminders\")) || [];\r\n    setReminders(savedReminders);\r\n  }, []);\r\n\r\n  const handleInputChange = (e) => {\r\n    setNewReminder({ ...newReminder, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const addReminder = () => {\r\n    if (newReminder.date && newReminder.time && newReminder.note) {\r\n      const newList = [...reminders, newReminder];\r\n      setReminders(newList);\r\n      localStorage.setItem(\"reminders\", JSON.stringify(newList));\r\n      setNewReminder({ date: \"\", time: \"\", note: \"\" });\r\n\r\n      showNotification(`Reminder set for ${newReminder.date} at ${newReminder.time}`);\r\n    }\r\n  };\r\n\r\n  const deleteReminder = (index) => {\r\n    const updatedReminders = reminders.filter((_, i) => i !== index);\r\n    setReminders(updatedReminders);\r\n    localStorage.setItem(\"reminders\", JSON.stringify(updatedReminders));\r\n  };\r\n\r\n  const showNotification = (message) => {\r\n    if (Notification.permission === \"granted\") {\r\n      new Notification(\"Menstrual Tracker\", { body: message });\r\n    } else if (Notification.permission !== \"denied\") {\r\n      Notification.requestPermission().then((permission) => {\r\n        if (permission === \"granted\") {\r\n          new Notification(\"Menstrual Tracker\", { body: message });\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"reminders-container\">\r\n      <h2>Reminders</h2>\r\n\r\n      <div className=\"reminder-inputs\">\r\n        <input type=\"date\" name=\"date\" value={newReminder.date} onChange={handleInputChange} />\r\n        <input type=\"time\" name=\"time\" value={newReminder.time} onChange={handleInputChange} />\r\n        <input type=\"text\" name=\"note\" placeholder=\"Reminder note...\" value={newReminder.note} onChange={handleInputChange} />\r\n        <button onClick={addReminder}>Add Reminder</button>\r\n      </div>\r\n\r\n      <h3>Scheduled Reminders:</h3>\r\n      {reminders.length === 0 ? <p>No reminders set.</p> : (\r\n        <ul>\r\n          {reminders.map((reminder, index) => (\r\n            <li key={index}>\r\n              {reminder.date} at {reminder.time} - {reminder.note} \r\n              <button onClick={() => deleteReminder(index)}>❎</button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Reminders;\r\n*/\r\n\r\n\r\n\r\n\r\n/*import React, { useState } from \"react\";\r\nimport \"../styles/Reminders.css\";\r\n\r\nfunction Reminders() {\r\n  const [reminders, setReminders] = useState([]);\r\n  const [newReminder, setNewReminder] = useState({ date: \"\", time: \"\", note: \"\" });\r\n\r\n  const handleInputChange = (e) => {\r\n    setNewReminder({ ...newReminder, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const addReminder = () => {\r\n    if (newReminder.date && newReminder.time && newReminder.note) {\r\n      const newList = [...reminders, newReminder];\r\n      setReminders(newList);\r\n      localStorage.setItem(\"reminders\", JSON.stringify(newList));\r\n      setNewReminder({ date: \"\", time: \"\", note: \"\" });\r\n      showNotification(`Reminder set for ${newReminder.date} at ${newReminder.time}`);\r\n    }\r\n  };\r\n\r\n  const deleteReminder = (index) => {\r\n    const updatedReminders = reminders.filter((_, i) => i !== index);\r\n    setReminders(updatedReminders);\r\n    localStorage.setItem(\"reminders\", JSON.stringify(updatedReminders));\r\n  };\r\n\r\n  const showNotification = (message) => {\r\n    if (Notification.permission === \"granted\") {\r\n      new Notification(\"Menstrual Tracker\", { body: message });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"reminders-container\">\r\n      <h2>Reminders</h2>\r\n\r\n      <div className=\"reminder-inputs\">\r\n        <input type=\"date\" name=\"date\" value={newReminder.date} onChange={handleInputChange} />\r\n        <input type=\"time\" name=\"time\" value={newReminder.time} onChange={handleInputChange} />\r\n        <input type=\"text\" name=\"note\" placeholder=\"Reminder note...\" value={newReminder.note} onChange={handleInputChange} />\r\n        <button onClick={addReminder}>Add Reminder</button>\r\n      </div>\r\n\r\n      <h3>Scheduled Reminders:</h3>\r\n      <ul>\r\n        {reminders.map((reminder, index) => (\r\n          <li key={index}>\r\n            {reminder.date} at {reminder.time} - {reminder.note} \r\n            <button onClick={() => deleteReminder(index)}>❌</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Reminders;\r\n*/\r\n\r\n\r\n\r\n\r\n/*\r\nimport { useState } from \"react\";\r\n\r\nexport default function Reminders() {\r\n  const [reminders, setReminders] = useState([]);\r\n  const [newReminder, setNewReminder] = useState(\"\");\r\n\r\n  const addReminder = () => {\r\n    if (newReminder.trim() !== \"\") {\r\n      setReminders([...reminders, newReminder]);\r\n      setNewReminder(\"\");\r\n    }\r\n  };\r\n\r\n  const removeReminder = (index) => {\r\n    setReminders(reminders.filter((_, i) => i !== index));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3>Reminders</h3>\r\n      <input \r\n        type=\"text\" \r\n        placeholder=\"Add a reminder...\" \r\n        value={newReminder} \r\n        onChange={(e) => setNewReminder(e.target.value)}\r\n      />\r\n      <button onClick={addReminder}>Add</button>\r\n\r\n      <ul>\r\n        {reminders.map((reminder, index) => (\r\n          <li key={index}>\r\n            {reminder} <button onClick={() => removeReminder(index)}>❌</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n*/"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}