{"ast":null,"code":"var _jsxFileName = \"C:\\\\vardha\\\\Menstrual\\\\frontend\\\\src\\\\pages\\\\Reminders.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport \"../styles/Reminders.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:5000\"); // ✅ Connect to backend WebSocket\n\nfunction Reminders() {\n  _s();\n  const [reminders, setReminders] = useState([]);\n  const [newReminder, setNewReminder] = useState({\n    date: \"\",\n    time: \"\",\n    note: \"\"\n  });\n  const [notifications, setNotifications] = useState([]); // ✅ Store real-time notifications\n\n  useEffect(() => {\n    // ✅ Listen for Reminder Notifications\n    socket.on(\"reminderNotification\", data => {\n      setNotifications(prev => [...prev, data.message]);\n    });\n    return () => {\n      socket.off(\"reminderNotification\");\n    };\n  }, []);\n\n  // ✅ Fetch Reminders from Backend\n  const fetchReminders = async () => {\n    try {\n      const response = await fetch(\"http://localhost:3000/api/reminders\");\n      if (response.ok) {\n        const data = await response.json();\n        setReminders(data);\n      }\n    } catch (error) {\n      console.error(\"❌ Error fetching reminders:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchReminders(); // ✅ Fetch reminders on load\n  }, []);\n  const handleInputChange = e => {\n    setNewReminder({\n      ...newReminder,\n      [e.target.name]: e.target.value\n    });\n  };\n  /*\r\n    const addReminder = async () => {\r\n      if (newReminder.date && newReminder.time && newReminder.note) {\r\n        const dateTime = `${newReminder.date}T${newReminder.time}:00`;\r\n  \r\n        const response = await fetch(\"http://localhost:3000/api/reminders/add\", {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({ dateTime, note: newReminder.note }),\r\n        });\r\n  \r\n        if (response.ok) {\r\n          alert(\"✅ Reminder added successfully!\");\r\n          setNewReminder({ date: \"\", time: \"\", note: \"\" });\r\n          fetchReminders(); // ✅ Update reminders list\r\n        }\r\n      }\r\n    };\r\n  */\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"reminders-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uD83D\\uDCC5 Reminders\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"reminder-inputs\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        name: \"date\",\n        value: newReminder.date,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"time\",\n        name: \"time\",\n        value: newReminder.time,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"note\",\n        placeholder: \"Reminder note...\",\n        value: newReminder.note,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addReminder,\n        children: \"\\u2795 Add Reminder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\uD83D\\uDCCC Scheduled Reminders:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: reminders.length > 0 ? reminders.map((reminder, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [new Date(reminder.dateTime).toLocaleString(), \" - \", reminder.note]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No reminders set.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\uD83D\\uDD14 Notifications:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: notifications.length > 0 ? notifications.map((note, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"notification\",\n        children: note\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No notifications yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(Reminders, \"/fznsoTr+T4qWcGleiLh0MeFPOY=\");\n_c = Reminders;\nexport default Reminders;\n\n/*import React, { useEffect, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport \"../styles/Reminders.css\";\r\n\r\nconst socket = io(\"http://localhost:5000\"); // Connect to backend WebSocket\r\n\r\nfunction Reminders() {\r\n  const [reminders, setReminders] = useState([]);\r\n  const [newReminder, setNewReminder] = useState({ date: \"\", time: \"\", note: \"\" });\r\n  const [notifications, setNotifications] = useState([]); // Store real-time notifications\r\n\r\n  useEffect(() => {\r\n    // ✅ Listen for Reminder Notifications\r\n    socket.on(\"reminderNotification\", (data) => {\r\n      setNotifications((prev) => [...prev, data.message]);\r\n    });\r\n\r\n    return () => {\r\n      socket.off(\"reminderNotification\");\r\n    };\r\n  }, []);\r\n\r\n  const handleInputChange = (e) => {\r\n    setNewReminder({ ...newReminder, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const addReminder = async () => {\r\n    if (newReminder.date && newReminder.time && newReminder.note) {\r\n      const dateTime = `${newReminder.date}T${newReminder.time}:00`;\r\n\r\n      const response = await fetch(\"http://localhost:3000/api/reminders/add\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ dateTime, note: newReminder.note }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        alert(\"✅ Reminder added successfully!\");\r\n        setNewReminder({ date: \"\", time: \"\", note: \"\" });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"reminders-container\">\r\n      <h2>📅 Reminders</h2>\r\n\r\n      <div className=\"reminder-inputs\">\r\n        <input type=\"date\" name=\"date\" value={newReminder.date} onChange={handleInputChange} />\r\n        <input type=\"time\" name=\"time\" value={newReminder.time} onChange={handleInputChange} />\r\n        <input type=\"text\" name=\"note\" placeholder=\"Reminder note...\" value={newReminder.note} onChange={handleInputChange} />\r\n        <button onClick={addReminder}>➕ Add Reminder</button>\r\n      </div>\r\n\r\n      <h3>📌 Scheduled Reminders:</h3>\r\n      <ul>\r\n        {reminders.map((reminder, index) => (\r\n          <li key={index}>{reminder.date} at {reminder.time} - {reminder.note}</li>\r\n        ))}\r\n      </ul>\r\n\r\n      <h3>🔔 Notifications:</h3>\r\n      <ul>\r\n        {notifications.map((note, index) => (\r\n          <li key={index} className=\"notification\">{note}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Reminders;\r\n*/\n\n/*import React, { useState, useEffect } from \"react\";\r\nimport \"../styles/Reminders.css\";\r\n\r\nfunction Reminders() {\r\n  const [reminders, setReminders] = useState([]);\r\n  const [newReminder, setNewReminder] = useState({ date: \"\", time: \"\", note: \"\" });\r\n\r\n  // Load reminders from localStorage when component mounts\r\n  useEffect(() => {\r\n    const savedReminders = JSON.parse(localStorage.getItem(\"reminders\")) || [];\r\n    setReminders(savedReminders);\r\n  }, []);\r\n\r\n  const handleInputChange = (e) => {\r\n    setNewReminder({ ...newReminder, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const addReminder = () => {\r\n    if (newReminder.date && newReminder.time && newReminder.note) {\r\n      const newList = [...reminders, newReminder];\r\n      setReminders(newList);\r\n      localStorage.setItem(\"reminders\", JSON.stringify(newList));\r\n      setNewReminder({ date: \"\", time: \"\", note: \"\" });\r\n\r\n      showNotification(`Reminder set for ${newReminder.date} at ${newReminder.time}`);\r\n    }\r\n  };\r\n\r\n  const deleteReminder = (index) => {\r\n    const updatedReminders = reminders.filter((_, i) => i !== index);\r\n    setReminders(updatedReminders);\r\n    localStorage.setItem(\"reminders\", JSON.stringify(updatedReminders));\r\n  };\r\n\r\n  const showNotification = (message) => {\r\n    if (Notification.permission === \"granted\") {\r\n      new Notification(\"Menstrual Tracker\", { body: message });\r\n    } else if (Notification.permission !== \"denied\") {\r\n      Notification.requestPermission().then((permission) => {\r\n        if (permission === \"granted\") {\r\n          new Notification(\"Menstrual Tracker\", { body: message });\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"reminders-container\">\r\n      <h2>Reminders</h2>\r\n\r\n      <div className=\"reminder-inputs\">\r\n        <input type=\"date\" name=\"date\" value={newReminder.date} onChange={handleInputChange} />\r\n        <input type=\"time\" name=\"time\" value={newReminder.time} onChange={handleInputChange} />\r\n        <input type=\"text\" name=\"note\" placeholder=\"Reminder note...\" value={newReminder.note} onChange={handleInputChange} />\r\n        <button onClick={addReminder}>Add Reminder</button>\r\n      </div>\r\n\r\n      <h3>Scheduled Reminders:</h3>\r\n      {reminders.length === 0 ? <p>No reminders set.</p> : (\r\n        <ul>\r\n          {reminders.map((reminder, index) => (\r\n            <li key={index}>\r\n              {reminder.date} at {reminder.time} - {reminder.note} \r\n              <button onClick={() => deleteReminder(index)}>❎</button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Reminders;\r\n*/\n\n/*import React, { useState } from \"react\";\r\nimport \"../styles/Reminders.css\";\r\n\r\nfunction Reminders() {\r\n  const [reminders, setReminders] = useState([]);\r\n  const [newReminder, setNewReminder] = useState({ date: \"\", time: \"\", note: \"\" });\r\n\r\n  const handleInputChange = (e) => {\r\n    setNewReminder({ ...newReminder, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const addReminder = () => {\r\n    if (newReminder.date && newReminder.time && newReminder.note) {\r\n      const newList = [...reminders, newReminder];\r\n      setReminders(newList);\r\n      localStorage.setItem(\"reminders\", JSON.stringify(newList));\r\n      setNewReminder({ date: \"\", time: \"\", note: \"\" });\r\n      showNotification(`Reminder set for ${newReminder.date} at ${newReminder.time}`);\r\n    }\r\n  };\r\n\r\n  const deleteReminder = (index) => {\r\n    const updatedReminders = reminders.filter((_, i) => i !== index);\r\n    setReminders(updatedReminders);\r\n    localStorage.setItem(\"reminders\", JSON.stringify(updatedReminders));\r\n  };\r\n\r\n  const showNotification = (message) => {\r\n    if (Notification.permission === \"granted\") {\r\n      new Notification(\"Menstrual Tracker\", { body: message });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"reminders-container\">\r\n      <h2>Reminders</h2>\r\n\r\n      <div className=\"reminder-inputs\">\r\n        <input type=\"date\" name=\"date\" value={newReminder.date} onChange={handleInputChange} />\r\n        <input type=\"time\" name=\"time\" value={newReminder.time} onChange={handleInputChange} />\r\n        <input type=\"text\" name=\"note\" placeholder=\"Reminder note...\" value={newReminder.note} onChange={handleInputChange} />\r\n        <button onClick={addReminder}>Add Reminder</button>\r\n      </div>\r\n\r\n      <h3>Scheduled Reminders:</h3>\r\n      <ul>\r\n        {reminders.map((reminder, index) => (\r\n          <li key={index}>\r\n            {reminder.date} at {reminder.time} - {reminder.note} \r\n            <button onClick={() => deleteReminder(index)}>❌</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Reminders;\r\n*/\n\n/*\r\nimport { useState } from \"react\";\r\n\r\nexport default function Reminders() {\r\n  const [reminders, setReminders] = useState([]);\r\n  const [newReminder, setNewReminder] = useState(\"\");\r\n\r\n  const addReminder = () => {\r\n    if (newReminder.trim() !== \"\") {\r\n      setReminders([...reminders, newReminder]);\r\n      setNewReminder(\"\");\r\n    }\r\n  };\r\n\r\n  const removeReminder = (index) => {\r\n    setReminders(reminders.filter((_, i) => i !== index));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3>Reminders</h3>\r\n      <input \r\n        type=\"text\" \r\n        placeholder=\"Add a reminder...\" \r\n        value={newReminder} \r\n        onChange={(e) => setNewReminder(e.target.value)}\r\n      />\r\n      <button onClick={addReminder}>Add</button>\r\n\r\n      <ul>\r\n        {reminders.map((reminder, index) => (\r\n          <li key={index}>\r\n            {reminder} <button onClick={() => removeReminder(index)}>❌</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n*/\nvar _c;\n$RefreshReg$(_c, \"Reminders\");","map":{"version":3,"names":["React","useEffect","useState","io","jsxDEV","_jsxDEV","socket","Reminders","_s","reminders","setReminders","newReminder","setNewReminder","date","time","note","notifications","setNotifications","on","data","prev","message","off","fetchReminders","response","fetch","ok","json","error","console","handleInputChange","e","target","name","value","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","onClick","addReminder","length","map","reminder","index","Date","dateTime","toLocaleString","_c","$RefreshReg$"],"sources":["C:/vardha/Menstrual/frontend/src/pages/Reminders.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport \"../styles/Reminders.css\";\r\n\r\nconst socket = io(\"http://localhost:5000\"); // ✅ Connect to backend WebSocket\r\n\r\nfunction Reminders() {\r\n  const [reminders, setReminders] = useState([]);\r\n  const [newReminder, setNewReminder] = useState({ date: \"\", time: \"\", note: \"\" });\r\n  const [notifications, setNotifications] = useState([]); // ✅ Store real-time notifications\r\n\r\n  useEffect(() => {\r\n    // ✅ Listen for Reminder Notifications\r\n    socket.on(\"reminderNotification\", (data) => {\r\n      setNotifications((prev) => [...prev, data.message]);\r\n    });\r\n\r\n    return () => {\r\n      socket.off(\"reminderNotification\");\r\n    };\r\n  }, []);\r\n\r\n  // ✅ Fetch Reminders from Backend\r\n  const fetchReminders = async () => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:3000/api/reminders\");\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setReminders(data);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"❌ Error fetching reminders:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchReminders(); // ✅ Fetch reminders on load\r\n  }, []);\r\n\r\n  const handleInputChange = (e) => {\r\n    setNewReminder({ ...newReminder, [e.target.name]: e.target.value });\r\n  };\r\n/*\r\n  const addReminder = async () => {\r\n    if (newReminder.date && newReminder.time && newReminder.note) {\r\n      const dateTime = `${newReminder.date}T${newReminder.time}:00`;\r\n\r\n      const response = await fetch(\"http://localhost:3000/api/reminders/add\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ dateTime, note: newReminder.note }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        alert(\"✅ Reminder added successfully!\");\r\n        setNewReminder({ date: \"\", time: \"\", note: \"\" });\r\n        fetchReminders(); // ✅ Update reminders list\r\n      }\r\n    }\r\n  };\r\n*/\r\n  return (\r\n    <div className=\"reminders-container\">\r\n      <h2>📅 Reminders</h2>\r\n\r\n      <div className=\"reminder-inputs\">\r\n        <input type=\"date\" name=\"date\" value={newReminder.date} onChange={handleInputChange} />\r\n        <input type=\"time\" name=\"time\" value={newReminder.time} onChange={handleInputChange} />\r\n        <input type=\"text\" name=\"note\" placeholder=\"Reminder note...\" value={newReminder.note} onChange={handleInputChange} />\r\n        <button onClick={addReminder}>➕ Add Reminder</button>\r\n      </div>\r\n\r\n      <h3>📌 Scheduled Reminders:</h3>\r\n      <ul>\r\n        {reminders.length > 0 ? (\r\n          reminders.map((reminder, index) => (\r\n            <li key={index}>\r\n              {new Date(reminder.dateTime).toLocaleString()} - {reminder.note}\r\n            </li>\r\n          ))\r\n        ) : (\r\n          <p>No reminders set.</p>\r\n        )}\r\n      </ul>\r\n\r\n      <h3>🔔 Notifications:</h3>\r\n      <ul>\r\n        {notifications.length > 0 ? (\r\n          notifications.map((note, index) => (\r\n            <li key={index} className=\"notification\">{note}</li>\r\n          ))\r\n        ) : (\r\n          <p>No notifications yet.</p>\r\n        )}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Reminders;\r\n\r\n\r\n\r\n\r\n/*import React, { useEffect, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport \"../styles/Reminders.css\";\r\n\r\nconst socket = io(\"http://localhost:5000\"); // Connect to backend WebSocket\r\n\r\nfunction Reminders() {\r\n  const [reminders, setReminders] = useState([]);\r\n  const [newReminder, setNewReminder] = useState({ date: \"\", time: \"\", note: \"\" });\r\n  const [notifications, setNotifications] = useState([]); // Store real-time notifications\r\n\r\n  useEffect(() => {\r\n    // ✅ Listen for Reminder Notifications\r\n    socket.on(\"reminderNotification\", (data) => {\r\n      setNotifications((prev) => [...prev, data.message]);\r\n    });\r\n\r\n    return () => {\r\n      socket.off(\"reminderNotification\");\r\n    };\r\n  }, []);\r\n\r\n  const handleInputChange = (e) => {\r\n    setNewReminder({ ...newReminder, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const addReminder = async () => {\r\n    if (newReminder.date && newReminder.time && newReminder.note) {\r\n      const dateTime = `${newReminder.date}T${newReminder.time}:00`;\r\n\r\n      const response = await fetch(\"http://localhost:3000/api/reminders/add\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ dateTime, note: newReminder.note }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        alert(\"✅ Reminder added successfully!\");\r\n        setNewReminder({ date: \"\", time: \"\", note: \"\" });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"reminders-container\">\r\n      <h2>📅 Reminders</h2>\r\n\r\n      <div className=\"reminder-inputs\">\r\n        <input type=\"date\" name=\"date\" value={newReminder.date} onChange={handleInputChange} />\r\n        <input type=\"time\" name=\"time\" value={newReminder.time} onChange={handleInputChange} />\r\n        <input type=\"text\" name=\"note\" placeholder=\"Reminder note...\" value={newReminder.note} onChange={handleInputChange} />\r\n        <button onClick={addReminder}>➕ Add Reminder</button>\r\n      </div>\r\n\r\n      <h3>📌 Scheduled Reminders:</h3>\r\n      <ul>\r\n        {reminders.map((reminder, index) => (\r\n          <li key={index}>{reminder.date} at {reminder.time} - {reminder.note}</li>\r\n        ))}\r\n      </ul>\r\n\r\n      <h3>🔔 Notifications:</h3>\r\n      <ul>\r\n        {notifications.map((note, index) => (\r\n          <li key={index} className=\"notification\">{note}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Reminders;\r\n*/\r\n\r\n\r\n/*import React, { useState, useEffect } from \"react\";\r\nimport \"../styles/Reminders.css\";\r\n\r\nfunction Reminders() {\r\n  const [reminders, setReminders] = useState([]);\r\n  const [newReminder, setNewReminder] = useState({ date: \"\", time: \"\", note: \"\" });\r\n\r\n  // Load reminders from localStorage when component mounts\r\n  useEffect(() => {\r\n    const savedReminders = JSON.parse(localStorage.getItem(\"reminders\")) || [];\r\n    setReminders(savedReminders);\r\n  }, []);\r\n\r\n  const handleInputChange = (e) => {\r\n    setNewReminder({ ...newReminder, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const addReminder = () => {\r\n    if (newReminder.date && newReminder.time && newReminder.note) {\r\n      const newList = [...reminders, newReminder];\r\n      setReminders(newList);\r\n      localStorage.setItem(\"reminders\", JSON.stringify(newList));\r\n      setNewReminder({ date: \"\", time: \"\", note: \"\" });\r\n\r\n      showNotification(`Reminder set for ${newReminder.date} at ${newReminder.time}`);\r\n    }\r\n  };\r\n\r\n  const deleteReminder = (index) => {\r\n    const updatedReminders = reminders.filter((_, i) => i !== index);\r\n    setReminders(updatedReminders);\r\n    localStorage.setItem(\"reminders\", JSON.stringify(updatedReminders));\r\n  };\r\n\r\n  const showNotification = (message) => {\r\n    if (Notification.permission === \"granted\") {\r\n      new Notification(\"Menstrual Tracker\", { body: message });\r\n    } else if (Notification.permission !== \"denied\") {\r\n      Notification.requestPermission().then((permission) => {\r\n        if (permission === \"granted\") {\r\n          new Notification(\"Menstrual Tracker\", { body: message });\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"reminders-container\">\r\n      <h2>Reminders</h2>\r\n\r\n      <div className=\"reminder-inputs\">\r\n        <input type=\"date\" name=\"date\" value={newReminder.date} onChange={handleInputChange} />\r\n        <input type=\"time\" name=\"time\" value={newReminder.time} onChange={handleInputChange} />\r\n        <input type=\"text\" name=\"note\" placeholder=\"Reminder note...\" value={newReminder.note} onChange={handleInputChange} />\r\n        <button onClick={addReminder}>Add Reminder</button>\r\n      </div>\r\n\r\n      <h3>Scheduled Reminders:</h3>\r\n      {reminders.length === 0 ? <p>No reminders set.</p> : (\r\n        <ul>\r\n          {reminders.map((reminder, index) => (\r\n            <li key={index}>\r\n              {reminder.date} at {reminder.time} - {reminder.note} \r\n              <button onClick={() => deleteReminder(index)}>❎</button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Reminders;\r\n*/\r\n\r\n\r\n\r\n\r\n/*import React, { useState } from \"react\";\r\nimport \"../styles/Reminders.css\";\r\n\r\nfunction Reminders() {\r\n  const [reminders, setReminders] = useState([]);\r\n  const [newReminder, setNewReminder] = useState({ date: \"\", time: \"\", note: \"\" });\r\n\r\n  const handleInputChange = (e) => {\r\n    setNewReminder({ ...newReminder, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const addReminder = () => {\r\n    if (newReminder.date && newReminder.time && newReminder.note) {\r\n      const newList = [...reminders, newReminder];\r\n      setReminders(newList);\r\n      localStorage.setItem(\"reminders\", JSON.stringify(newList));\r\n      setNewReminder({ date: \"\", time: \"\", note: \"\" });\r\n      showNotification(`Reminder set for ${newReminder.date} at ${newReminder.time}`);\r\n    }\r\n  };\r\n\r\n  const deleteReminder = (index) => {\r\n    const updatedReminders = reminders.filter((_, i) => i !== index);\r\n    setReminders(updatedReminders);\r\n    localStorage.setItem(\"reminders\", JSON.stringify(updatedReminders));\r\n  };\r\n\r\n  const showNotification = (message) => {\r\n    if (Notification.permission === \"granted\") {\r\n      new Notification(\"Menstrual Tracker\", { body: message });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"reminders-container\">\r\n      <h2>Reminders</h2>\r\n\r\n      <div className=\"reminder-inputs\">\r\n        <input type=\"date\" name=\"date\" value={newReminder.date} onChange={handleInputChange} />\r\n        <input type=\"time\" name=\"time\" value={newReminder.time} onChange={handleInputChange} />\r\n        <input type=\"text\" name=\"note\" placeholder=\"Reminder note...\" value={newReminder.note} onChange={handleInputChange} />\r\n        <button onClick={addReminder}>Add Reminder</button>\r\n      </div>\r\n\r\n      <h3>Scheduled Reminders:</h3>\r\n      <ul>\r\n        {reminders.map((reminder, index) => (\r\n          <li key={index}>\r\n            {reminder.date} at {reminder.time} - {reminder.note} \r\n            <button onClick={() => deleteReminder(index)}>❌</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Reminders;\r\n*/\r\n\r\n\r\n\r\n\r\n/*\r\nimport { useState } from \"react\";\r\n\r\nexport default function Reminders() {\r\n  const [reminders, setReminders] = useState([]);\r\n  const [newReminder, setNewReminder] = useState(\"\");\r\n\r\n  const addReminder = () => {\r\n    if (newReminder.trim() !== \"\") {\r\n      setReminders([...reminders, newReminder]);\r\n      setNewReminder(\"\");\r\n    }\r\n  };\r\n\r\n  const removeReminder = (index) => {\r\n    setReminders(reminders.filter((_, i) => i !== index));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3>Reminders</h3>\r\n      <input \r\n        type=\"text\" \r\n        placeholder=\"Add a reminder...\" \r\n        value={newReminder} \r\n        onChange={(e) => setNewReminder(e.target.value)}\r\n      />\r\n      <button onClick={addReminder}>Add</button>\r\n\r\n      <ul>\r\n        {reminders.map((reminder, index) => (\r\n          <li key={index}>\r\n            {reminder} <button onClick={() => removeReminder(index)}>❌</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n*/"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}