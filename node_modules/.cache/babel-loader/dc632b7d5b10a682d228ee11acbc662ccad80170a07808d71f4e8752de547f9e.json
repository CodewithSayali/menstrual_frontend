{"ast":null,"code":"var _jsxFileName = \"C:\\\\vardha\\\\Menstrual\\\\frontend\\\\src\\\\pages\\\\MoodTracker.js\",\n  _s = $RefreshSig$();\n/*import React, { useState } from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport { Chart, registerables } from 'chart.js';\r\nimport \"../styles/MoodTracker.css\";\r\n\r\n// Register all Chart.js components\r\nChart.register(...registerables);\r\n\r\nfunction MoodTracker() {\r\n  const [moodData, setMoodData] = useState([]);\r\n  const [mood, setMood] = useState(\"\");\r\n\r\n  // Handle mood selection\r\n  const handleMoodSubmit = () => {\r\n    const newMoodData = [...moodData, { mood, date: new Date().toLocaleDateString() }];\r\n    setMoodData(newMoodData);\r\n    setMood(\"\");\r\n  };\r\n\r\n  // Prepare data for graph\r\n  const chartData = {\r\n    labels: moodData.map(entry => entry.date),\r\n    datasets: [\r\n      {\r\n        label: \"Mood Trends\",\r\n        data: moodData.map(entry => (entry.mood === \"Happy\" ? 1 : entry.mood === \"Sad\" ? -1 : 0)),\r\n        backgroundColor: [\"#ff4d6d\"],\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div className=\"mood-container\">\r\n      <h2>Mood Tracker</h2>\r\n      <select value={mood} onChange={(e) => setMood(e.target.value)}>\r\n        <option value=\"\">Select Mood</option>\r\n        <option value=\"Happy\">üòä Happy</option>\r\n        <option value=\"Sad\">üò¢ Sad</option>\r\n        <option value=\"Stressed\">üòñ Stressed</option>\r\n        <option value=\"Energetic\">‚ö° Energetic</option>\r\n      </select>\r\n      <button onClick={handleMoodSubmit}>Log Mood</button>\r\n      <Bar data={chartData} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MoodTracker;\r\n*/\n\n/*\r\nimport { useState } from \"react\";\r\n\r\nconst moods = [\"üòä\", \"üò¢\", \"üò°\", \"üò¥\", \"üòÅ\"];\r\n\r\nexport default function MoodTracker() {\r\n  const [selectedMood, setSelectedMood] = useState(null);\r\n\r\n  return (\r\n    <div>\r\n      <h3>How do you feel today?</h3>\r\n      <div>\r\n        {moods.map((mood, index) => (\r\n          <button key={index} onClick={() => setSelectedMood(mood)}>\r\n            {mood}\r\n          </button>\r\n        ))}\r\n      </div>\r\n      {selectedMood && <p>You selected: {selectedMood}</p>}\r\n    </div>\r\n  );\r\n}\r\n*/\n\n/*import { useState, useEffect } from \"react\";\r\nimport axios from \"axios\"; \r\n\r\nconst moods = [\"üòä\", \"üò¢\", \"üò°\", \"üò¥\", \"üòÅ\"];\r\nconst userId = \"123456\"; // Replace with actual user ID from authentication\r\n\r\nexport default function MoodTracker() {\r\n  const [selectedMood, setSelectedMood] = useState(null);\r\n  const [moodHistory, setMoodHistory] = useState([]);\r\n\r\n  // Fetch mood history from MongoDB\r\n  useEffect(() => {\r\n    axios.get(`http://localhost:5000/moods/${userId}/history`)\r\n      .then((response) => setMoodHistory(response.data))\r\n      .catch((error) => console.error(\"Error fetching mood history:\", error));\r\n  }, []);\r\n\r\n  // Save selected mood in MongoDB\r\n  const handleMoodSelect = async (mood) => {\r\n    setSelectedMood(mood);\r\n    try {\r\n      await axios.post(\"http://localhost:5000/moods/add\", { userId, mood });\r\n      setMoodHistory([...moodHistory, { date: new Date().toISOString(), mood }].slice(-7)); // Update UI\r\n    } catch (error) {\r\n      console.error(\"Error saving mood:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3>How do you feel today?</h3>\r\n      <div>\r\n        {moods.map((mood, index) => (\r\n          <button key={index} onClick={() => handleMoodSelect(mood)}>\r\n            {mood}\r\n          </button>\r\n        ))}\r\n      </div>\r\n      {selectedMood && <p>Today's Mood: {selectedMood}</p>}\r\n\r\n      <h3>Mood History (Last 7 Days):</h3>\r\n      <ul>\r\n        {moodHistory.map((entry, index) => (\r\n          <li key={index}>\r\n            {new Date(entry.date).toDateString()}: {entry.mood}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n*/\n/*\r\nimport { useState } from \"react\";\r\n\r\nconst moods = [\"üòä\", \"üò¢\", \"üò°\", \"üò¥\", \"üòÅ\"];\r\n\r\nexport default function MoodTracker() {\r\n  const [selectedMood, setSelectedMood] = useState(null);\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const logMood = async (mood) => {\r\n    const date = new Date().toISOString(); // Convert to a proper date format\r\n\r\n    try {\r\n      const response = await fetch(\"http://localhost:3000/moods/log\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`, // Send auth token if required\r\n        },\r\n        body: JSON.stringify({ mood, date }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        setMessage(\"Mood logged successfully!\");\r\n      } else {\r\n        setMessage(data.message || \"Failed to log mood.\");\r\n      }\r\n    } catch (error) {\r\n      setMessage(\"Error logging mood.\");\r\n    }\r\n\r\n    setSelectedMood(mood);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3>How do you feel today?</h3>\r\n      <div>\r\n        {moods.map((mood, index) => (\r\n          <button key={index} onClick={() => logMood(mood)}>\r\n            {mood}\r\n          </button>\r\n        ))}\r\n      </div>\r\n      {selectedMood && <p>You selected: {selectedMood}</p>}\r\n      {message && <p>{message}</p>}\r\n    </div>\r\n  );\r\n}\r\n*/\nimport { useState, useEffect } from \"react\";\nimport \",./styles/MoodTracker.css\"; // Importing the CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst moods = [{\n  emoji: \"üòä\",\n  label: \"Happy\"\n}, {\n  emoji: \"üò¢\",\n  label: \"Sad\"\n}, {\n  emoji: \"üò°\",\n  label: \"Angry\"\n}, {\n  emoji: \"üò¥\",\n  label: \"Tired\"\n}, {\n  emoji: \"üòü\",\n  label: \"Anxious\"\n}];\nconst moodQuotes = {\n  Happy: \"Keep smiling! Life is beautiful. üåû\",\n  Sad: \"It's okay to feel sad. Better days are ahead. üåà\",\n  Angry: \"Take a deep breath. Calmness is power. üåø\",\n  Tired: \"Rest is important. Recharge and go again! üí§\",\n  Anxious: \"You are stronger than you think. Take it one step at a time. üíô\"\n};\nexport default function MoodTracker() {\n  _s();\n  const [selectedMood, setSelectedMood] = useState(null);\n  const [message, setMessage] = useState(\"\");\n  const [quote, setQuote] = useState(\"\");\n  const [journal, setJournal] = useState(\"\");\n  const [moodHistory, setMoodHistory] = useState([]);\n  useEffect(() => {\n    fetchMoodHistory();\n  }, []);\n  const fetchMoodHistory = async () => {\n    try {\n      const response = await fetch(\"http://localhost:3000/moods/history\", {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n        }\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setMoodHistory(data);\n      }\n    } catch (error) {\n      console.error(\"Error fetching mood history:\", error);\n    }\n  };\n  const logMood = async mood => {\n    const date = new Date().toISOString();\n    try {\n      const response = await fetch(\"http://localhost:3000/moods/log\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n        },\n        body: JSON.stringify({\n          mood,\n          date,\n          journal\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setMessage(\"Mood logged successfully!\");\n        setMoodHistory(prev => [data.mood, ...prev]);\n      } else {\n        setMessage(data.message || \"Failed to log mood.\");\n      }\n    } catch (error) {\n      setMessage(\"Error logging mood.\");\n    }\n    setSelectedMood(mood);\n    setQuote(moodQuotes[mood]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mood-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"How do you feel today?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mood-buttons\",\n      children: moods.map((mood, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => logMood(mood.label),\n        className: `mood-button ${selectedMood === mood.label ? \"selected\" : \"\"}`,\n        children: mood.emoji\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }, this), selectedMood && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mood-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"You selected: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: selectedMood\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 28\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mood-quote\",\n        children: [\"\\u2728 \", quote]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: journal,\n        onChange: e => setJournal(e.target.value),\n        placeholder: \"Write something about your day...\",\n        className: \"journal-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => logMood(selectedMood),\n        className: \"save-button\",\n        children: \"Save Mood & Journal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 9\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      className: \"history-title\",\n      children: \"Your Mood History (Last 7 Days)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"mood-history\",\n      children: moodHistory.length > 0 ? moodHistory.map((entry, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"history-item\",\n        children: [entry.date.split(\"T\")[0], \" - \", entry.mood]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No mood logs found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 255,\n    columnNumber: 5\n  }, this);\n}\n_s(MoodTracker, \"XV9bIcipgOMULsSK5HTjDb7QvAg=\");\n_c = MoodTracker;\nvar _c;\n$RefreshReg$(_c, \"MoodTracker\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","moods","emoji","label","moodQuotes","Happy","Sad","Angry","Tired","Anxious","MoodTracker","_s","selectedMood","setSelectedMood","message","setMessage","quote","setQuote","journal","setJournal","moodHistory","setMoodHistory","fetchMoodHistory","response","fetch","headers","Authorization","localStorage","getItem","data","json","ok","error","console","logMood","mood","date","Date","toISOString","method","body","JSON","stringify","prev","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","onClick","value","onChange","e","target","placeholder","length","entry","split","_c","$RefreshReg$"],"sources":["C:/vardha/Menstrual/frontend/src/pages/MoodTracker.js"],"sourcesContent":["/*import React, { useState } from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport { Chart, registerables } from 'chart.js';\r\nimport \"../styles/MoodTracker.css\";\r\n\r\n// Register all Chart.js components\r\nChart.register(...registerables);\r\n\r\nfunction MoodTracker() {\r\n  const [moodData, setMoodData] = useState([]);\r\n  const [mood, setMood] = useState(\"\");\r\n\r\n  // Handle mood selection\r\n  const handleMoodSubmit = () => {\r\n    const newMoodData = [...moodData, { mood, date: new Date().toLocaleDateString() }];\r\n    setMoodData(newMoodData);\r\n    setMood(\"\");\r\n  };\r\n\r\n  // Prepare data for graph\r\n  const chartData = {\r\n    labels: moodData.map(entry => entry.date),\r\n    datasets: [\r\n      {\r\n        label: \"Mood Trends\",\r\n        data: moodData.map(entry => (entry.mood === \"Happy\" ? 1 : entry.mood === \"Sad\" ? -1 : 0)),\r\n        backgroundColor: [\"#ff4d6d\"],\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div className=\"mood-container\">\r\n      <h2>Mood Tracker</h2>\r\n      <select value={mood} onChange={(e) => setMood(e.target.value)}>\r\n        <option value=\"\">Select Mood</option>\r\n        <option value=\"Happy\">üòä Happy</option>\r\n        <option value=\"Sad\">üò¢ Sad</option>\r\n        <option value=\"Stressed\">üòñ Stressed</option>\r\n        <option value=\"Energetic\">‚ö° Energetic</option>\r\n      </select>\r\n      <button onClick={handleMoodSubmit}>Log Mood</button>\r\n      <Bar data={chartData} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MoodTracker;\r\n*/\r\n\r\n/*\r\nimport { useState } from \"react\";\r\n\r\nconst moods = [\"üòä\", \"üò¢\", \"üò°\", \"üò¥\", \"üòÅ\"];\r\n\r\nexport default function MoodTracker() {\r\n  const [selectedMood, setSelectedMood] = useState(null);\r\n\r\n  return (\r\n    <div>\r\n      <h3>How do you feel today?</h3>\r\n      <div>\r\n        {moods.map((mood, index) => (\r\n          <button key={index} onClick={() => setSelectedMood(mood)}>\r\n            {mood}\r\n          </button>\r\n        ))}\r\n      </div>\r\n      {selectedMood && <p>You selected: {selectedMood}</p>}\r\n    </div>\r\n  );\r\n}\r\n*/\r\n\r\n/*import { useState, useEffect } from \"react\";\r\nimport axios from \"axios\"; \r\n\r\nconst moods = [\"üòä\", \"üò¢\", \"üò°\", \"üò¥\", \"üòÅ\"];\r\nconst userId = \"123456\"; // Replace with actual user ID from authentication\r\n\r\nexport default function MoodTracker() {\r\n  const [selectedMood, setSelectedMood] = useState(null);\r\n  const [moodHistory, setMoodHistory] = useState([]);\r\n\r\n  // Fetch mood history from MongoDB\r\n  useEffect(() => {\r\n    axios.get(`http://localhost:5000/moods/${userId}/history`)\r\n      .then((response) => setMoodHistory(response.data))\r\n      .catch((error) => console.error(\"Error fetching mood history:\", error));\r\n  }, []);\r\n\r\n  // Save selected mood in MongoDB\r\n  const handleMoodSelect = async (mood) => {\r\n    setSelectedMood(mood);\r\n    try {\r\n      await axios.post(\"http://localhost:5000/moods/add\", { userId, mood });\r\n      setMoodHistory([...moodHistory, { date: new Date().toISOString(), mood }].slice(-7)); // Update UI\r\n    } catch (error) {\r\n      console.error(\"Error saving mood:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3>How do you feel today?</h3>\r\n      <div>\r\n        {moods.map((mood, index) => (\r\n          <button key={index} onClick={() => handleMoodSelect(mood)}>\r\n            {mood}\r\n          </button>\r\n        ))}\r\n      </div>\r\n      {selectedMood && <p>Today's Mood: {selectedMood}</p>}\r\n\r\n      <h3>Mood History (Last 7 Days):</h3>\r\n      <ul>\r\n        {moodHistory.map((entry, index) => (\r\n          <li key={index}>\r\n            {new Date(entry.date).toDateString()}: {entry.mood}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n*/\r\n/*\r\nimport { useState } from \"react\";\r\n\r\nconst moods = [\"üòä\", \"üò¢\", \"üò°\", \"üò¥\", \"üòÅ\"];\r\n\r\nexport default function MoodTracker() {\r\n  const [selectedMood, setSelectedMood] = useState(null);\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const logMood = async (mood) => {\r\n    const date = new Date().toISOString(); // Convert to a proper date format\r\n\r\n    try {\r\n      const response = await fetch(\"http://localhost:3000/moods/log\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`, // Send auth token if required\r\n        },\r\n        body: JSON.stringify({ mood, date }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        setMessage(\"Mood logged successfully!\");\r\n      } else {\r\n        setMessage(data.message || \"Failed to log mood.\");\r\n      }\r\n    } catch (error) {\r\n      setMessage(\"Error logging mood.\");\r\n    }\r\n\r\n    setSelectedMood(mood);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3>How do you feel today?</h3>\r\n      <div>\r\n        {moods.map((mood, index) => (\r\n          <button key={index} onClick={() => logMood(mood)}>\r\n            {mood}\r\n          </button>\r\n        ))}\r\n      </div>\r\n      {selectedMood && <p>You selected: {selectedMood}</p>}\r\n      {message && <p>{message}</p>}\r\n    </div>\r\n  );\r\n}\r\n*/\r\nimport { useState, useEffect } from \"react\";\r\nimport \",./styles/MoodTracker.css\"; // Importing the CSS file\r\n\r\nconst moods = [\r\n  { emoji: \"üòä\", label: \"Happy\" },\r\n  { emoji: \"üò¢\", label: \"Sad\" },\r\n  { emoji: \"üò°\", label: \"Angry\" },\r\n  { emoji: \"üò¥\", label: \"Tired\" },\r\n  { emoji: \"üòü\", label: \"Anxious\" }\r\n];\r\n\r\nconst moodQuotes = {\r\n  Happy: \"Keep smiling! Life is beautiful. üåû\",\r\n  Sad: \"It's okay to feel sad. Better days are ahead. üåà\",\r\n  Angry: \"Take a deep breath. Calmness is power. üåø\",\r\n  Tired: \"Rest is important. Recharge and go again! üí§\",\r\n  Anxious: \"You are stronger than you think. Take it one step at a time. üíô\"\r\n};\r\n\r\nexport default function MoodTracker() {\r\n  const [selectedMood, setSelectedMood] = useState(null);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [quote, setQuote] = useState(\"\");\r\n  const [journal, setJournal] = useState(\"\");\r\n  const [moodHistory, setMoodHistory] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchMoodHistory();\r\n  }, []);\r\n\r\n  const fetchMoodHistory = async () => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:3000/moods/history\", {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`\r\n        }\r\n      });\r\n      const data = await response.json();\r\n      if (response.ok) {\r\n        setMoodHistory(data);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching mood history:\", error);\r\n    }\r\n  };\r\n\r\n  const logMood = async (mood) => {\r\n    const date = new Date().toISOString();\r\n\r\n    try {\r\n      const response = await fetch(\"http://localhost:3000/moods/log\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`\r\n        },\r\n        body: JSON.stringify({ mood, date, journal })\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        setMessage(\"Mood logged successfully!\");\r\n        setMoodHistory((prev) => [data.mood, ...prev]);\r\n      } else {\r\n        setMessage(data.message || \"Failed to log mood.\");\r\n      }\r\n    } catch (error) {\r\n      setMessage(\"Error logging mood.\");\r\n    }\r\n\r\n    setSelectedMood(mood);\r\n    setQuote(moodQuotes[mood]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"mood-container\">\r\n      <h3>How do you feel today?</h3>\r\n      <div className=\"mood-buttons\">\r\n        {moods.map((mood, index) => (\r\n          <button\r\n            key={index}\r\n            onClick={() => logMood(mood.label)}\r\n            className={`mood-button ${selectedMood === mood.label ? \"selected\" : \"\"}`}\r\n          >\r\n            {mood.emoji}\r\n          </button>\r\n        ))}\r\n      </div>\r\n\r\n      {selectedMood && (\r\n        <div className=\"mood-info\">\r\n          <p>You selected: <strong>{selectedMood}</strong></p>\r\n          <p className=\"mood-quote\">‚ú® {quote}</p>\r\n          <textarea\r\n            value={journal}\r\n            onChange={(e) => setJournal(e.target.value)}\r\n            placeholder=\"Write something about your day...\"\r\n            className=\"journal-input\"\r\n          />\r\n          <br />\r\n          <button onClick={() => logMood(selectedMood)} className=\"save-button\">\r\n            Save Mood & Journal\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n      {message && <p className=\"message\">{message}</p>}\r\n\r\n      <h4 className=\"history-title\">Your Mood History (Last 7 Days)</h4>\r\n      <ul className=\"mood-history\">\r\n        {moodHistory.length > 0 ? (\r\n          moodHistory.map((entry, index) => (\r\n            <li key={index} className=\"history-item\">\r\n              {entry.date.split(\"T\")[0]} - {entry.mood}\r\n            </li>\r\n          ))\r\n        ) : (\r\n          <p>No mood logs found.</p>\r\n        )}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}