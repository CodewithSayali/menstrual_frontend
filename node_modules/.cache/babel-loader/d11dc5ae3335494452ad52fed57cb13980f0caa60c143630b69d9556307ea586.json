{"ast":null,"code":"var _jsxFileName = \"C:\\\\vardha\\\\Menstrual\\\\frontend\\\\src\\\\pages\\\\Reminders.js\",\n  _s = $RefreshSig$();\n/*import React, { useEffect, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport \"../styles/Reminders.css\";\r\n\r\nconst socket = io(\"http://localhost:3000\"); // ✅ Connect to backend WebSocket\r\n\r\nfunction Reminders() {\r\n  const [reminders, setReminders] = useState([]);\r\n  const [newReminder, setNewReminder] = useState({ date: \"\", time: \"\", note: \"\" });\r\n  const [notifications, setNotifications] = useState([]); // ✅ Store real-time notifications\r\n\r\n  useEffect(() => {\r\n    // ✅ Listen for Reminder Notifications\r\n    socket.on(\"reminderNotification\", (data) => {\r\n      setNotifications((prev) => [...prev, data.message]);\r\n    });\r\n\r\n    return () => {\r\n      socket.off(\"reminderNotification\");\r\n    };\r\n  }, []);*/\n/*\r\n  // ✅ Fetch Reminders from Backend\r\n  const fetchReminders = async () => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:3000/api/reminders\");\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setReminders(data);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"❌ Error fetching reminders:\", error);\r\n    }\r\n  };\r\n*/\n/*\r\nconst fetchReminders = async () => {\r\n  const userId = localStorage.getItem(\"userId\");\r\n\r\n  try {\r\n    const response = await fetch(`http://localhost:3000/api/reminders/${userId}`);\r\n    if (response.ok) {\r\n      const data = await response.json();\r\n      setReminders(data);\r\n    }\r\n  } catch (error) {\r\n    console.error(\"❌ Error fetching reminders:\", error);\r\n  }\r\n};\r\n\r\n  useEffect(() => {\r\n    fetchReminders(); // ✅ Fetch reminders on load\r\n  }, []);\r\n\r\n  const handleInputChange = (e) => {\r\n    setNewReminder({ ...newReminder, [e.target.name]: e.target.value });\r\n  };*/\n/*\r\n  const addReminder = async () => {\r\n    if (newReminder.date && newReminder.time && newReminder.note) {\r\n      const dateTime = `${newReminder.date}T${newReminder.time}:00`;\r\n\r\n      const response = await fetch(\"http://localhost:3000/api/reminders/add\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ dateTime, note: newReminder.note }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        alert(\"✅ Reminder added successfully!\");\r\n        setNewReminder({ date: \"\", time: \"\", note: \"\" });\r\n        fetchReminders(); // ✅ Update reminders list\r\n      }\r\n    }\r\n  };\r\n*/\n/*\r\nconst addReminder = async () => {\r\n  if (newReminder.date && newReminder.time && newReminder.note) {\r\n    const dateTime = `${newReminder.date}T${newReminder.time}:00`;\r\n\r\n    try {\r\n      const response = await fetch(\"http://localhost:3000/api/reminders/add\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ dateTime, note: newReminder.note }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      console.log(\"🚀 Server Response:\", data); // ✅ Log Response for Debugging\r\n\r\n      if (response.ok) {\r\n        alert(\"✅ Reminder added successfully!\");\r\n        setNewReminder({ date: \"\", time: \"\", note: \"\" });\r\n        fetchReminders(); // ✅ Update reminders list\r\n      } else {\r\n        alert(\"❌ Failed to add reminder! Check backend logs.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"❌ Error adding reminder:\", error);\r\n      alert(\"❌ Could not connect to the server.\");\r\n    }\r\n  } else {\r\n    alert(\"⚠️ Please fill in all fields!\");\r\n  }\r\n};\r\n*/\n/*\r\nconst addReminder = async () => {\r\n  const userId = localStorage.getItem(\"userId\"); // Or get it from global state\r\n\r\n  if (newReminder.date && newReminder.time && newReminder.note) {\r\n    const dateTime = `${newReminder.date}T${newReminder.time}:00`;\r\n\r\n    try {\r\n      const response = await fetch(\"http://localhost:3000/api/reminders/add\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ dateTime, note: newReminder.note, userId }), // Include userId\r\n      });\r\n\r\n      //const data = await response.json();\r\n      const data = await response.json();\r\n      console.log(\"🚀 Server Response:\", data); // Keeps the log for future debugging\r\n\r\n      if (response.ok) {\r\n        alert(\"✅ Reminder added successfully!\");\r\n        setNewReminder({ date: \"\", time: \"\", note: \"\" });\r\n        fetchReminders(); // Update reminders list\r\n      } else {\r\n        alert(\"❌ Failed to add reminder!\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"❌ Error adding reminder:\", error);\r\n    }\r\n  } else {\r\n    alert(\"⚠️ Please fill in all fields!\");\r\n  }\r\n};\r\n\r\nconst deleteReminder = async (id) => {\r\n  const userId = localStorage.getItem(\"userId\");\r\n\r\n  if (!window.confirm(\"Are you sure you want to delete this reminder?\")) return;\r\n\r\n  try {\r\n    const response = await fetch(`http://localhost:3000/api/reminders/delete/${userId}/${id}`, {\r\n      method: \"DELETE\",\r\n    });\r\n\r\n    const data = await response.json();\r\n    if (response.ok) {\r\n      alert(\"✅ Reminder deleted successfully!\");\r\n      fetchReminders(); // Refresh the list\r\n    } else {\r\n      alert(`❌ Failed to delete reminder! Server says: ${data.message}`);\r\n    }\r\n  } catch (error) {\r\n    console.error(\"❌ Error deleting reminder:\", error);\r\n  }\r\n};\r\n*/\n\n/*\r\n// ✅ Delete Reminder Function\r\nconst deleteReminder = async (id) => {\r\n  console.log(\"🛠️ Attempting to delete reminder with ID:\", id);\r\n\r\n  if (!window.confirm(\"Are you sure you want to delete this reminder?\")) return;\r\n\r\n  try {\r\n    const response = await fetch(`http://localhost:3000/api/reminders/delete/${id}`, {\r\n      method: \"DELETE\",\r\n    });\r\n\r\n    const data = await response.json();\r\n    console.log(\"🚀 Server Response:\", data);\r\n    alert(data.message); // ✅ Show success message\r\n\r\n    */\n//if (response.ok) {\n//setReminders(reminders.filter((reminder) => reminder._id !== id)); // ✅ Update UI\n//}\n//} catch (error) {\n//console.error(\"❌ Error deleting reminder:\", error);\n//alert(\"❌ Failed to delete reminder!\");\n//}\n/*\r\nif (response.ok) {\r\n  alert(\"✅ Reminder deleted successfully!\");\r\n  fetchReminders(); // ✅ Refresh list after deletion\r\n} else {\r\n  alert(`❌ Failed to delete reminder! Server says: ${data.message}`);\r\n}\r\n} catch (error) {\r\nconsole.error(\"❌ Error deleting reminder:\", error);\r\nalert(\"❌ Could not connect to the server.\");\r\n}\r\n};*/\n/*\r\n  return (\r\n    <div className=\"reminders-container\">\r\n      <h2>📅 Reminders</h2>\r\n\r\n      <div className=\"reminder-inputs\">\r\n        <input type=\"date\" name=\"date\" value={newReminder.date} onChange={handleInputChange} />\r\n        <input type=\"time\" name=\"time\" value={newReminder.time} onChange={handleInputChange} />\r\n        <input type=\"text\" name=\"note\" placeholder=\"Reminder note...\" value={newReminder.note} onChange={handleInputChange} />\r\n        <button onClick={addReminder}>➕ Add Reminder</button>\r\n      </div>\r\n\r\n      <h3>📌 Scheduled Reminders:</h3>\r\n      <ul>\r\n        {reminders.length > 0 ? (\r\n          reminders.map((reminder, index) => (\r\n            <li key={index}>\r\n              {new Date(reminder.dateTime).toLocaleString()} - {reminder.note}\r\n              <button onClick={() => deleteReminder(reminder._id)}>❌ Delete</button> {/* ✅ Delete Button \r\n            </li>\r\n          ))\r\n        ) : (\r\n          <p>No reminders set.</p>\r\n        )}\r\n      </ul>\r\n\r\n      <h3>🔔 Notifications:</h3>\r\n      <ul>\r\n        {notifications.length > 0 ? (\r\n          notifications.map((note, index) => (\r\n            <li key={index} className=\"notification\">{note}</li>\r\n          ))\r\n        ) : (\r\n          <p>No notifications yet.</p>\r\n        )}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Reminders;\r\n*/\n\n/*import React, { useEffect, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport \"../styles/Reminders.css\";\r\n\r\nconst socket = io(\"http://localhost:5000\"); // Connect to backend WebSocket\r\n\r\nfunction Reminders() {\r\n  const [reminders, setReminders] = useState([]);\r\n  const [newReminder, setNewReminder] = useState({ date: \"\", time: \"\", note: \"\" });\r\n  const [notifications, setNotifications] = useState([]); // Store real-time notifications\r\n\r\n  useEffect(() => {\r\n    // ✅ Listen for Reminder Notifications\r\n    socket.on(\"reminderNotification\", (data) => {\r\n      setNotifications((prev) => [...prev, data.message]);\r\n    });\r\n\r\n    return () => {\r\n      socket.off(\"reminderNotification\");\r\n    };\r\n  }, []);\r\n\r\n  const handleInputChange = (e) => {\r\n    setNewReminder({ ...newReminder, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const addReminder = async () => {\r\n    if (newReminder.date && newReminder.time && newReminder.note) {\r\n      const dateTime = `${newReminder.date}T${newReminder.time}:00`;\r\n\r\n      const response = await fetch(\"http://localhost:3000/api/reminders/add\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ dateTime, note: newReminder.note }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        alert(\"✅ Reminder added successfully!\");\r\n        setNewReminder({ date: \"\", time: \"\", note: \"\" });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"reminders-container\">\r\n      <h2>📅 Reminders</h2>\r\n\r\n      <div className=\"reminder-inputs\">\r\n        <input type=\"date\" name=\"date\" value={newReminder.date} onChange={handleInputChange} />\r\n        <input type=\"time\" name=\"time\" value={newReminder.time} onChange={handleInputChange} />\r\n        <input type=\"text\" name=\"note\" placeholder=\"Reminder note...\" value={newReminder.note} onChange={handleInputChange} />\r\n        <button onClick={addReminder}>➕ Add Reminder</button>\r\n      </div>\r\n\r\n      <h3>📌 Scheduled Reminders:</h3>\r\n      <ul>\r\n        {reminders.map((reminder, index) => (\r\n          <li key={index}>{reminder.date} at {reminder.time} - {reminder.note}</li>\r\n        ))}\r\n      </ul>\r\n\r\n      <h3>🔔 Notifications:</h3>\r\n      <ul>\r\n        {notifications.map((note, index) => (\r\n          <li key={index} className=\"notification\">{note}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Reminders;\r\n*/\n\n/*import React, { useState, useEffect } from \"react\";\r\nimport \"../styles/Reminders.css\";\r\n\r\nfunction Reminders() {\r\n  const [reminders, setReminders] = useState([]);\r\n  const [newReminder, setNewReminder] = useState({ date: \"\", time: \"\", note: \"\" });\r\n\r\n  // Load reminders from localStorage when component mounts\r\n  useEffect(() => {\r\n    const savedReminders = JSON.parse(localStorage.getItem(\"reminders\")) || [];\r\n    setReminders(savedReminders);\r\n  }, []);\r\n\r\n  const handleInputChange = (e) => {\r\n    setNewReminder({ ...newReminder, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const addReminder = () => {\r\n    if (newReminder.date && newReminder.time && newReminder.note) {\r\n      const newList = [...reminders, newReminder];\r\n      setReminders(newList);\r\n      localStorage.setItem(\"reminders\", JSON.stringify(newList));\r\n      setNewReminder({ date: \"\", time: \"\", note: \"\" });\r\n\r\n      showNotification(`Reminder set for ${newReminder.date} at ${newReminder.time}`);\r\n    }\r\n  };\r\n\r\n  const deleteReminder = (index) => {\r\n    const updatedReminders = reminders.filter((_, i) => i !== index);\r\n    setReminders(updatedReminders);\r\n    localStorage.setItem(\"reminders\", JSON.stringify(updatedReminders));\r\n  };\r\n\r\n  const showNotification = (message) => {\r\n    if (Notification.permission === \"granted\") {\r\n      new Notification(\"Menstrual Tracker\", { body: message });\r\n    } else if (Notification.permission !== \"denied\") {\r\n      Notification.requestPermission().then((permission) => {\r\n        if (permission === \"granted\") {\r\n          new Notification(\"Menstrual Tracker\", { body: message });\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"reminders-container\">\r\n      <h2>Reminders</h2>\r\n\r\n      <div className=\"reminder-inputs\">\r\n        <input type=\"date\" name=\"date\" value={newReminder.date} onChange={handleInputChange} />\r\n        <input type=\"time\" name=\"time\" value={newReminder.time} onChange={handleInputChange} />\r\n        <input type=\"text\" name=\"note\" placeholder=\"Reminder note...\" value={newReminder.note} onChange={handleInputChange} />\r\n        <button onClick={addReminder}>Add Reminder</button>\r\n      </div>\r\n\r\n      <h3>Scheduled Reminders:</h3>\r\n      {reminders.length === 0 ? <p>No reminders set.</p> : (\r\n        <ul>\r\n          {reminders.map((reminder, index) => (\r\n            <li key={index}>\r\n              {reminder.date} at {reminder.time} - {reminder.note} \r\n              <button onClick={() => deleteReminder(index)}>❎</button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Reminders;\r\n*/\n\n/*import React, { useState } from \"react\";\r\nimport \"../styles/Reminders.css\";\r\n\r\nfunction Reminders() {\r\n  const [reminders, setReminders] = useState([]);\r\n  const [newReminder, setNewReminder] = useState({ date: \"\", time: \"\", note: \"\" });\r\n\r\n  const handleInputChange = (e) => {\r\n    setNewReminder({ ...newReminder, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const addReminder = () => {\r\n    if (newReminder.date && newReminder.time && newReminder.note) {\r\n      const newList = [...reminders, newReminder];\r\n      setReminders(newList);\r\n      localStorage.setItem(\"reminders\", JSON.stringify(newList));\r\n      setNewReminder({ date: \"\", time: \"\", note: \"\" });\r\n      showNotification(`Reminder set for ${newReminder.date} at ${newReminder.time}`);\r\n    }\r\n  };\r\n\r\n  const deleteReminder = (index) => {\r\n    const updatedReminders = reminders.filter((_, i) => i !== index);\r\n    setReminders(updatedReminders);\r\n    localStorage.setItem(\"reminders\", JSON.stringify(updatedReminders));\r\n  };\r\n\r\n  const showNotification = (message) => {\r\n    if (Notification.permission === \"granted\") {\r\n      new Notification(\"Menstrual Tracker\", { body: message });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"reminders-container\">\r\n      <h2>Reminders</h2>\r\n\r\n      <div className=\"reminder-inputs\">\r\n        <input type=\"date\" name=\"date\" value={newReminder.date} onChange={handleInputChange} />\r\n        <input type=\"time\" name=\"time\" value={newReminder.time} onChange={handleInputChange} />\r\n        <input type=\"text\" name=\"note\" placeholder=\"Reminder note...\" value={newReminder.note} onChange={handleInputChange} />\r\n        <button onClick={addReminder}>Add Reminder</button>\r\n      </div>\r\n\r\n      <h3>Scheduled Reminders:</h3>\r\n      <ul>\r\n        {reminders.map((reminder, index) => (\r\n          <li key={index}>\r\n            {reminder.date} at {reminder.time} - {reminder.note} \r\n            <button onClick={() => deleteReminder(index)}>❌</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Reminders;\r\n*/\n\n/*\r\nimport { useState } from \"react\";\r\n\r\nexport default function Reminders() {\r\n  const [reminders, setReminders] = useState([]);\r\n  const [newReminder, setNewReminder] = useState(\"\");\r\n\r\n  const addReminder = () => {\r\n    if (newReminder.trim() !== \"\") {\r\n      setReminders([...reminders, newReminder]);\r\n      setNewReminder(\"\");\r\n    }\r\n  };\r\n\r\n  const removeReminder = (index) => {\r\n    setReminders(reminders.filter((_, i) => i !== index));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3>Reminders</h3>\r\n      <input \r\n        type=\"text\" \r\n        placeholder=\"Add a reminder...\" \r\n        value={newReminder} \r\n        onChange={(e) => setNewReminder(e.target.value)}\r\n      />\r\n      <button onClick={addReminder}>Add</button>\r\n\r\n      <ul>\r\n        {reminders.map((reminder, index) => (\r\n          <li key={index}>\r\n            {reminder} <button onClick={() => removeReminder(index)}>❌</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n*/\n\n/*\r\nimport React, { useEffect, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\nconst socket = io(\"http://localhost:3000\");\r\n\r\nfunction Reminders() {\r\n  const [reminders, setReminders] = useState([]);\r\n  const [newReminder, setNewReminder] = useState({ date: \"\", time: \"\", note: \"\" });\r\n  const [notifications, setNotifications] = useState([]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"reminderNotification\", (data) => {\r\n      setNotifications((prev) => [...prev, data.message]);\r\n    });\r\n    return () => {\r\n      socket.off(\"reminderNotification\");\r\n    };\r\n  }, []);\r\n\r\n  const fetchReminders = async () => {\r\n    const userId = localStorage.getItem(\"userId\");\r\n    try {\r\n      const response = await fetch(`http://localhost:3000/api/reminders/${userId}`);\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setReminders(data);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching reminders:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchReminders();\r\n  }, []);\r\n\r\n  const addReminder = async () => {\r\n    const userId = localStorage.getItem(\"userId\");\r\n    if (newReminder.date && newReminder.time && newReminder.note) {\r\n      const dateTime = new Date(`${newReminder.date}T${newReminder.time}`).toISOString();\r\n      try {\r\n        const response = await fetch(\"http://localhost:3000/api/reminders/add\", {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({ dateTime, note: newReminder.note, userId }),\r\n        });\r\n        const data = await response.json();\r\n        if (response.ok) {\r\n          alert(\"Reminder added successfully!\");\r\n          setNewReminder({ date: \"\", time: \"\", note: \"\" });\r\n          fetchReminders();\r\n        } else {\r\n          alert(\"Failed to add reminder! \" + data.error);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error adding reminder:\", error);\r\n      }\r\n    } else {\r\n      alert(\"Please fill in all fields!\");\r\n    }\r\n  };\r\n\r\n  const deleteReminder = async (id) => {\r\n    const userId = localStorage.getItem(\"userId\");\r\n    if (!window.confirm(\"Are you sure you want to delete this reminder?\")) return;\r\n    try {\r\n      const response = await fetch(`http://localhost:3000/api/reminders/delete/${userId}/${id}`, {\r\n        method: \"DELETE\",\r\n      });\r\n      const data = await response.json();\r\n      if (response.ok) {\r\n        alert(\"Reminder deleted!\");\r\n        fetchReminders();\r\n      } else {\r\n        alert(\"Failed to delete reminder! \" + data.message);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error deleting reminder:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Reminders</h2>\r\n      <input type=\"date\" name=\"date\" value={newReminder.date} onChange={(e) => setNewReminder({ ...newReminder, date: e.target.value })} />\r\n      <input type=\"time\" name=\"time\" value={newReminder.time} onChange={(e) => setNewReminder({ ...newReminder, time: e.target.value })} />\r\n      <input type=\"text\" name=\"note\" value={newReminder.note} placeholder=\"Reminder note\" onChange={(e) => setNewReminder({ ...newReminder, note: e.target.value })} />\r\n      <button onClick={addReminder}>Add Reminder</button>\r\n      <ul>\r\n        {reminders.map((reminder) => (\r\n          <li key={reminder._id}>{new Date(reminder.dateTime).toLocaleString()} - {reminder.note}\r\n            <button onClick={() => deleteReminder(reminder._id)}>Delete</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Reminders;\r\n*/\nimport React, { useEffect, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:3000\");\nfunction Reminders() {\n  _s();\n  const [reminders, setReminders] = useState([]);\n  const [newReminder, setNewReminder] = useState({\n    date: \"\",\n    time: \"\",\n    note: \"\"\n  });\n  // eslint-disable-next-line\n  const [notifications, setNotifications] = useState([]);\n  useEffect(() => {\n    socket.on(\"reminderNotification\", data => {\n      setNotifications(prev => [...prev, data.message]);\n    });\n    return () => {\n      socket.off(\"reminderNotification\");\n    };\n  }, []);\n  const fetchReminders = async () => {\n    const userId = localStorage.getItem(\"userId\");\n    try {\n      const response = await fetch(`http://localhost:3000/api/reminders/${userId}`);\n      if (response.ok) {\n        const data = await response.json();\n        setReminders(data);\n      }\n    } catch (error) {\n      console.error(\"Error fetching reminders:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchReminders();\n  }, []);\n  const addReminder = async () => {\n    console.log(\"Attempting to add a reminder...\");\n    const userId = localStorage.getItem(\"userId\");\n    if (newReminder.date && newReminder.time && newReminder.note) {\n      const dateTime = new Date(`${newReminder.date}T${newReminder.time}`).toISOString();\n      try {\n        const response = await fetch(\"http://localhost:3000/api/reminders/add\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            dateTime,\n            note: newReminder.note,\n            userId\n          })\n        });\n        const data = await response.json();\n        console.log(\"Response Data:\", data);\n        if (response.ok) {\n          alert(\"Reminder added successfully!\");\n          setNewReminder({\n            date: \"\",\n            time: \"\",\n            note: \"\"\n          });\n          fetchReminders();\n        } else {\n          alert(\"Failed to add reminder! \" + data.error);\n        }\n      } catch (error) {\n        console.error(\"Error adding reminder:\", error);\n      }\n    } else {\n      alert(\"Please fill in all fields!\");\n    }\n  };\n  const deleteReminder = async id => {\n    const userId = localStorage.getItem(\"userId\");\n    if (!window.confirm(\"Are you sure you want to delete this reminder?\")) return;\n    try {\n      const response = await fetch(`http://localhost:3000/api/reminders/delete/${userId}/${id}`, {\n        method: \"DELETE\"\n      });\n      const data = await response.json();\n      if (response.ok) {\n        alert(\"Reminder deleted!\");\n        fetchReminders();\n      } else {\n        alert(\"Failed to delete reminder! \" + data.message);\n      }\n    } catch (error) {\n      console.error(\"Error deleting reminder:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \" \\uD83D\\uDCC5 Reminders\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 690,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"date\",\n      name: \"date\",\n      value: newReminder.date,\n      onChange: e => setNewReminder({\n        ...newReminder,\n        date: e.target.value\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 691,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"time\",\n      name: \"time\",\n      value: newReminder.time,\n      onChange: e => setNewReminder({\n        ...newReminder,\n        time: e.target.value\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 692,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"note\",\n      value: newReminder.note,\n      placeholder: \"Reminder note\",\n      onChange: e => setNewReminder({\n        ...newReminder,\n        note: e.target.value\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 693,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addReminder,\n      children: \" \\u2795 Add Reminder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 694,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\uD83D\\uDCCC Scheduled Reminders:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 695,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: reminders.map(reminder => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [new Date(reminder.dateTime).toLocaleString(), \" - \", reminder.note, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => deleteReminder(reminder._id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 699,\n          columnNumber: 13\n        }, this)]\n      }, reminder._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 698,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 696,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 689,\n    columnNumber: 5\n  }, this);\n}\n_s(Reminders, \"/fznsoTr+T4qWcGleiLh0MeFPOY=\");\n_c = Reminders;\nexport default Reminders;\nvar _c;\n$RefreshReg$(_c, \"Reminders\");","map":{"version":3,"names":["React","useEffect","useState","io","jsxDEV","_jsxDEV","socket","Reminders","_s","reminders","setReminders","newReminder","setNewReminder","date","time","note","notifications","setNotifications","on","data","prev","message","off","fetchReminders","userId","localStorage","getItem","response","fetch","ok","json","error","console","addReminder","log","dateTime","Date","toISOString","method","headers","body","JSON","stringify","alert","deleteReminder","id","window","confirm","children","fileName","_jsxFileName","lineNumber","columnNumber","type","name","value","onChange","e","target","placeholder","onClick","map","reminder","toLocaleString","_id","_c","$RefreshReg$"],"sources":["C:/vardha/Menstrual/frontend/src/pages/Reminders.js"],"sourcesContent":["/*import React, { useEffect, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport \"../styles/Reminders.css\";\r\n\r\nconst socket = io(\"http://localhost:3000\"); // ✅ Connect to backend WebSocket\r\n\r\nfunction Reminders() {\r\n  const [reminders, setReminders] = useState([]);\r\n  const [newReminder, setNewReminder] = useState({ date: \"\", time: \"\", note: \"\" });\r\n  const [notifications, setNotifications] = useState([]); // ✅ Store real-time notifications\r\n\r\n  useEffect(() => {\r\n    // ✅ Listen for Reminder Notifications\r\n    socket.on(\"reminderNotification\", (data) => {\r\n      setNotifications((prev) => [...prev, data.message]);\r\n    });\r\n\r\n    return () => {\r\n      socket.off(\"reminderNotification\");\r\n    };\r\n  }, []);*/\r\n/*\r\n  // ✅ Fetch Reminders from Backend\r\n  const fetchReminders = async () => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:3000/api/reminders\");\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setReminders(data);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"❌ Error fetching reminders:\", error);\r\n    }\r\n  };\r\n*/\r\n/*\r\nconst fetchReminders = async () => {\r\n  const userId = localStorage.getItem(\"userId\");\r\n\r\n  try {\r\n    const response = await fetch(`http://localhost:3000/api/reminders/${userId}`);\r\n    if (response.ok) {\r\n      const data = await response.json();\r\n      setReminders(data);\r\n    }\r\n  } catch (error) {\r\n    console.error(\"❌ Error fetching reminders:\", error);\r\n  }\r\n};\r\n\r\n  useEffect(() => {\r\n    fetchReminders(); // ✅ Fetch reminders on load\r\n  }, []);\r\n\r\n  const handleInputChange = (e) => {\r\n    setNewReminder({ ...newReminder, [e.target.name]: e.target.value });\r\n  };*/\r\n/*\r\n  const addReminder = async () => {\r\n    if (newReminder.date && newReminder.time && newReminder.note) {\r\n      const dateTime = `${newReminder.date}T${newReminder.time}:00`;\r\n\r\n      const response = await fetch(\"http://localhost:3000/api/reminders/add\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ dateTime, note: newReminder.note }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        alert(\"✅ Reminder added successfully!\");\r\n        setNewReminder({ date: \"\", time: \"\", note: \"\" });\r\n        fetchReminders(); // ✅ Update reminders list\r\n      }\r\n    }\r\n  };\r\n*/\r\n/*\r\nconst addReminder = async () => {\r\n  if (newReminder.date && newReminder.time && newReminder.note) {\r\n    const dateTime = `${newReminder.date}T${newReminder.time}:00`;\r\n\r\n    try {\r\n      const response = await fetch(\"http://localhost:3000/api/reminders/add\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ dateTime, note: newReminder.note }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      console.log(\"🚀 Server Response:\", data); // ✅ Log Response for Debugging\r\n\r\n      if (response.ok) {\r\n        alert(\"✅ Reminder added successfully!\");\r\n        setNewReminder({ date: \"\", time: \"\", note: \"\" });\r\n        fetchReminders(); // ✅ Update reminders list\r\n      } else {\r\n        alert(\"❌ Failed to add reminder! Check backend logs.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"❌ Error adding reminder:\", error);\r\n      alert(\"❌ Could not connect to the server.\");\r\n    }\r\n  } else {\r\n    alert(\"⚠️ Please fill in all fields!\");\r\n  }\r\n};\r\n*/\r\n/*\r\nconst addReminder = async () => {\r\n  const userId = localStorage.getItem(\"userId\"); // Or get it from global state\r\n\r\n  if (newReminder.date && newReminder.time && newReminder.note) {\r\n    const dateTime = `${newReminder.date}T${newReminder.time}:00`;\r\n\r\n    try {\r\n      const response = await fetch(\"http://localhost:3000/api/reminders/add\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ dateTime, note: newReminder.note, userId }), // Include userId\r\n      });\r\n\r\n      //const data = await response.json();\r\n      const data = await response.json();\r\n      console.log(\"🚀 Server Response:\", data); // Keeps the log for future debugging\r\n\r\n      if (response.ok) {\r\n        alert(\"✅ Reminder added successfully!\");\r\n        setNewReminder({ date: \"\", time: \"\", note: \"\" });\r\n        fetchReminders(); // Update reminders list\r\n      } else {\r\n        alert(\"❌ Failed to add reminder!\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"❌ Error adding reminder:\", error);\r\n    }\r\n  } else {\r\n    alert(\"⚠️ Please fill in all fields!\");\r\n  }\r\n};\r\n\r\nconst deleteReminder = async (id) => {\r\n  const userId = localStorage.getItem(\"userId\");\r\n\r\n  if (!window.confirm(\"Are you sure you want to delete this reminder?\")) return;\r\n\r\n  try {\r\n    const response = await fetch(`http://localhost:3000/api/reminders/delete/${userId}/${id}`, {\r\n      method: \"DELETE\",\r\n    });\r\n\r\n    const data = await response.json();\r\n    if (response.ok) {\r\n      alert(\"✅ Reminder deleted successfully!\");\r\n      fetchReminders(); // Refresh the list\r\n    } else {\r\n      alert(`❌ Failed to delete reminder! Server says: ${data.message}`);\r\n    }\r\n  } catch (error) {\r\n    console.error(\"❌ Error deleting reminder:\", error);\r\n  }\r\n};\r\n*/\r\n\r\n/*\r\n// ✅ Delete Reminder Function\r\nconst deleteReminder = async (id) => {\r\n  console.log(\"🛠️ Attempting to delete reminder with ID:\", id);\r\n\r\n  if (!window.confirm(\"Are you sure you want to delete this reminder?\")) return;\r\n\r\n  try {\r\n    const response = await fetch(`http://localhost:3000/api/reminders/delete/${id}`, {\r\n      method: \"DELETE\",\r\n    });\r\n\r\n    const data = await response.json();\r\n    console.log(\"🚀 Server Response:\", data);\r\n    alert(data.message); // ✅ Show success message\r\n\r\n    */\r\n    //if (response.ok) {\r\n      //setReminders(reminders.filter((reminder) => reminder._id !== id)); // ✅ Update UI\r\n    //}\r\n  //} catch (error) {\r\n    //console.error(\"❌ Error deleting reminder:\", error);\r\n    //alert(\"❌ Failed to delete reminder!\");\r\n  //}\r\n  /*\r\n  if (response.ok) {\r\n    alert(\"✅ Reminder deleted successfully!\");\r\n    fetchReminders(); // ✅ Refresh list after deletion\r\n  } else {\r\n    alert(`❌ Failed to delete reminder! Server says: ${data.message}`);\r\n  }\r\n} catch (error) {\r\n  console.error(\"❌ Error deleting reminder:\", error);\r\n  alert(\"❌ Could not connect to the server.\");\r\n}\r\n\r\n};*/\r\n/*\r\n  return (\r\n    <div className=\"reminders-container\">\r\n      <h2>📅 Reminders</h2>\r\n\r\n      <div className=\"reminder-inputs\">\r\n        <input type=\"date\" name=\"date\" value={newReminder.date} onChange={handleInputChange} />\r\n        <input type=\"time\" name=\"time\" value={newReminder.time} onChange={handleInputChange} />\r\n        <input type=\"text\" name=\"note\" placeholder=\"Reminder note...\" value={newReminder.note} onChange={handleInputChange} />\r\n        <button onClick={addReminder}>➕ Add Reminder</button>\r\n      </div>\r\n\r\n      <h3>📌 Scheduled Reminders:</h3>\r\n      <ul>\r\n        {reminders.length > 0 ? (\r\n          reminders.map((reminder, index) => (\r\n            <li key={index}>\r\n              {new Date(reminder.dateTime).toLocaleString()} - {reminder.note}\r\n              <button onClick={() => deleteReminder(reminder._id)}>❌ Delete</button> {/* ✅ Delete Button \r\n            </li>\r\n          ))\r\n        ) : (\r\n          <p>No reminders set.</p>\r\n        )}\r\n      </ul>\r\n\r\n      <h3>🔔 Notifications:</h3>\r\n      <ul>\r\n        {notifications.length > 0 ? (\r\n          notifications.map((note, index) => (\r\n            <li key={index} className=\"notification\">{note}</li>\r\n          ))\r\n        ) : (\r\n          <p>No notifications yet.</p>\r\n        )}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Reminders;\r\n*/\r\n\r\n\r\n\r\n/*import React, { useEffect, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport \"../styles/Reminders.css\";\r\n\r\nconst socket = io(\"http://localhost:5000\"); // Connect to backend WebSocket\r\n\r\nfunction Reminders() {\r\n  const [reminders, setReminders] = useState([]);\r\n  const [newReminder, setNewReminder] = useState({ date: \"\", time: \"\", note: \"\" });\r\n  const [notifications, setNotifications] = useState([]); // Store real-time notifications\r\n\r\n  useEffect(() => {\r\n    // ✅ Listen for Reminder Notifications\r\n    socket.on(\"reminderNotification\", (data) => {\r\n      setNotifications((prev) => [...prev, data.message]);\r\n    });\r\n\r\n    return () => {\r\n      socket.off(\"reminderNotification\");\r\n    };\r\n  }, []);\r\n\r\n  const handleInputChange = (e) => {\r\n    setNewReminder({ ...newReminder, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const addReminder = async () => {\r\n    if (newReminder.date && newReminder.time && newReminder.note) {\r\n      const dateTime = `${newReminder.date}T${newReminder.time}:00`;\r\n\r\n      const response = await fetch(\"http://localhost:3000/api/reminders/add\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ dateTime, note: newReminder.note }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        alert(\"✅ Reminder added successfully!\");\r\n        setNewReminder({ date: \"\", time: \"\", note: \"\" });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"reminders-container\">\r\n      <h2>📅 Reminders</h2>\r\n\r\n      <div className=\"reminder-inputs\">\r\n        <input type=\"date\" name=\"date\" value={newReminder.date} onChange={handleInputChange} />\r\n        <input type=\"time\" name=\"time\" value={newReminder.time} onChange={handleInputChange} />\r\n        <input type=\"text\" name=\"note\" placeholder=\"Reminder note...\" value={newReminder.note} onChange={handleInputChange} />\r\n        <button onClick={addReminder}>➕ Add Reminder</button>\r\n      </div>\r\n\r\n      <h3>📌 Scheduled Reminders:</h3>\r\n      <ul>\r\n        {reminders.map((reminder, index) => (\r\n          <li key={index}>{reminder.date} at {reminder.time} - {reminder.note}</li>\r\n        ))}\r\n      </ul>\r\n\r\n      <h3>🔔 Notifications:</h3>\r\n      <ul>\r\n        {notifications.map((note, index) => (\r\n          <li key={index} className=\"notification\">{note}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Reminders;\r\n*/\r\n\r\n\r\n/*import React, { useState, useEffect } from \"react\";\r\nimport \"../styles/Reminders.css\";\r\n\r\nfunction Reminders() {\r\n  const [reminders, setReminders] = useState([]);\r\n  const [newReminder, setNewReminder] = useState({ date: \"\", time: \"\", note: \"\" });\r\n\r\n  // Load reminders from localStorage when component mounts\r\n  useEffect(() => {\r\n    const savedReminders = JSON.parse(localStorage.getItem(\"reminders\")) || [];\r\n    setReminders(savedReminders);\r\n  }, []);\r\n\r\n  const handleInputChange = (e) => {\r\n    setNewReminder({ ...newReminder, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const addReminder = () => {\r\n    if (newReminder.date && newReminder.time && newReminder.note) {\r\n      const newList = [...reminders, newReminder];\r\n      setReminders(newList);\r\n      localStorage.setItem(\"reminders\", JSON.stringify(newList));\r\n      setNewReminder({ date: \"\", time: \"\", note: \"\" });\r\n\r\n      showNotification(`Reminder set for ${newReminder.date} at ${newReminder.time}`);\r\n    }\r\n  };\r\n\r\n  const deleteReminder = (index) => {\r\n    const updatedReminders = reminders.filter((_, i) => i !== index);\r\n    setReminders(updatedReminders);\r\n    localStorage.setItem(\"reminders\", JSON.stringify(updatedReminders));\r\n  };\r\n\r\n  const showNotification = (message) => {\r\n    if (Notification.permission === \"granted\") {\r\n      new Notification(\"Menstrual Tracker\", { body: message });\r\n    } else if (Notification.permission !== \"denied\") {\r\n      Notification.requestPermission().then((permission) => {\r\n        if (permission === \"granted\") {\r\n          new Notification(\"Menstrual Tracker\", { body: message });\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"reminders-container\">\r\n      <h2>Reminders</h2>\r\n\r\n      <div className=\"reminder-inputs\">\r\n        <input type=\"date\" name=\"date\" value={newReminder.date} onChange={handleInputChange} />\r\n        <input type=\"time\" name=\"time\" value={newReminder.time} onChange={handleInputChange} />\r\n        <input type=\"text\" name=\"note\" placeholder=\"Reminder note...\" value={newReminder.note} onChange={handleInputChange} />\r\n        <button onClick={addReminder}>Add Reminder</button>\r\n      </div>\r\n\r\n      <h3>Scheduled Reminders:</h3>\r\n      {reminders.length === 0 ? <p>No reminders set.</p> : (\r\n        <ul>\r\n          {reminders.map((reminder, index) => (\r\n            <li key={index}>\r\n              {reminder.date} at {reminder.time} - {reminder.note} \r\n              <button onClick={() => deleteReminder(index)}>❎</button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Reminders;\r\n*/\r\n\r\n\r\n\r\n\r\n/*import React, { useState } from \"react\";\r\nimport \"../styles/Reminders.css\";\r\n\r\nfunction Reminders() {\r\n  const [reminders, setReminders] = useState([]);\r\n  const [newReminder, setNewReminder] = useState({ date: \"\", time: \"\", note: \"\" });\r\n\r\n  const handleInputChange = (e) => {\r\n    setNewReminder({ ...newReminder, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const addReminder = () => {\r\n    if (newReminder.date && newReminder.time && newReminder.note) {\r\n      const newList = [...reminders, newReminder];\r\n      setReminders(newList);\r\n      localStorage.setItem(\"reminders\", JSON.stringify(newList));\r\n      setNewReminder({ date: \"\", time: \"\", note: \"\" });\r\n      showNotification(`Reminder set for ${newReminder.date} at ${newReminder.time}`);\r\n    }\r\n  };\r\n\r\n  const deleteReminder = (index) => {\r\n    const updatedReminders = reminders.filter((_, i) => i !== index);\r\n    setReminders(updatedReminders);\r\n    localStorage.setItem(\"reminders\", JSON.stringify(updatedReminders));\r\n  };\r\n\r\n  const showNotification = (message) => {\r\n    if (Notification.permission === \"granted\") {\r\n      new Notification(\"Menstrual Tracker\", { body: message });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"reminders-container\">\r\n      <h2>Reminders</h2>\r\n\r\n      <div className=\"reminder-inputs\">\r\n        <input type=\"date\" name=\"date\" value={newReminder.date} onChange={handleInputChange} />\r\n        <input type=\"time\" name=\"time\" value={newReminder.time} onChange={handleInputChange} />\r\n        <input type=\"text\" name=\"note\" placeholder=\"Reminder note...\" value={newReminder.note} onChange={handleInputChange} />\r\n        <button onClick={addReminder}>Add Reminder</button>\r\n      </div>\r\n\r\n      <h3>Scheduled Reminders:</h3>\r\n      <ul>\r\n        {reminders.map((reminder, index) => (\r\n          <li key={index}>\r\n            {reminder.date} at {reminder.time} - {reminder.note} \r\n            <button onClick={() => deleteReminder(index)}>❌</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Reminders;\r\n*/\r\n\r\n\r\n\r\n\r\n/*\r\nimport { useState } from \"react\";\r\n\r\nexport default function Reminders() {\r\n  const [reminders, setReminders] = useState([]);\r\n  const [newReminder, setNewReminder] = useState(\"\");\r\n\r\n  const addReminder = () => {\r\n    if (newReminder.trim() !== \"\") {\r\n      setReminders([...reminders, newReminder]);\r\n      setNewReminder(\"\");\r\n    }\r\n  };\r\n\r\n  const removeReminder = (index) => {\r\n    setReminders(reminders.filter((_, i) => i !== index));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3>Reminders</h3>\r\n      <input \r\n        type=\"text\" \r\n        placeholder=\"Add a reminder...\" \r\n        value={newReminder} \r\n        onChange={(e) => setNewReminder(e.target.value)}\r\n      />\r\n      <button onClick={addReminder}>Add</button>\r\n\r\n      <ul>\r\n        {reminders.map((reminder, index) => (\r\n          <li key={index}>\r\n            {reminder} <button onClick={() => removeReminder(index)}>❌</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n*/\r\n\r\n/*\r\nimport React, { useEffect, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\nconst socket = io(\"http://localhost:3000\");\r\n\r\nfunction Reminders() {\r\n  const [reminders, setReminders] = useState([]);\r\n  const [newReminder, setNewReminder] = useState({ date: \"\", time: \"\", note: \"\" });\r\n  const [notifications, setNotifications] = useState([]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"reminderNotification\", (data) => {\r\n      setNotifications((prev) => [...prev, data.message]);\r\n    });\r\n    return () => {\r\n      socket.off(\"reminderNotification\");\r\n    };\r\n  }, []);\r\n\r\n  const fetchReminders = async () => {\r\n    const userId = localStorage.getItem(\"userId\");\r\n    try {\r\n      const response = await fetch(`http://localhost:3000/api/reminders/${userId}`);\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setReminders(data);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching reminders:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchReminders();\r\n  }, []);\r\n\r\n  const addReminder = async () => {\r\n    const userId = localStorage.getItem(\"userId\");\r\n    if (newReminder.date && newReminder.time && newReminder.note) {\r\n      const dateTime = new Date(`${newReminder.date}T${newReminder.time}`).toISOString();\r\n      try {\r\n        const response = await fetch(\"http://localhost:3000/api/reminders/add\", {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({ dateTime, note: newReminder.note, userId }),\r\n        });\r\n        const data = await response.json();\r\n        if (response.ok) {\r\n          alert(\"Reminder added successfully!\");\r\n          setNewReminder({ date: \"\", time: \"\", note: \"\" });\r\n          fetchReminders();\r\n        } else {\r\n          alert(\"Failed to add reminder! \" + data.error);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error adding reminder:\", error);\r\n      }\r\n    } else {\r\n      alert(\"Please fill in all fields!\");\r\n    }\r\n  };\r\n\r\n  const deleteReminder = async (id) => {\r\n    const userId = localStorage.getItem(\"userId\");\r\n    if (!window.confirm(\"Are you sure you want to delete this reminder?\")) return;\r\n    try {\r\n      const response = await fetch(`http://localhost:3000/api/reminders/delete/${userId}/${id}`, {\r\n        method: \"DELETE\",\r\n      });\r\n      const data = await response.json();\r\n      if (response.ok) {\r\n        alert(\"Reminder deleted!\");\r\n        fetchReminders();\r\n      } else {\r\n        alert(\"Failed to delete reminder! \" + data.message);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error deleting reminder:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Reminders</h2>\r\n      <input type=\"date\" name=\"date\" value={newReminder.date} onChange={(e) => setNewReminder({ ...newReminder, date: e.target.value })} />\r\n      <input type=\"time\" name=\"time\" value={newReminder.time} onChange={(e) => setNewReminder({ ...newReminder, time: e.target.value })} />\r\n      <input type=\"text\" name=\"note\" value={newReminder.note} placeholder=\"Reminder note\" onChange={(e) => setNewReminder({ ...newReminder, note: e.target.value })} />\r\n      <button onClick={addReminder}>Add Reminder</button>\r\n      <ul>\r\n        {reminders.map((reminder) => (\r\n          <li key={reminder._id}>{new Date(reminder.dateTime).toLocaleString()} - {reminder.note}\r\n            <button onClick={() => deleteReminder(reminder._id)}>Delete</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Reminders;\r\n*/\r\nimport React, { useEffect, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\nconst socket = io(\"http://localhost:3000\");\r\n\r\nfunction Reminders() {\r\n  const [reminders, setReminders] = useState([]);\r\n  const [newReminder, setNewReminder] = useState({ date: \"\", time: \"\", note: \"\" });\r\n  // eslint-disable-next-line\r\n  const [notifications, setNotifications] = useState([]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"reminderNotification\", (data) => {\r\n      setNotifications((prev) => [...prev, data.message]);\r\n    });\r\n    return () => {\r\n      socket.off(\"reminderNotification\");\r\n    };\r\n  }, []);\r\n\r\n  const fetchReminders = async () => {\r\n    const userId = localStorage.getItem(\"userId\");\r\n    try {\r\n      const response = await fetch(`http://localhost:3000/api/reminders/${userId}`);\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setReminders(data);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching reminders:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchReminders();\r\n  }, []);\r\n\r\n  const addReminder = async () => {\r\n    console.log(\"Attempting to add a reminder...\");\r\n    const userId = localStorage.getItem(\"userId\");\r\n    if (newReminder.date && newReminder.time && newReminder.note) {\r\n      const dateTime = new Date(`${newReminder.date}T${newReminder.time}`).toISOString();\r\n      try {\r\n        const response = await fetch(\"http://localhost:3000/api/reminders/add\", {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({ dateTime, note: newReminder.note, userId }),\r\n        });\r\n        const data = await response.json();\r\n        console.log(\"Response Data:\", data);\r\n\r\n        if (response.ok) {\r\n          alert(\"Reminder added successfully!\");\r\n          setNewReminder({ date: \"\", time: \"\", note: \"\" });\r\n          fetchReminders();\r\n        } else {\r\n          alert(\"Failed to add reminder! \" + data.error);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error adding reminder:\", error);\r\n      }\r\n    } else {\r\n      alert(\"Please fill in all fields!\");\r\n    }\r\n  };\r\n\r\n  const deleteReminder = async (id) => {\r\n    const userId = localStorage.getItem(\"userId\");\r\n    if (!window.confirm(\"Are you sure you want to delete this reminder?\")) return;\r\n    try {\r\n      const response = await fetch(`http://localhost:3000/api/reminders/delete/${userId}/${id}`, {\r\n        method: \"DELETE\",\r\n      });\r\n      const data = await response.json();\r\n      if (response.ok) {\r\n        alert(\"Reminder deleted!\");\r\n        fetchReminders();\r\n      } else {\r\n        alert(\"Failed to delete reminder! \" + data.message);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error deleting reminder:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3> 📅 Reminders</h3>\r\n      <input type=\"date\" name=\"date\" value={newReminder.date} onChange={(e) => setNewReminder({ ...newReminder, date: e.target.value })} />\r\n      <input type=\"time\" name=\"time\" value={newReminder.time} onChange={(e) => setNewReminder({ ...newReminder, time: e.target.value })} />\r\n      <input type=\"text\" name=\"note\" value={newReminder.note} placeholder=\"Reminder note\" onChange={(e) => setNewReminder({ ...newReminder, note: e.target.value })} />\r\n      <button onClick={addReminder}> ➕ Add Reminder</button>\r\n      <h3>📌 Scheduled Reminders:</h3>\r\n      <ul>\r\n        {reminders.map((reminder) => (\r\n          <li key={reminder._id}>{new Date(reminder.dateTime).toLocaleString()} - {reminder.note}\r\n            <button onClick={() => deleteReminder(reminder._id)}>Delete</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default Reminders;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}