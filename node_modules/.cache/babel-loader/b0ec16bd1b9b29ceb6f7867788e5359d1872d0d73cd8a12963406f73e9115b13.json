{"ast":null,"code":"var _jsxFileName = \"C:\\\\vardha\\\\Menstrual\\\\frontend\\\\src\\\\pages\\\\Tracker.js\",\n  _s = $RefreshSig$();\n/*import React, { useState, useEffect } from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport \"react-calendar/dist/Calendar.css\";\r\nimport \"../styles/Tracker.css\";\r\nimport Reports from \"./Reports\";\r\nimport { saveAs } from \"file-saver\"; \r\n\r\nfunction Tracker() {\r\n  const [date, setDate] = useState(new Date());\r\n  const [periodDates, setPeriodDates] = useState([]);\r\n\r\n  // Load stored period dates\r\n  useEffect(() => {\r\n    const savedDates = JSON.parse(localStorage.getItem(\"periodDates\"));\r\n    if (savedDates) {\r\n      setPeriodDates(savedDates);\r\n    }\r\n  }, []);\r\n\r\n  // Handle date selection\r\n  const handleDateChange = (selectedDate) => {\r\n    const formattedDate = selectedDate.toDateString();\r\n    if (!periodDates.includes(formattedDate)) {\r\n      const newDates = [...periodDates, formattedDate].sort((a, b) => new Date(a) - new Date(b));\r\n      setPeriodDates(newDates);\r\n      localStorage.setItem(\"periodDates\", JSON.stringify(newDates));\r\n      setDate(selectedDate);\r\n      showNotification(\"Period date logged!\");\r\n    }\r\n  };\r\n\r\n  // Delete period log\r\n  const deleteLog = (dateToDelete) => {\r\n    const updatedDates = periodDates.filter((d) => d !== dateToDelete);\r\n    setPeriodDates(updatedDates);\r\n    localStorage.setItem(\"periodDates\", JSON.stringify(updatedDates));\r\n  };\r\n\r\n  // Predict next period (assuming 28-day cycle)\r\n  const predictNextPeriod = () => {\r\n    if (periodDates.length > 0) {\r\n      let lastPeriod = new Date(periodDates[periodDates.length - 1]);\r\n      let nextPeriod = new Date(lastPeriod);\r\n      nextPeriod.setDate(nextPeriod.getDate() + 28);\r\n      return nextPeriod.toDateString();\r\n    }\r\n    return \"Not enough data to predict.\";\r\n  };\r\n\r\n  // Calculate cycle lengths\r\n  const cycleLengths = periodDates.map((date, i) => \r\n    i > 0 ? (new Date(date) - new Date(periodDates[i - 1])) / (1000 * 60 * 60 * 24) : null\r\n  ).filter(length => length !== null);\r\n\r\n  // Calculate average cycle length\r\n  const avgCycleLength = cycleLengths.length > 0 ? \r\n    (cycleLengths.reduce((a, b) => a + b, 0) / cycleLengths.length).toFixed(1) \r\n    : \"Not enough data\";\r\n\r\n  // Show browser notification\r\n  const showNotification = (message) => {\r\n    if (Notification.permission === \"granted\") {\r\n      new Notification(\"Menstrual Tracker\", { body: message });\r\n    }\r\n  };\r\n\r\n  // Export cycle data as CSV\r\n  const exportData = () => {\r\n    const csvContent = \"data:text/csv;charset=utf-8,Date\\n\" + periodDates.join(\"\\n\");\r\n    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\r\n    saveAs(blob, \"cycle_history.csv\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"tracker-container\">\r\n      <h2>Menstrual Cycle Tracker</h2>\r\n      <Calendar onClickDay={handleDateChange} value={date} />\r\n      \r\n      <h3>Logged Period Dates:</h3>\r\n      <ul>\r\n        {periodDates.map((d, index) => (\r\n          <li key={index}>\r\n            {d} \r\n            <button onClick={() => deleteLog(d)}>‚ùé</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      <h3>Next Predicted Period: {predictNextPeriod()}</h3>\r\n      <h3>Last Cycle Length: {cycleLengths.length > 0 ? cycleLengths[cycleLengths.length - 1] + \" days\" : \"N/A\"}</h3>\r\n      <h3>Average Cycle Length: {avgCycleLength}</h3> \r\n      \r\n      <button onClick={exportData}>üìÇ Export Cycle Data</button>\r\n\r\n      \r\n      <Reports periodDates={periodDates} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tracker;\r\n*/\n\nimport React, { useState, useEffect } from \"react\";\nimport Calendar from \"react-calendar\";\nimport \"react-calendar/dist/Calendar.css\";\nimport \"../styles/Tracker.css\";\nimport Reports from \"./Reports\";\nimport { saveAs } from \"file-saver\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Tracker() {\n  _s();\n  const [date, setDate] = useState(new Date());\n  const [periodDates, setPeriodDates] = useState([]);\n  const [cycleLength, setCycleLength] = useState(28); // Default cycle length\n\n  // Load stored period dates and cycle length\n  useEffect(() => {\n    const savedDates = JSON.parse(localStorage.getItem(\"periodDates\"));\n    if (savedDates) setPeriodDates(savedDates);\n    const savedCycleLength = localStorage.getItem(\"cycleLength\");\n    if (savedCycleLength) setCycleLength(Number(savedCycleLength));\n  }, []);\n\n  // Handle date selection\n  const handleDateChange = selectedDate => {\n    const formattedDate = selectedDate.toDateString();\n    if (!periodDates.includes(formattedDate)) {\n      const newDates = [...periodDates, formattedDate].sort((a, b) => new Date(a) - new Date(b));\n      setPeriodDates(newDates);\n      localStorage.setItem(\"periodDates\", JSON.stringify(newDates));\n      setDate(selectedDate);\n      showNotification(\"Period date logged!\");\n    }\n  };\n\n  // Delete period log\n  const deleteLog = dateToDelete => {\n    const updatedDates = periodDates.filter(d => d !== dateToDelete);\n    setPeriodDates(updatedDates);\n    localStorage.setItem(\"periodDates\", JSON.stringify(updatedDates));\n  };\n\n  // Calculate cycle lengths\n  const cycleLengths = periodDates.map((date, i) => i > 0 ? (new Date(date) - new Date(periodDates[i - 1])) / (1000 * 60 * 60 * 24) : null).filter(length => length !== null);\n\n  // Calculate average cycle length\n  const avgCycleLength = cycleLengths.length > 0 ? Math.round(cycleLengths.reduce((a, b) => a + b, 0) / cycleLengths.length) : 28; // Default to 28 if not enough data\n\n  // Predict next period based on user's actual cycle length or selected cycle length\n  const predictNextPeriod = () => {\n    if (periodDates.length > 0) {\n      let lastPeriod = new Date(periodDates[periodDates.length - 1]);\n      let nextPeriod = new Date(lastPeriod);\n      nextPeriod.setDate(nextPeriod.getDate() + cycleLength); // Use user-defined cycle length\n      return nextPeriod.toDateString();\n    }\n    return \"Not enough data to predict.\";\n  };\n\n  // Show browser notification\n  const showNotification = message => {\n    if (Notification.permission === \"granted\") {\n      new Notification(\"Menstrual Tracker\", {\n        body: message\n      });\n    }\n  };\n\n  // Handle cycle length change\n  const handleCycleLengthChange = e => {\n    const value = Number(e.target.value);\n    if (value > 15 && value < 50) {\n      // Ensure valid range\n      setCycleLength(value);\n      localStorage.setItem(\"cycleLength\", value);\n    }\n  };\n\n  // Export cycle data as CSV\n  const exportData = () => {\n    const csvContent = \"data:text/csv;charset=utf-8,Date\\n\" + periodDates.join(\"\\n\");\n    const blob = new Blob([csvContent], {\n      type: \"text/csv;charset=utf-8;\"\n    });\n    saveAs(blob, \"cycle_history.csv\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tracker-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Menstrual Cycle Tracker\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Calendar, {\n      onClickDay: handleDateChange,\n      value: date\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Logged Period Dates:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: periodDates.map((d, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [d, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => deleteLog(d),\n          children: \"\\u274E\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this), \"//Allow user to manually set cycle length\", /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Set Your Cycle Length: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: cycleLength,\n      onChange: handleCycleLengthChange,\n      min: \"15\",\n      max: \"50\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Next Predicted Period: \", predictNextPeriod()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Last Cycle Length: \", cycleLengths.length > 0 ? cycleLengths[cycleLengths.length - 1] + \" days\" : \"N/A\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Average Cycle Length: \", avgCycleLength, \" days\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: exportData,\n      children: \"\\uD83D\\uDCC2 Export Cycle Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this), \"// Integrating Reports\", /*#__PURE__*/_jsxDEV(Reports, {\n      periodDates: periodDates\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 5\n  }, this);\n}\n_s(Tracker, \"G6QeW112QejavHggx0IE29BsilU=\");\n_c = Tracker;\nexport default Tracker;\n\n/*\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport \"react-calendar/dist/Calendar.css\";\r\nimport \"../styles/Tracker.css\";\r\nimport Reports from \"./Reports\";\r\nimport { saveAs } from \"file-saver\";\r\n\r\nfunction Tracker() {\r\n  // eslint-disable-next-line no-unused-vars\r\n  const [date, setDate] = useState(new Date());\r\n  const [periodRecords, setPeriodRecords] = useState([]);\r\n  const [cycleLength, setCycleLength] = useState(28); // Default cycle length\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  // Load stored period dates and cycle length\r\n  useEffect(() => {\r\n    const fetchPeriodRecords = async () => {\r\n      try {\r\n        const response = await fetch(\"http://localhost:3000/api/cycles/history\", {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n          },\r\n        });\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          setPeriodRecords(data);\r\n          if (data.length > 0) {\r\n            setCycleLength(data[0].cycleLength);\r\n          }\r\n        } else {\r\n          setMessage(\"Failed to fetch period records.\");\r\n        }\r\n      } catch (error) {\r\n        setMessage(\"Error fetching period records.\");\r\n      }\r\n    };\r\n\r\n    fetchPeriodRecords();\r\n  }, []);\r\n\r\n  // Handle date selection\r\n  const handleDateChange = async (selectedDate) => {\r\n    const formattedDate = selectedDate.toISOString().split(\"T\")[0];\r\n    if (!periodRecords.some((record) => record.startDate === formattedDate)) {\r\n      try {\r\n        const response = await fetch(\"http://localhost:3000/api/cycles/log\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n          },\r\n          body: JSON.stringify({ startDate: formattedDate, cycleLength }),\r\n        });\r\n\r\n        if (response.ok) {\r\n          const newRecord = await response.json();\r\n          setPeriodRecords((prevRecords) =>\r\n            [...prevRecords, newRecord].sort(\r\n              (a, b) => new Date(a.startDate) - new Date(b.startDate)\r\n            )\r\n          );\r\n          setMessage(\"Period date logged!\");\r\n        } else {\r\n          setMessage(\"Failed to log period date.\");\r\n        }\r\n      } catch (error) {\r\n        setMessage(\"Error logging period date.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  // Delete period log\r\n  const deleteLog = async (recordId) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:3000/api/cycles/${recordId}`, {\r\n        method: \"DELETE\",\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      });\r\n\r\n      if (response.ok) {\r\n        setPeriodRecords((prevRecords) =>\r\n          prevRecords.filter((record) => record._id !== recordId)\r\n        );\r\n        setMessage(\"Period record deleted.\");\r\n      } else {\r\n        setMessage(\"Failed to delete period record.\");\r\n      }\r\n    } catch (error) {\r\n      setMessage(\"Error deleting period record.\");\r\n    }\r\n  };\r\n\r\n  // Calculate cycle lengths\r\n  const cycleLengths = periodRecords\r\n    .map((record, i) =>\r\n      i > 0\r\n        ? (new Date(record.startDate) -\r\n            new Date(periodRecords[i - 1].startDate)) /\r\n          (1000 * 60 * 60 * 24)\r\n        : null\r\n    )\r\n    .filter((length) => length !== null);\r\n\r\n  const avgCycleLength =\r\n    cycleLengths.length > 0\r\n      ? Math.round(cycleLengths.reduce((a, b) => a + b, 0) / cycleLengths.length)\r\n      : 28;\r\n\r\n  const predictNextPeriod = () => {\r\n    if (periodRecords.length > 0) {\r\n      let lastPeriod = new Date(periodRecords[periodRecords.length - 1].startDate);\r\n      let nextPeriod = new Date(lastPeriod);\r\n      nextPeriod.setDate(nextPeriod.getDate() + cycleLength);\r\n      return nextPeriod.toDateString();\r\n    }\r\n    return \"Not enough data to predict.\";\r\n  };\r\n\r\n  // Show browser notification\r\n  // eslint-disable-next-line no-unused-vars\r\n  const showNotification = (message) => {\r\n    if (Notification.permission === \"granted\") {\r\n      new Notification(\"Menstrual Tracker\", { body: message });\r\n    } else if (Notification.permission !== \"denied\") {\r\n      Notification.requestPermission().then((permission) => {\r\n        if (permission === \"granted\") {\r\n          new Notification(\"Menstrual Tracker\", { body: message });\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  // Handle cycle length change\r\n  const handleCycleLengthChange = async (e) => {\r\n    const value = Number(e.target.value);\r\n    if (value > 15 && value < 50) {\r\n      setCycleLength(value);\r\n      try {\r\n        const response = await fetch(\r\n          \"http://localhost:3000/api/cycles/update-cycle-length\",\r\n          {\r\n            method: \"PUT\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n            },\r\n            body: JSON.stringify({ cycleLength: value }),\r\n          }\r\n        );\r\n\r\n        if (response.ok) {\r\n          setMessage(\"Cycle length updated.\");\r\n        } else {\r\n          setMessage(\"Failed to update cycle length.\");\r\n        }\r\n      } catch (error) {\r\n        setMessage(\"Error updating cycle length.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  // Export cycle data as CSV\r\n  const exportData = () => {\r\n    const periodDates = periodRecords.map((record) => record.startDate);\r\n    const csvContent =\r\n      \"data:text/csv;charset=utf-8,Date\\n\" + periodDates.join(\"\\n\");\r\n    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\r\n    saveAs(blob, \"cycle_history.csv\");\r\n  };\r\n\r\n  // Define periodDates for use in Reports component\r\n  const periodDates = periodRecords.map((record) => record.startDate);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Menstrual Health Tracker</h1>\r\n      <div>\r\n        {/* Calendar Component \r\n        <Calendar onChange={handleDateChange} value={date} />\r\n      </div>\r\n      <div>\r\n        {/* Cycle Length Input \r\n        <label>\r\n          Cycle Length:\r\n          <input\r\n            type=\"number\"\r\n            value={cycleLength}\r\n            onChange={handleCycleLengthChange}\r\n            min=\"15\"\r\n            max=\"50\"\r\n          />\r\n        </label>\r\n      </div>\r\n      <div>\r\n        <h2>Period Records</h2>\r\n        <ul>\r\n          {periodRecords.map((record) => (\r\n            <li key={record._id}>\r\n              {record.startDate}\r\n              <button onClick={() => deleteLog(record._id)}>Delete</button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n      <div>\r\n\r\n      \r\n\r\n        {/* Additional Features \r\n        <h3>Next Predicted Period: {predictNextPeriod()}</h3>\r\n        <h3>\r\n          Last Cycle Length:{\" \"}\r\n          {cycleLengths.length > 0\r\n            ? cycleLengths[cycleLengths.length - 1] + \" days\"\r\n            : \"N/A\"}\r\n        </h3>\r\n        <h3>Average Cycle Length: {avgCycleLength} days</h3>\r\n        <button onClick={exportData}>üìÇ Export Cycle Data</button>\r\n      </div>\r\n      {/* Reports Component \r\n      <Reports periodDates={periodDates} />\r\n      {/* Message Display \r\n      {message && <p>{message}</p>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tracker;\r\n*/\nvar _c;\n$RefreshReg$(_c, \"Tracker\");","map":{"version":3,"names":["React","useState","useEffect","Calendar","Reports","saveAs","jsxDEV","_jsxDEV","Tracker","_s","date","setDate","Date","periodDates","setPeriodDates","cycleLength","setCycleLength","savedDates","JSON","parse","localStorage","getItem","savedCycleLength","Number","handleDateChange","selectedDate","formattedDate","toDateString","includes","newDates","sort","a","b","setItem","stringify","showNotification","deleteLog","dateToDelete","updatedDates","filter","d","cycleLengths","map","i","length","avgCycleLength","Math","round","reduce","predictNextPeriod","lastPeriod","nextPeriod","getDate","message","Notification","permission","body","handleCycleLengthChange","e","value","target","exportData","csvContent","join","blob","Blob","type","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClickDay","index","onClick","onChange","min","max","_c","$RefreshReg$"],"sources":["C:/vardha/Menstrual/frontend/src/pages/Tracker.js"],"sourcesContent":["/*import React, { useState, useEffect } from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport \"react-calendar/dist/Calendar.css\";\r\nimport \"../styles/Tracker.css\";\r\nimport Reports from \"./Reports\";\r\nimport { saveAs } from \"file-saver\"; \r\n\r\nfunction Tracker() {\r\n  const [date, setDate] = useState(new Date());\r\n  const [periodDates, setPeriodDates] = useState([]);\r\n\r\n  // Load stored period dates\r\n  useEffect(() => {\r\n    const savedDates = JSON.parse(localStorage.getItem(\"periodDates\"));\r\n    if (savedDates) {\r\n      setPeriodDates(savedDates);\r\n    }\r\n  }, []);\r\n\r\n  // Handle date selection\r\n  const handleDateChange = (selectedDate) => {\r\n    const formattedDate = selectedDate.toDateString();\r\n    if (!periodDates.includes(formattedDate)) {\r\n      const newDates = [...periodDates, formattedDate].sort((a, b) => new Date(a) - new Date(b));\r\n      setPeriodDates(newDates);\r\n      localStorage.setItem(\"periodDates\", JSON.stringify(newDates));\r\n      setDate(selectedDate);\r\n      showNotification(\"Period date logged!\");\r\n    }\r\n  };\r\n\r\n  // Delete period log\r\n  const deleteLog = (dateToDelete) => {\r\n    const updatedDates = periodDates.filter((d) => d !== dateToDelete);\r\n    setPeriodDates(updatedDates);\r\n    localStorage.setItem(\"periodDates\", JSON.stringify(updatedDates));\r\n  };\r\n\r\n  // Predict next period (assuming 28-day cycle)\r\n  const predictNextPeriod = () => {\r\n    if (periodDates.length > 0) {\r\n      let lastPeriod = new Date(periodDates[periodDates.length - 1]);\r\n      let nextPeriod = new Date(lastPeriod);\r\n      nextPeriod.setDate(nextPeriod.getDate() + 28);\r\n      return nextPeriod.toDateString();\r\n    }\r\n    return \"Not enough data to predict.\";\r\n  };\r\n\r\n  // Calculate cycle lengths\r\n  const cycleLengths = periodDates.map((date, i) => \r\n    i > 0 ? (new Date(date) - new Date(periodDates[i - 1])) / (1000 * 60 * 60 * 24) : null\r\n  ).filter(length => length !== null);\r\n\r\n  // Calculate average cycle length\r\n  const avgCycleLength = cycleLengths.length > 0 ? \r\n    (cycleLengths.reduce((a, b) => a + b, 0) / cycleLengths.length).toFixed(1) \r\n    : \"Not enough data\";\r\n\r\n  // Show browser notification\r\n  const showNotification = (message) => {\r\n    if (Notification.permission === \"granted\") {\r\n      new Notification(\"Menstrual Tracker\", { body: message });\r\n    }\r\n  };\r\n\r\n  // Export cycle data as CSV\r\n  const exportData = () => {\r\n    const csvContent = \"data:text/csv;charset=utf-8,Date\\n\" + periodDates.join(\"\\n\");\r\n    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\r\n    saveAs(blob, \"cycle_history.csv\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"tracker-container\">\r\n      <h2>Menstrual Cycle Tracker</h2>\r\n      <Calendar onClickDay={handleDateChange} value={date} />\r\n      \r\n      <h3>Logged Period Dates:</h3>\r\n      <ul>\r\n        {periodDates.map((d, index) => (\r\n          <li key={index}>\r\n            {d} \r\n            <button onClick={() => deleteLog(d)}>‚ùé</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      <h3>Next Predicted Period: {predictNextPeriod()}</h3>\r\n      <h3>Last Cycle Length: {cycleLengths.length > 0 ? cycleLengths[cycleLengths.length - 1] + \" days\" : \"N/A\"}</h3>\r\n      <h3>Average Cycle Length: {avgCycleLength}</h3> \r\n      \r\n      <button onClick={exportData}>üìÇ Export Cycle Data</button>\r\n\r\n      \r\n      <Reports periodDates={periodDates} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tracker;\r\n*/\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport \"react-calendar/dist/Calendar.css\";\r\nimport \"../styles/Tracker.css\";\r\nimport Reports from \"./Reports\";\r\nimport { saveAs } from \"file-saver\"; \r\n\r\nfunction Tracker() {\r\n  const [date, setDate] = useState(new Date());\r\n  const [periodDates, setPeriodDates] = useState([]);\r\n  const [cycleLength, setCycleLength] = useState(28); // Default cycle length\r\n\r\n  // Load stored period dates and cycle length\r\n  useEffect(() => {\r\n    const savedDates = JSON.parse(localStorage.getItem(\"periodDates\"));\r\n    if (savedDates) setPeriodDates(savedDates);\r\n\r\n    const savedCycleLength = localStorage.getItem(\"cycleLength\");\r\n    if (savedCycleLength) setCycleLength(Number(savedCycleLength));\r\n  }, []);\r\n\r\n  // Handle date selection\r\n  const handleDateChange = (selectedDate) => {\r\n    const formattedDate = selectedDate.toDateString();\r\n    if (!periodDates.includes(formattedDate)) {\r\n      const newDates = [...periodDates, formattedDate].sort((a, b) => new Date(a) - new Date(b));\r\n      setPeriodDates(newDates);\r\n      localStorage.setItem(\"periodDates\", JSON.stringify(newDates));\r\n      setDate(selectedDate);\r\n      showNotification(\"Period date logged!\");\r\n    }\r\n  };\r\n\r\n  // Delete period log\r\n  const deleteLog = (dateToDelete) => {\r\n    const updatedDates = periodDates.filter((d) => d !== dateToDelete);\r\n    setPeriodDates(updatedDates);\r\n    localStorage.setItem(\"periodDates\", JSON.stringify(updatedDates));\r\n  };\r\n\r\n  // Calculate cycle lengths\r\n  const cycleLengths = periodDates.map((date, i) => \r\n    i > 0 ? (new Date(date) - new Date(periodDates[i - 1])) / (1000 * 60 * 60 * 24) : null\r\n  ).filter(length => length !== null);\r\n\r\n  // Calculate average cycle length\r\n  const avgCycleLength = cycleLengths.length > 0 ? \r\n    Math.round(cycleLengths.reduce((a, b) => a + b, 0) / cycleLengths.length) \r\n    : 28; // Default to 28 if not enough data\r\n\r\n  // Predict next period based on user's actual cycle length or selected cycle length\r\n  const predictNextPeriod = () => {\r\n    if (periodDates.length > 0) {\r\n      let lastPeriod = new Date(periodDates[periodDates.length - 1]);\r\n      let nextPeriod = new Date(lastPeriod);\r\n      nextPeriod.setDate(nextPeriod.getDate() + cycleLength); // Use user-defined cycle length\r\n      return nextPeriod.toDateString();\r\n    }\r\n    return \"Not enough data to predict.\";\r\n  };\r\n\r\n  // Show browser notification\r\n  const showNotification = (message) => {\r\n    if (Notification.permission === \"granted\") {\r\n      new Notification(\"Menstrual Tracker\", { body: message });\r\n    }\r\n  };\r\n\r\n  // Handle cycle length change\r\n  const handleCycleLengthChange = (e) => {\r\n    const value = Number(e.target.value);\r\n    if (value > 15 && value < 50) { // Ensure valid range\r\n      setCycleLength(value);\r\n      localStorage.setItem(\"cycleLength\", value);\r\n    }\r\n  };\r\n\r\n  // Export cycle data as CSV\r\n  const exportData = () => {\r\n    const csvContent = \"data:text/csv;charset=utf-8,Date\\n\" + periodDates.join(\"\\n\");\r\n    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\r\n    saveAs(blob, \"cycle_history.csv\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"tracker-container\">\r\n      <h2>Menstrual Cycle Tracker</h2>\r\n      <Calendar onClickDay={handleDateChange} value={date} />\r\n      \r\n      <h3>Logged Period Dates:</h3>\r\n      <ul>\r\n        {periodDates.map((d, index) => (\r\n          <li key={index}>\r\n            {d} \r\n            <button onClick={() => deleteLog(d)}>‚ùé</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n\r\n       //Allow user to manually set cycle length \r\n      <label>Set Your Cycle Length: </label>\r\n      <input \r\n        type=\"number\" \r\n        value={cycleLength} \r\n        onChange={handleCycleLengthChange} \r\n        min=\"15\" \r\n        max=\"50\"\r\n      />\r\n\r\n      \r\n\r\n      <h3>Next Predicted Period: {predictNextPeriod()}</h3>\r\n      <h3>Last Cycle Length: {cycleLengths.length > 0 ? cycleLengths[cycleLengths.length - 1] + \" days\" : \"N/A\"}</h3>\r\n      <h3>Average Cycle Length: {avgCycleLength} days</h3>\r\n\r\n      \r\n\r\n      <button onClick={exportData}>üìÇ Export Cycle Data</button>\r\n\r\n      // Integrating Reports \r\n      <Reports periodDates={periodDates} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tracker;\r\n\r\n\r\n\r\n/*\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport \"react-calendar/dist/Calendar.css\";\r\nimport \"../styles/Tracker.css\";\r\nimport Reports from \"./Reports\";\r\nimport { saveAs } from \"file-saver\";\r\n\r\nfunction Tracker() {\r\n  // eslint-disable-next-line no-unused-vars\r\n  const [date, setDate] = useState(new Date());\r\n  const [periodRecords, setPeriodRecords] = useState([]);\r\n  const [cycleLength, setCycleLength] = useState(28); // Default cycle length\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  // Load stored period dates and cycle length\r\n  useEffect(() => {\r\n    const fetchPeriodRecords = async () => {\r\n      try {\r\n        const response = await fetch(\"http://localhost:3000/api/cycles/history\", {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n          },\r\n        });\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          setPeriodRecords(data);\r\n          if (data.length > 0) {\r\n            setCycleLength(data[0].cycleLength);\r\n          }\r\n        } else {\r\n          setMessage(\"Failed to fetch period records.\");\r\n        }\r\n      } catch (error) {\r\n        setMessage(\"Error fetching period records.\");\r\n      }\r\n    };\r\n\r\n    fetchPeriodRecords();\r\n  }, []);\r\n\r\n  // Handle date selection\r\n  const handleDateChange = async (selectedDate) => {\r\n    const formattedDate = selectedDate.toISOString().split(\"T\")[0];\r\n    if (!periodRecords.some((record) => record.startDate === formattedDate)) {\r\n      try {\r\n        const response = await fetch(\"http://localhost:3000/api/cycles/log\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n          },\r\n          body: JSON.stringify({ startDate: formattedDate, cycleLength }),\r\n        });\r\n\r\n        if (response.ok) {\r\n          const newRecord = await response.json();\r\n          setPeriodRecords((prevRecords) =>\r\n            [...prevRecords, newRecord].sort(\r\n              (a, b) => new Date(a.startDate) - new Date(b.startDate)\r\n            )\r\n          );\r\n          setMessage(\"Period date logged!\");\r\n        } else {\r\n          setMessage(\"Failed to log period date.\");\r\n        }\r\n      } catch (error) {\r\n        setMessage(\"Error logging period date.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  // Delete period log\r\n  const deleteLog = async (recordId) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:3000/api/cycles/${recordId}`, {\r\n        method: \"DELETE\",\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      });\r\n\r\n      if (response.ok) {\r\n        setPeriodRecords((prevRecords) =>\r\n          prevRecords.filter((record) => record._id !== recordId)\r\n        );\r\n        setMessage(\"Period record deleted.\");\r\n      } else {\r\n        setMessage(\"Failed to delete period record.\");\r\n      }\r\n    } catch (error) {\r\n      setMessage(\"Error deleting period record.\");\r\n    }\r\n  };\r\n\r\n  // Calculate cycle lengths\r\n  const cycleLengths = periodRecords\r\n    .map((record, i) =>\r\n      i > 0\r\n        ? (new Date(record.startDate) -\r\n            new Date(periodRecords[i - 1].startDate)) /\r\n          (1000 * 60 * 60 * 24)\r\n        : null\r\n    )\r\n    .filter((length) => length !== null);\r\n\r\n  const avgCycleLength =\r\n    cycleLengths.length > 0\r\n      ? Math.round(cycleLengths.reduce((a, b) => a + b, 0) / cycleLengths.length)\r\n      : 28;\r\n\r\n  const predictNextPeriod = () => {\r\n    if (periodRecords.length > 0) {\r\n      let lastPeriod = new Date(periodRecords[periodRecords.length - 1].startDate);\r\n      let nextPeriod = new Date(lastPeriod);\r\n      nextPeriod.setDate(nextPeriod.getDate() + cycleLength);\r\n      return nextPeriod.toDateString();\r\n    }\r\n    return \"Not enough data to predict.\";\r\n  };\r\n\r\n  // Show browser notification\r\n  // eslint-disable-next-line no-unused-vars\r\n  const showNotification = (message) => {\r\n    if (Notification.permission === \"granted\") {\r\n      new Notification(\"Menstrual Tracker\", { body: message });\r\n    } else if (Notification.permission !== \"denied\") {\r\n      Notification.requestPermission().then((permission) => {\r\n        if (permission === \"granted\") {\r\n          new Notification(\"Menstrual Tracker\", { body: message });\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  // Handle cycle length change\r\n  const handleCycleLengthChange = async (e) => {\r\n    const value = Number(e.target.value);\r\n    if (value > 15 && value < 50) {\r\n      setCycleLength(value);\r\n      try {\r\n        const response = await fetch(\r\n          \"http://localhost:3000/api/cycles/update-cycle-length\",\r\n          {\r\n            method: \"PUT\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n            },\r\n            body: JSON.stringify({ cycleLength: value }),\r\n          }\r\n        );\r\n\r\n        if (response.ok) {\r\n          setMessage(\"Cycle length updated.\");\r\n        } else {\r\n          setMessage(\"Failed to update cycle length.\");\r\n        }\r\n      } catch (error) {\r\n        setMessage(\"Error updating cycle length.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  // Export cycle data as CSV\r\n  const exportData = () => {\r\n    const periodDates = periodRecords.map((record) => record.startDate);\r\n    const csvContent =\r\n      \"data:text/csv;charset=utf-8,Date\\n\" + periodDates.join(\"\\n\");\r\n    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\r\n    saveAs(blob, \"cycle_history.csv\");\r\n  };\r\n\r\n  // Define periodDates for use in Reports component\r\n  const periodDates = periodRecords.map((record) => record.startDate);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Menstrual Health Tracker</h1>\r\n      <div>\r\n        {/* Calendar Component \r\n        <Calendar onChange={handleDateChange} value={date} />\r\n      </div>\r\n      <div>\r\n        {/* Cycle Length Input \r\n        <label>\r\n          Cycle Length:\r\n          <input\r\n            type=\"number\"\r\n            value={cycleLength}\r\n            onChange={handleCycleLengthChange}\r\n            min=\"15\"\r\n            max=\"50\"\r\n          />\r\n        </label>\r\n      </div>\r\n      <div>\r\n        <h2>Period Records</h2>\r\n        <ul>\r\n          {periodRecords.map((record) => (\r\n            <li key={record._id}>\r\n              {record.startDate}\r\n              <button onClick={() => deleteLog(record._id)}>Delete</button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n      <div>\r\n\r\n      \r\n\r\n        {/* Additional Features \r\n        <h3>Next Predicted Period: {predictNextPeriod()}</h3>\r\n        <h3>\r\n          Last Cycle Length:{\" \"}\r\n          {cycleLengths.length > 0\r\n            ? cycleLengths[cycleLengths.length - 1] + \" days\"\r\n            : \"N/A\"}\r\n        </h3>\r\n        <h3>Average Cycle Length: {avgCycleLength} days</h3>\r\n        <button onClick={exportData}>üìÇ Export Cycle Data</button>\r\n      </div>\r\n      {/* Reports Component \r\n      <Reports periodDates={periodDates} />\r\n      {/* Message Display \r\n      {message && <p>{message}</p>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tracker;\r\n*/"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}