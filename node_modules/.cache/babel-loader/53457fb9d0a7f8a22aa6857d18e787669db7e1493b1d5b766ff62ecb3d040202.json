{"ast":null,"code":"var _jsxFileName = \"C:\\\\vardha\\\\Menstrual\\\\frontend\\\\src\\\\pages\\\\MoodTracker.js\",\n  _s = $RefreshSig$();\n/*import React, { useState } from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport { Chart, registerables } from 'chart.js';\r\nimport \"../styles/MoodTracker.css\";\r\n\r\n// Register all Chart.js components\r\nChart.register(...registerables);\r\n\r\nfunction MoodTracker() {\r\n  const [moodData, setMoodData] = useState([]);\r\n  const [mood, setMood] = useState(\"\");\r\n\r\n  // Handle mood selection\r\n  const handleMoodSubmit = () => {\r\n    const newMoodData = [...moodData, { mood, date: new Date().toLocaleDateString() }];\r\n    setMoodData(newMoodData);\r\n    setMood(\"\");\r\n  };\r\n\r\n  // Prepare data for graph\r\n  const chartData = {\r\n    labels: moodData.map(entry => entry.date),\r\n    datasets: [\r\n      {\r\n        label: \"Mood Trends\",\r\n        data: moodData.map(entry => (entry.mood === \"Happy\" ? 1 : entry.mood === \"Sad\" ? -1 : 0)),\r\n        backgroundColor: [\"#ff4d6d\"],\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div className=\"mood-container\">\r\n      <h2>Mood Tracker</h2>\r\n      <select value={mood} onChange={(e) => setMood(e.target.value)}>\r\n        <option value=\"\">Select Mood</option>\r\n        <option value=\"Happy\">üòä Happy</option>\r\n        <option value=\"Sad\">üò¢ Sad</option>\r\n        <option value=\"Stressed\">üòñ Stressed</option>\r\n        <option value=\"Energetic\">‚ö° Energetic</option>\r\n      </select>\r\n      <button onClick={handleMoodSubmit}>Log Mood</button>\r\n      <Bar data={chartData} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MoodTracker;\r\n*/\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst moods = [\"üòä\", \"üò¢\", \"üò°\", \"üò¥\", \"üòÅ\"];\nexport default function MoodTracker() {\n  _s();\n  const [selectedMood, setSelectedMood] = useState(null);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"How do you feel today?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: moods.map((mood, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSelectedMood(mood),\n        children: mood\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), selectedMood && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"You selected: \", selectedMood]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(MoodTracker, \"TecgD1fN4jAZpVuqN0NBVanQTa8=\");\n_c = MoodTracker;\nvar _c;\n$RefreshReg$(_c, \"MoodTracker\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","moods","MoodTracker","_s","selectedMood","setSelectedMood","children","fileName","_jsxFileName","lineNumber","columnNumber","map","mood","index","onClick","_c","$RefreshReg$"],"sources":["C:/vardha/Menstrual/frontend/src/pages/MoodTracker.js"],"sourcesContent":["/*import React, { useState } from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport { Chart, registerables } from 'chart.js';\r\nimport \"../styles/MoodTracker.css\";\r\n\r\n// Register all Chart.js components\r\nChart.register(...registerables);\r\n\r\nfunction MoodTracker() {\r\n  const [moodData, setMoodData] = useState([]);\r\n  const [mood, setMood] = useState(\"\");\r\n\r\n  // Handle mood selection\r\n  const handleMoodSubmit = () => {\r\n    const newMoodData = [...moodData, { mood, date: new Date().toLocaleDateString() }];\r\n    setMoodData(newMoodData);\r\n    setMood(\"\");\r\n  };\r\n\r\n  // Prepare data for graph\r\n  const chartData = {\r\n    labels: moodData.map(entry => entry.date),\r\n    datasets: [\r\n      {\r\n        label: \"Mood Trends\",\r\n        data: moodData.map(entry => (entry.mood === \"Happy\" ? 1 : entry.mood === \"Sad\" ? -1 : 0)),\r\n        backgroundColor: [\"#ff4d6d\"],\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div className=\"mood-container\">\r\n      <h2>Mood Tracker</h2>\r\n      <select value={mood} onChange={(e) => setMood(e.target.value)}>\r\n        <option value=\"\">Select Mood</option>\r\n        <option value=\"Happy\">üòä Happy</option>\r\n        <option value=\"Sad\">üò¢ Sad</option>\r\n        <option value=\"Stressed\">üòñ Stressed</option>\r\n        <option value=\"Energetic\">‚ö° Energetic</option>\r\n      </select>\r\n      <button onClick={handleMoodSubmit}>Log Mood</button>\r\n      <Bar data={chartData} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MoodTracker;\r\n*/\r\nimport { useState } from \"react\";\r\n\r\nconst moods = [\"üòä\", \"üò¢\", \"üò°\", \"üò¥\", \"üòÅ\"];\r\n\r\nexport default function MoodTracker() {\r\n  const [selectedMood, setSelectedMood] = useState(null);\r\n\r\n  return (\r\n    <div>\r\n      <h3>How do you feel today?</h3>\r\n      <div>\r\n        {moods.map((mood, index) => (\r\n          <button key={index} onClick={() => setSelectedMood(mood)}>\r\n            {mood}\r\n          </button>\r\n        ))}\r\n      </div>\r\n      {selectedMood && <p>You selected: {selectedMood}</p>}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,MAAMC,KAAK,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;AAE5C,eAAe,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACpC,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAEtD,oBACEE,OAAA;IAAAM,QAAA,gBACEN,OAAA;MAAAM,QAAA,EAAI;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC/BV,OAAA;MAAAM,QAAA,EACGL,KAAK,CAACU,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACrBb,OAAA;QAAoBc,OAAO,EAAEA,CAAA,KAAMT,eAAe,CAACO,IAAI,CAAE;QAAAN,QAAA,EACtDM;MAAI,GADMC,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACT;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,EACLN,YAAY,iBAAIJ,OAAA;MAAAM,QAAA,GAAG,gBAAc,EAACF,YAAY;IAAA;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjD,CAAC;AAEV;AAACP,EAAA,CAhBuBD,WAAW;AAAAa,EAAA,GAAXb,WAAW;AAAA,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}