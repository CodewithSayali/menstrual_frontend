{"ast":null,"code":"/*import React, { useState, useEffect } from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport \"react-calendar/dist/Calendar.css\";\r\nimport \"../styles/Tracker.css\";\r\nimport Reports from \"./Reports\";\r\nimport { saveAs } from \"file-saver\"; \r\n\r\nfunction Tracker() {\r\n  const [date, setDate] = useState(new Date());\r\n  const [periodDates, setPeriodDates] = useState([]);\r\n\r\n  // Load stored period dates\r\n  useEffect(() => {\r\n    const savedDates = JSON.parse(localStorage.getItem(\"periodDates\"));\r\n    if (savedDates) {\r\n      setPeriodDates(savedDates);\r\n    }\r\n  }, []);\r\n\r\n  // Handle date selection\r\n  const handleDateChange = (selectedDate) => {\r\n    const formattedDate = selectedDate.toDateString();\r\n    if (!periodDates.includes(formattedDate)) {\r\n      const newDates = [...periodDates, formattedDate].sort((a, b) => new Date(a) - new Date(b));\r\n      setPeriodDates(newDates);\r\n      localStorage.setItem(\"periodDates\", JSON.stringify(newDates));\r\n      setDate(selectedDate);\r\n      showNotification(\"Period date logged!\");\r\n    }\r\n  };\r\n\r\n  // Delete period log\r\n  const deleteLog = (dateToDelete) => {\r\n    const updatedDates = periodDates.filter((d) => d !== dateToDelete);\r\n    setPeriodDates(updatedDates);\r\n    localStorage.setItem(\"periodDates\", JSON.stringify(updatedDates));\r\n  };\r\n\r\n  // Predict next period (assuming 28-day cycle)\r\n  const predictNextPeriod = () => {\r\n    if (periodDates.length > 0) {\r\n      let lastPeriod = new Date(periodDates[periodDates.length - 1]);\r\n      let nextPeriod = new Date(lastPeriod);\r\n      nextPeriod.setDate(nextPeriod.getDate() + 28);\r\n      return nextPeriod.toDateString();\r\n    }\r\n    return \"Not enough data to predict.\";\r\n  };\r\n\r\n  // Calculate cycle lengths\r\n  const cycleLengths = periodDates.map((date, i) => \r\n    i > 0 ? (new Date(date) - new Date(periodDates[i - 1])) / (1000 * 60 * 60 * 24) : null\r\n  ).filter(length => length !== null);\r\n\r\n  // Calculate average cycle length\r\n  const avgCycleLength = cycleLengths.length > 0 ? \r\n    (cycleLengths.reduce((a, b) => a + b, 0) / cycleLengths.length).toFixed(1) \r\n    : \"Not enough data\";\r\n\r\n  // Show browser notification\r\n  const showNotification = (message) => {\r\n    if (Notification.permission === \"granted\") {\r\n      new Notification(\"Menstrual Tracker\", { body: message });\r\n    }\r\n  };\r\n\r\n  // Export cycle data as CSV\r\n  const exportData = () => {\r\n    const csvContent = \"data:text/csv;charset=utf-8,Date\\n\" + periodDates.join(\"\\n\");\r\n    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\r\n    saveAs(blob, \"cycle_history.csv\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"tracker-container\">\r\n      <h2>Menstrual Cycle Tracker</h2>\r\n      <Calendar onClickDay={handleDateChange} value={date} />\r\n      \r\n      <h3>Logged Period Dates:</h3>\r\n      <ul>\r\n        {periodDates.map((d, index) => (\r\n          <li key={index}>\r\n            {d} \r\n            <button onClick={() => deleteLog(d)}>‚ùé</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      <h3>Next Predicted Period: {predictNextPeriod()}</h3>\r\n      <h3>Last Cycle Length: {cycleLengths.length > 0 ? cycleLengths[cycleLengths.length - 1] + \" days\" : \"N/A\"}</h3>\r\n      <h3>Average Cycle Length: {avgCycleLength}</h3> \r\n      \r\n      <button onClick={exportData}>üìÇ Export Cycle Data</button>\r\n\r\n      \r\n      <Reports periodDates={periodDates} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tracker;\r\n*/\n\n/*\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport \"react-calendar/dist/Calendar.css\";\r\nimport \"../styles/Tracker.css\";\r\nimport Reports from \"./Reports\";\r\nimport { saveAs } from \"file-saver\"; \r\n\r\nfunction Tracker() {\r\n  const [date, setDate] = useState(new Date());\r\n  const [periodDates, setPeriodDates] = useState([]);\r\n  const [cycleLength, setCycleLength] = useState(28); // Default cycle length\r\n\r\n  // Load stored period dates and cycle length\r\n  useEffect(() => {\r\n    const savedDates = JSON.parse(localStorage.getItem(\"periodDates\"));\r\n    if (savedDates) setPeriodDates(savedDates);\r\n\r\n    const savedCycleLength = localStorage.getItem(\"cycleLength\");\r\n    if (savedCycleLength) setCycleLength(Number(savedCycleLength));\r\n  }, []);\r\n\r\n  // Handle date selection\r\n  const handleDateChange = (selectedDate) => {\r\n    const formattedDate = selectedDate.toDateString();\r\n    if (!periodDates.includes(formattedDate)) {\r\n      const newDates = [...periodDates, formattedDate].sort((a, b) => new Date(a) - new Date(b));\r\n      setPeriodDates(newDates);\r\n      localStorage.setItem(\"periodDates\", JSON.stringify(newDates));\r\n      setDate(selectedDate);\r\n      showNotification(\"Period date logged!\");\r\n    }\r\n  };\r\n\r\n  // Delete period log\r\n  const deleteLog = (dateToDelete) => {\r\n    const updatedDates = periodDates.filter((d) => d !== dateToDelete);\r\n    setPeriodDates(updatedDates);\r\n    localStorage.setItem(\"periodDates\", JSON.stringify(updatedDates));\r\n  };\r\n\r\n  // Calculate cycle lengths\r\n  const cycleLengths = periodDates.map((date, i) => \r\n    i > 0 ? (new Date(date) - new Date(periodDates[i - 1])) / (1000 * 60 * 60 * 24) : null\r\n  ).filter(length => length !== null);\r\n\r\n  // Calculate average cycle length\r\n  const avgCycleLength = cycleLengths.length > 0 ? \r\n    Math.round(cycleLengths.reduce((a, b) => a + b, 0) / cycleLengths.length) \r\n    : 28; // Default to 28 if not enough data\r\n\r\n  // Predict next period based on user's actual cycle length or selected cycle length\r\n  const predictNextPeriod = () => {\r\n    if (periodDates.length > 0) {\r\n      let lastPeriod = new Date(periodDates[periodDates.length - 1]);\r\n      let nextPeriod = new Date(lastPeriod);\r\n      nextPeriod.setDate(nextPeriod.getDate() + cycleLength); // Use user-defined cycle length\r\n      return nextPeriod.toDateString();\r\n    }\r\n    return \"Not enough data to predict.\";\r\n  };\r\n\r\n  // Show browser notification\r\n  const showNotification = (message) => {\r\n    if (Notification.permission === \"granted\") {\r\n      new Notification(\"Menstrual Tracker\", { body: message });\r\n    }\r\n  };\r\n\r\n  // Handle cycle length change\r\n  const handleCycleLengthChange = (e) => {\r\n    const value = Number(e.target.value);\r\n    if (value > 15 && value < 50) { // Ensure valid range\r\n      setCycleLength(value);\r\n      localStorage.setItem(\"cycleLength\", value);\r\n    }\r\n  };\r\n\r\n  // Export cycle data as CSV\r\n  const exportData = () => {\r\n    const csvContent = \"data:text/csv;charset=utf-8,Date\\n\" + periodDates.join(\"\\n\");\r\n    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\r\n    saveAs(blob, \"cycle_history.csv\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"tracker-container\">\r\n      <h2>Menstrual Cycle Tracker</h2>\r\n      <Calendar onClickDay={handleDateChange} value={date} />\r\n      \r\n      <h3>Logged Period Dates:</h3>\r\n      <ul>\r\n        {periodDates.map((d, index) => (\r\n          <li key={index}>\r\n            {d} \r\n            <button onClick={() => deleteLog(d)}>‚ùé</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n\r\n       //Allow user to manually set cycle length \r\n      <label>Set Your Cycle Length: </label>\r\n      <input \r\n        type=\"number\" \r\n        value={cycleLength} \r\n        onChange={handleCycleLengthChange} \r\n        min=\"15\" \r\n        max=\"50\"\r\n      />\r\n\r\n      \r\n\r\n      <h3>Next Predicted Period: {predictNextPeriod()}</h3>\r\n      <h3>Last Cycle Length: {cycleLengths.length > 0 ? cycleLengths[cycleLengths.length - 1] + \" days\" : \"N/A\"}</h3>\r\n      <h3>Average Cycle Length: {avgCycleLength} days</h3>\r\n\r\n      \r\n\r\n      <button onClick={exportData}>üìÇ Export Cycle Data</button>\r\n\r\n      // Integrating Reports \r\n      <Reports periodDates={periodDates} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tracker;\r\n*/\n\nconst express = require(\"express\");\nconst Cycle = require(\"../models/Cycle\");\nconst Period = require(\"../models/Period\");\nconst auth = require(\"../middleware/auth\");\nconst router = express.Router();\n\n// ‚úÖ Log New Cycle Entry\nrouter.post(\"/log\", auth, async (req, res) => {\n  try {\n    const {\n      startDate,\n      cycleLength\n    } = req.body;\n    if (!startDate || !cycleLength) {\n      return res.status(400).json({\n        message: \"Please provide all details\"\n      });\n    }\n    const newCycle = new Cycle({\n      userId: req.user._id,\n      startDate,\n      cycleLength\n    });\n    await newCycle.save();\n    res.status(201).json({\n      message: \"Cycle data saved successfully!\"\n    });\n  } catch (error) {\n    console.error(\"Error in /log API:\", error);\n    res.status(500).json({\n      message: \"Server Error\",\n      error: error.message\n    });\n  }\n});\n\n// ‚úÖ Get Past Cycle Records\nrouter.get(\"/history\", auth, async (req, res) => {\n  try {\n    const cycles = await Cycle.find({\n      userId: req.user._id\n    }).sort({\n      startDate: -1\n    });\n    if (!cycles || cycles.length === 0) {\n      return res.status(404).json({\n        message: \"No cycle data found\"\n      });\n    }\n    res.json(cycles);\n  } catch (error) {\n    console.error(\"Error in /history API:\", error);\n    res.status(500).json({\n      message: \"Server Error\",\n      error: error.message\n    });\n  }\n});\n\n// ‚úÖ Predict Next Period Start Date\nrouter.get(\"/predict\", auth, async (req, res) => {\n  try {\n    const lastCycle = await Cycle.findOne({\n      userId: req.user._id\n    }).sort({\n      startDate: -1\n    });\n    if (!lastCycle) {\n      return res.status(404).json({\n        message: \"No past cycles found\"\n      });\n    }\n    const lastStartDate = new Date(lastCycle.startDate);\n    const predictedNextStart = new Date(lastStartDate);\n    predictedNextStart.setDate(lastStartDate.getDate() + lastCycle.cycleLength);\n    res.json({\n      nextPeriodStart: predictedNextStart.toISOString().split(\"T\")[0]\n    });\n  } catch (error) {\n    console.error(\"Error in /predict API:\", error);\n    res.status(500).json({\n      message: \"Server Error\",\n      error: error.message\n    });\n  }\n});\n\n// ‚úÖ Get Cycle Data for Dashboard\nrouter.get(\"/cycle-data\", auth, async (req, res) => {\n  try {\n    const lastCycle = await Cycle.findOne({\n      userId: req.user._id\n    }).sort({\n      startDate: -1\n    });\n    if (!lastCycle) {\n      return res.json({\n        nextPeriod: \"Unknown\",\n        currentPhase: \"Unknown\"\n      });\n    }\n    const cycleLength = lastCycle.cycleLength || 28;\n    const lastDate = new Date(lastCycle.startDate);\n    const nextDate = new Date(lastDate);\n    nextDate.setDate(lastDate.getDate() + cycleLength);\n    const today = new Date();\n    const daysSinceLastPeriod = Math.floor((today - lastDate) / (1000 * 60 * 60 * 24));\n    let currentPhase = \"Unknown\";\n    if (daysSinceLastPeriod <= 5) currentPhase = \"Menstrual Phase\";else if (daysSinceLastPeriod <= 14) currentPhase = \"Follicular Phase\";else if (daysSinceLastPeriod <= 21) currentPhase = \"Ovulation\";else currentPhase = \"Luteal Phase\";\n    res.json({\n      nextPeriod: nextDate.toISOString().split(\"T\")[0],\n      currentPhase\n    });\n  } catch (error) {\n    console.error(\"Error in /cycle-data API:\", error);\n    res.status(500).json({\n      message: \"Server Error\",\n      error: error.message\n    });\n  }\n});\n\n// ‚úÖ Get Flow Data for Chart\nrouter.get(\"/flow-data\", auth, async (req, res) => {\n  try {\n    const latestPeriod = await Period.findOne({\n      userId: req.user._id\n    }).sort({\n      createdAt: -1\n    });\n    if (!latestPeriod || !latestPeriod.flowType) {\n      return res.json([]); // Return empty array if no period data found\n    }\n    const flowValues = {\n      Light: [2, 3, 1, 1, 0],\n      Medium: [3, 4, 3, 2, 1],\n      Heavy: [5, 6, 4, 3, 2]\n    };\n\n    // Ensure latestPeriod.flowType is valid\n    if (!flowValues[latestPeriod.flowType]) {\n      return res.status(400).json({\n        message: \"Invalid flow type\"\n      });\n    }\n    const flowData = flowValues[latestPeriod.flowType].map((flow, index) => ({\n      day: `Day ${index + 1}`,\n      flow\n    }));\n    res.json(flowData);\n  } catch (error) {\n    console.error(\"Error in /flow-data API:\", error);\n    res.status(500).json({\n      message: \"Server Error\",\n      error: error.message\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","Cycle","Period","auth","router","Router","post","req","res","startDate","cycleLength","body","status","json","message","newCycle","userId","user","_id","save","error","console","get","cycles","find","sort","length","lastCycle","findOne","lastStartDate","Date","predictedNextStart","setDate","getDate","nextPeriodStart","toISOString","split","nextPeriod","currentPhase","lastDate","nextDate","today","daysSinceLastPeriod","Math","floor","latestPeriod","createdAt","flowType","flowValues","Light","Medium","Heavy","flowData","map","flow","index","day","module","exports"],"sources":["C:/vardha/Menstrual/frontend/src/pages/Tracker.js"],"sourcesContent":["/*import React, { useState, useEffect } from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport \"react-calendar/dist/Calendar.css\";\r\nimport \"../styles/Tracker.css\";\r\nimport Reports from \"./Reports\";\r\nimport { saveAs } from \"file-saver\"; \r\n\r\nfunction Tracker() {\r\n  const [date, setDate] = useState(new Date());\r\n  const [periodDates, setPeriodDates] = useState([]);\r\n\r\n  // Load stored period dates\r\n  useEffect(() => {\r\n    const savedDates = JSON.parse(localStorage.getItem(\"periodDates\"));\r\n    if (savedDates) {\r\n      setPeriodDates(savedDates);\r\n    }\r\n  }, []);\r\n\r\n  // Handle date selection\r\n  const handleDateChange = (selectedDate) => {\r\n    const formattedDate = selectedDate.toDateString();\r\n    if (!periodDates.includes(formattedDate)) {\r\n      const newDates = [...periodDates, formattedDate].sort((a, b) => new Date(a) - new Date(b));\r\n      setPeriodDates(newDates);\r\n      localStorage.setItem(\"periodDates\", JSON.stringify(newDates));\r\n      setDate(selectedDate);\r\n      showNotification(\"Period date logged!\");\r\n    }\r\n  };\r\n\r\n  // Delete period log\r\n  const deleteLog = (dateToDelete) => {\r\n    const updatedDates = periodDates.filter((d) => d !== dateToDelete);\r\n    setPeriodDates(updatedDates);\r\n    localStorage.setItem(\"periodDates\", JSON.stringify(updatedDates));\r\n  };\r\n\r\n  // Predict next period (assuming 28-day cycle)\r\n  const predictNextPeriod = () => {\r\n    if (periodDates.length > 0) {\r\n      let lastPeriod = new Date(periodDates[periodDates.length - 1]);\r\n      let nextPeriod = new Date(lastPeriod);\r\n      nextPeriod.setDate(nextPeriod.getDate() + 28);\r\n      return nextPeriod.toDateString();\r\n    }\r\n    return \"Not enough data to predict.\";\r\n  };\r\n\r\n  // Calculate cycle lengths\r\n  const cycleLengths = periodDates.map((date, i) => \r\n    i > 0 ? (new Date(date) - new Date(periodDates[i - 1])) / (1000 * 60 * 60 * 24) : null\r\n  ).filter(length => length !== null);\r\n\r\n  // Calculate average cycle length\r\n  const avgCycleLength = cycleLengths.length > 0 ? \r\n    (cycleLengths.reduce((a, b) => a + b, 0) / cycleLengths.length).toFixed(1) \r\n    : \"Not enough data\";\r\n\r\n  // Show browser notification\r\n  const showNotification = (message) => {\r\n    if (Notification.permission === \"granted\") {\r\n      new Notification(\"Menstrual Tracker\", { body: message });\r\n    }\r\n  };\r\n\r\n  // Export cycle data as CSV\r\n  const exportData = () => {\r\n    const csvContent = \"data:text/csv;charset=utf-8,Date\\n\" + periodDates.join(\"\\n\");\r\n    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\r\n    saveAs(blob, \"cycle_history.csv\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"tracker-container\">\r\n      <h2>Menstrual Cycle Tracker</h2>\r\n      <Calendar onClickDay={handleDateChange} value={date} />\r\n      \r\n      <h3>Logged Period Dates:</h3>\r\n      <ul>\r\n        {periodDates.map((d, index) => (\r\n          <li key={index}>\r\n            {d} \r\n            <button onClick={() => deleteLog(d)}>‚ùé</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      <h3>Next Predicted Period: {predictNextPeriod()}</h3>\r\n      <h3>Last Cycle Length: {cycleLengths.length > 0 ? cycleLengths[cycleLengths.length - 1] + \" days\" : \"N/A\"}</h3>\r\n      <h3>Average Cycle Length: {avgCycleLength}</h3> \r\n      \r\n      <button onClick={exportData}>üìÇ Export Cycle Data</button>\r\n\r\n      \r\n      <Reports periodDates={periodDates} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tracker;\r\n*/\r\n\r\n\r\n/*\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport \"react-calendar/dist/Calendar.css\";\r\nimport \"../styles/Tracker.css\";\r\nimport Reports from \"./Reports\";\r\nimport { saveAs } from \"file-saver\"; \r\n\r\nfunction Tracker() {\r\n  const [date, setDate] = useState(new Date());\r\n  const [periodDates, setPeriodDates] = useState([]);\r\n  const [cycleLength, setCycleLength] = useState(28); // Default cycle length\r\n\r\n  // Load stored period dates and cycle length\r\n  useEffect(() => {\r\n    const savedDates = JSON.parse(localStorage.getItem(\"periodDates\"));\r\n    if (savedDates) setPeriodDates(savedDates);\r\n\r\n    const savedCycleLength = localStorage.getItem(\"cycleLength\");\r\n    if (savedCycleLength) setCycleLength(Number(savedCycleLength));\r\n  }, []);\r\n\r\n  // Handle date selection\r\n  const handleDateChange = (selectedDate) => {\r\n    const formattedDate = selectedDate.toDateString();\r\n    if (!periodDates.includes(formattedDate)) {\r\n      const newDates = [...periodDates, formattedDate].sort((a, b) => new Date(a) - new Date(b));\r\n      setPeriodDates(newDates);\r\n      localStorage.setItem(\"periodDates\", JSON.stringify(newDates));\r\n      setDate(selectedDate);\r\n      showNotification(\"Period date logged!\");\r\n    }\r\n  };\r\n\r\n  // Delete period log\r\n  const deleteLog = (dateToDelete) => {\r\n    const updatedDates = periodDates.filter((d) => d !== dateToDelete);\r\n    setPeriodDates(updatedDates);\r\n    localStorage.setItem(\"periodDates\", JSON.stringify(updatedDates));\r\n  };\r\n\r\n  // Calculate cycle lengths\r\n  const cycleLengths = periodDates.map((date, i) => \r\n    i > 0 ? (new Date(date) - new Date(periodDates[i - 1])) / (1000 * 60 * 60 * 24) : null\r\n  ).filter(length => length !== null);\r\n\r\n  // Calculate average cycle length\r\n  const avgCycleLength = cycleLengths.length > 0 ? \r\n    Math.round(cycleLengths.reduce((a, b) => a + b, 0) / cycleLengths.length) \r\n    : 28; // Default to 28 if not enough data\r\n\r\n  // Predict next period based on user's actual cycle length or selected cycle length\r\n  const predictNextPeriod = () => {\r\n    if (periodDates.length > 0) {\r\n      let lastPeriod = new Date(periodDates[periodDates.length - 1]);\r\n      let nextPeriod = new Date(lastPeriod);\r\n      nextPeriod.setDate(nextPeriod.getDate() + cycleLength); // Use user-defined cycle length\r\n      return nextPeriod.toDateString();\r\n    }\r\n    return \"Not enough data to predict.\";\r\n  };\r\n\r\n  // Show browser notification\r\n  const showNotification = (message) => {\r\n    if (Notification.permission === \"granted\") {\r\n      new Notification(\"Menstrual Tracker\", { body: message });\r\n    }\r\n  };\r\n\r\n  // Handle cycle length change\r\n  const handleCycleLengthChange = (e) => {\r\n    const value = Number(e.target.value);\r\n    if (value > 15 && value < 50) { // Ensure valid range\r\n      setCycleLength(value);\r\n      localStorage.setItem(\"cycleLength\", value);\r\n    }\r\n  };\r\n\r\n  // Export cycle data as CSV\r\n  const exportData = () => {\r\n    const csvContent = \"data:text/csv;charset=utf-8,Date\\n\" + periodDates.join(\"\\n\");\r\n    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\r\n    saveAs(blob, \"cycle_history.csv\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"tracker-container\">\r\n      <h2>Menstrual Cycle Tracker</h2>\r\n      <Calendar onClickDay={handleDateChange} value={date} />\r\n      \r\n      <h3>Logged Period Dates:</h3>\r\n      <ul>\r\n        {periodDates.map((d, index) => (\r\n          <li key={index}>\r\n            {d} \r\n            <button onClick={() => deleteLog(d)}>‚ùé</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n\r\n       //Allow user to manually set cycle length \r\n      <label>Set Your Cycle Length: </label>\r\n      <input \r\n        type=\"number\" \r\n        value={cycleLength} \r\n        onChange={handleCycleLengthChange} \r\n        min=\"15\" \r\n        max=\"50\"\r\n      />\r\n\r\n      \r\n\r\n      <h3>Next Predicted Period: {predictNextPeriod()}</h3>\r\n      <h3>Last Cycle Length: {cycleLengths.length > 0 ? cycleLengths[cycleLengths.length - 1] + \" days\" : \"N/A\"}</h3>\r\n      <h3>Average Cycle Length: {avgCycleLength} days</h3>\r\n\r\n      \r\n\r\n      <button onClick={exportData}>üìÇ Export Cycle Data</button>\r\n\r\n      // Integrating Reports \r\n      <Reports periodDates={periodDates} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tracker;\r\n*/\r\n\r\n\r\n\r\n\r\n\r\nconst express = require(\"express\");\r\nconst Cycle = require(\"../models/Cycle\");\r\nconst Period = require(\"../models/Period\");  \r\nconst auth = require(\"../middleware/auth\");\r\n\r\nconst router = express.Router();\r\n\r\n// ‚úÖ Log New Cycle Entry\r\nrouter.post(\"/log\", auth, async (req, res) => {\r\n  try {\r\n    const { startDate, cycleLength } = req.body;\r\n\r\n    if (!startDate || !cycleLength) {\r\n      return res.status(400).json({ message: \"Please provide all details\" });\r\n    }\r\n\r\n    const newCycle = new Cycle({\r\n      userId: req.user._id,\r\n      startDate,\r\n      cycleLength,\r\n    });\r\n\r\n    await newCycle.save();\r\n    res.status(201).json({ message: \"Cycle data saved successfully!\" });\r\n  } catch (error) {\r\n    console.error(\"Error in /log API:\", error);\r\n    res.status(500).json({ message: \"Server Error\", error: error.message });\r\n  }\r\n});\r\n\r\n// ‚úÖ Get Past Cycle Records\r\nrouter.get(\"/history\", auth, async (req, res) => {\r\n  try {\r\n    const cycles = await Cycle.find({ userId: req.user._id }).sort({ startDate: -1 });\r\n\r\n    if (!cycles || cycles.length === 0) {\r\n      return res.status(404).json({ message: \"No cycle data found\" });\r\n    }\r\n\r\n    res.json(cycles);\r\n  } catch (error) {\r\n    console.error(\"Error in /history API:\", error);\r\n    res.status(500).json({ message: \"Server Error\", error: error.message });\r\n  }\r\n});\r\n\r\n// ‚úÖ Predict Next Period Start Date\r\nrouter.get(\"/predict\", auth, async (req, res) => {\r\n  try {\r\n    const lastCycle = await Cycle.findOne({ userId: req.user._id }).sort({ startDate: -1 });\r\n\r\n    if (!lastCycle) {\r\n      return res.status(404).json({ message: \"No past cycles found\" });\r\n    }\r\n\r\n    const lastStartDate = new Date(lastCycle.startDate);\r\n    const predictedNextStart = new Date(lastStartDate);\r\n    predictedNextStart.setDate(lastStartDate.getDate() + lastCycle.cycleLength);\r\n\r\n    res.json({ nextPeriodStart: predictedNextStart.toISOString().split(\"T\")[0] });\r\n  } catch (error) {\r\n    console.error(\"Error in /predict API:\", error);\r\n    res.status(500).json({ message: \"Server Error\", error: error.message });\r\n  }\r\n});\r\n\r\n// ‚úÖ Get Cycle Data for Dashboard\r\nrouter.get(\"/cycle-data\", auth, async (req, res) => {\r\n  try {\r\n    const lastCycle = await Cycle.findOne({ userId: req.user._id }).sort({ startDate: -1 });\r\n\r\n    if (!lastCycle) {\r\n      return res.json({ nextPeriod: \"Unknown\", currentPhase: \"Unknown\" });\r\n    }\r\n\r\n    const cycleLength = lastCycle.cycleLength || 28;\r\n    const lastDate = new Date(lastCycle.startDate);\r\n    const nextDate = new Date(lastDate);\r\n    nextDate.setDate(lastDate.getDate() + cycleLength);\r\n\r\n    const today = new Date();\r\n    const daysSinceLastPeriod = Math.floor((today - lastDate) / (1000 * 60 * 60 * 24));\r\n    let currentPhase = \"Unknown\";\r\n\r\n    if (daysSinceLastPeriod <= 5) currentPhase = \"Menstrual Phase\";\r\n    else if (daysSinceLastPeriod <= 14) currentPhase = \"Follicular Phase\";\r\n    else if (daysSinceLastPeriod <= 21) currentPhase = \"Ovulation\";\r\n    else currentPhase = \"Luteal Phase\";\r\n\r\n    res.json({\r\n      nextPeriod: nextDate.toISOString().split(\"T\")[0],\r\n      currentPhase,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error in /cycle-data API:\", error);\r\n    res.status(500).json({ message: \"Server Error\", error: error.message });\r\n  }\r\n});\r\n\r\n// ‚úÖ Get Flow Data for Chart\r\nrouter.get(\"/flow-data\", auth, async (req, res) => {\r\n  try {\r\n    const latestPeriod = await Period.findOne({ userId: req.user._id }).sort({ createdAt: -1 });\r\n\r\n    if (!latestPeriod || !latestPeriod.flowType) {\r\n      return res.json([]);  // Return empty array if no period data found\r\n    }\r\n\r\n    const flowValues = { Light: [2, 3, 1, 1, 0], Medium: [3, 4, 3, 2, 1], Heavy: [5, 6, 4, 3, 2] };\r\n\r\n    // Ensure latestPeriod.flowType is valid\r\n    if (!flowValues[latestPeriod.flowType]) {\r\n      return res.status(400).json({ message: \"Invalid flow type\" });\r\n    }\r\n\r\n    const flowData = flowValues[latestPeriod.flowType].map((flow, index) => ({\r\n      day: `Day ${index + 1}`,\r\n      flow,\r\n    }));\r\n\r\n    res.json(flowData);\r\n  } catch (error) {\r\n    console.error(\"Error in /flow-data API:\", error);\r\n    res.status(500).json({ message: \"Server Error\", error: error.message });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}