{"ast":null,"code":"var _jsxFileName = \"C:\\\\vardha\\\\Menstrual\\\\frontend\\\\src\\\\pages\\\\Tracker.js\",\n  _s = $RefreshSig$();\n/*import React, { useState, useEffect } from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport \"react-calendar/dist/Calendar.css\";\r\nimport \"../styles/Tracker.css\";\r\nimport Reports from \"./Reports\";\r\nimport { saveAs } from \"file-saver\"; \r\n\r\nfunction Tracker() {\r\n  const [date, setDate] = useState(new Date());\r\n  const [periodDates, setPeriodDates] = useState([]);\r\n\r\n  // Load stored period dates\r\n  useEffect(() => {\r\n    const savedDates = JSON.parse(localStorage.getItem(\"periodDates\"));\r\n    if (savedDates) {\r\n      setPeriodDates(savedDates);\r\n    }\r\n  }, []);\r\n\r\n  // Handle date selection\r\n  const handleDateChange = (selectedDate) => {\r\n    const formattedDate = selectedDate.toDateString();\r\n    if (!periodDates.includes(formattedDate)) {\r\n      const newDates = [...periodDates, formattedDate].sort((a, b) => new Date(a) - new Date(b));\r\n      setPeriodDates(newDates);\r\n      localStorage.setItem(\"periodDates\", JSON.stringify(newDates));\r\n      setDate(selectedDate);\r\n      showNotification(\"Period date logged!\");\r\n    }\r\n  };\r\n\r\n  // Delete period log\r\n  const deleteLog = (dateToDelete) => {\r\n    const updatedDates = periodDates.filter((d) => d !== dateToDelete);\r\n    setPeriodDates(updatedDates);\r\n    localStorage.setItem(\"periodDates\", JSON.stringify(updatedDates));\r\n  };\r\n\r\n  // Predict next period (assuming 28-day cycle)\r\n  const predictNextPeriod = () => {\r\n    if (periodDates.length > 0) {\r\n      let lastPeriod = new Date(periodDates[periodDates.length - 1]);\r\n      let nextPeriod = new Date(lastPeriod);\r\n      nextPeriod.setDate(nextPeriod.getDate() + 28);\r\n      return nextPeriod.toDateString();\r\n    }\r\n    return \"Not enough data to predict.\";\r\n  };\r\n\r\n  // Calculate cycle lengths\r\n  const cycleLengths = periodDates.map((date, i) => \r\n    i > 0 ? (new Date(date) - new Date(periodDates[i - 1])) / (1000 * 60 * 60 * 24) : null\r\n  ).filter(length => length !== null);\r\n\r\n  // Calculate average cycle length\r\n  const avgCycleLength = cycleLengths.length > 0 ? \r\n    (cycleLengths.reduce((a, b) => a + b, 0) / cycleLengths.length).toFixed(1) \r\n    : \"Not enough data\";\r\n\r\n  // Show browser notification\r\n  const showNotification = (message) => {\r\n    if (Notification.permission === \"granted\") {\r\n      new Notification(\"Menstrual Tracker\", { body: message });\r\n    }\r\n  };\r\n\r\n  // Export cycle data as CSV\r\n  const exportData = () => {\r\n    const csvContent = \"data:text/csv;charset=utf-8,Date\\n\" + periodDates.join(\"\\n\");\r\n    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\r\n    saveAs(blob, \"cycle_history.csv\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"tracker-container\">\r\n      <h2>Menstrual Cycle Tracker</h2>\r\n      <Calendar onClickDay={handleDateChange} value={date} />\r\n      \r\n      <h3>Logged Period Dates:</h3>\r\n      <ul>\r\n        {periodDates.map((d, index) => (\r\n          <li key={index}>\r\n            {d} \r\n            <button onClick={() => deleteLog(d)}>‚ùé</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      <h3>Next Predicted Period: {predictNextPeriod()}</h3>\r\n      <h3>Last Cycle Length: {cycleLengths.length > 0 ? cycleLengths[cycleLengths.length - 1] + \" days\" : \"N/A\"}</h3>\r\n      <h3>Average Cycle Length: {avgCycleLength}</h3> \r\n      \r\n      <button onClick={exportData}>üìÇ Export Cycle Data</button>\r\n\r\n      \r\n      <Reports periodDates={periodDates} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tracker;\r\n*/\n\n/*\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport \"react-calendar/dist/Calendar.css\";\r\nimport \"../styles/Tracker.css\";\r\nimport Reports from \"./Reports\";\r\nimport { saveAs } from \"file-saver\"; \r\n\r\nfunction Tracker() {\r\n  const [date, setDate] = useState(new Date());\r\n  const [periodDates, setPeriodDates] = useState([]);\r\n  const [cycleLength, setCycleLength] = useState(28); // Default cycle length\r\n\r\n  // Load stored period dates and cycle length\r\n  useEffect(() => {\r\n    const savedDates = JSON.parse(localStorage.getItem(\"periodDates\"));\r\n    if (savedDates) setPeriodDates(savedDates);\r\n\r\n    const savedCycleLength = localStorage.getItem(\"cycleLength\");\r\n    if (savedCycleLength) setCycleLength(Number(savedCycleLength));\r\n  }, []);\r\n\r\n  // Handle date selection\r\n  const handleDateChange = (selectedDate) => {\r\n    const formattedDate = selectedDate.toDateString();\r\n    if (!periodDates.includes(formattedDate)) {\r\n      const newDates = [...periodDates, formattedDate].sort((a, b) => new Date(a) - new Date(b));\r\n      setPeriodDates(newDates);\r\n      localStorage.setItem(\"periodDates\", JSON.stringify(newDates));\r\n      setDate(selectedDate);\r\n      showNotification(\"Period date logged!\");\r\n    }\r\n  };\r\n\r\n  // Delete period log\r\n  const deleteLog = (dateToDelete) => {\r\n    const updatedDates = periodDates.filter((d) => d !== dateToDelete);\r\n    setPeriodDates(updatedDates);\r\n    localStorage.setItem(\"periodDates\", JSON.stringify(updatedDates));\r\n  };\r\n\r\n  // Calculate cycle lengths\r\n  const cycleLengths = periodDates.map((date, i) => \r\n    i > 0 ? (new Date(date) - new Date(periodDates[i - 1])) / (1000 * 60 * 60 * 24) : null\r\n  ).filter(length => length !== null);\r\n\r\n  // Calculate average cycle length\r\n  const avgCycleLength = cycleLengths.length > 0 ? \r\n    Math.round(cycleLengths.reduce((a, b) => a + b, 0) / cycleLengths.length) \r\n    : 28; // Default to 28 if not enough data\r\n\r\n  // Predict next period based on user's actual cycle length or selected cycle length\r\n  const predictNextPeriod = () => {\r\n    if (periodDates.length > 0) {\r\n      let lastPeriod = new Date(periodDates[periodDates.length - 1]);\r\n      let nextPeriod = new Date(lastPeriod);\r\n      nextPeriod.setDate(nextPeriod.getDate() + cycleLength); // Use user-defined cycle length\r\n      return nextPeriod.toDateString();\r\n    }\r\n    return \"Not enough data to predict.\";\r\n  };\r\n\r\n  // Show browser notification\r\n  const showNotification = (message) => {\r\n    if (Notification.permission === \"granted\") {\r\n      new Notification(\"Menstrual Tracker\", { body: message });\r\n    }\r\n  };\r\n\r\n  // Handle cycle length change\r\n  const handleCycleLengthChange = (e) => {\r\n    const value = Number(e.target.value);\r\n    if (value > 15 && value < 50) { // Ensure valid range\r\n      setCycleLength(value);\r\n      localStorage.setItem(\"cycleLength\", value);\r\n    }\r\n  };\r\n\r\n  // Export cycle data as CSV\r\n  const exportData = () => {\r\n    const csvContent = \"data:text/csv;charset=utf-8,Date\\n\" + periodDates.join(\"\\n\");\r\n    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\r\n    saveAs(blob, \"cycle_history.csv\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"tracker-container\">\r\n      <h2>Menstrual Cycle Tracker</h2>\r\n      <Calendar onClickDay={handleDateChange} value={date} />\r\n      \r\n      <h3>Logged Period Dates:</h3>\r\n      <ul>\r\n        {periodDates.map((d, index) => (\r\n          <li key={index}>\r\n            {d} \r\n            <button onClick={() => deleteLog(d)}>‚ùé</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n\r\n       //Allow user to manually set cycle length \r\n      <label>Set Your Cycle Length: </label>\r\n      <input \r\n        type=\"number\" \r\n        value={cycleLength} \r\n        onChange={handleCycleLengthChange} \r\n        min=\"15\" \r\n        max=\"50\"\r\n      />\r\n\r\n      \r\n\r\n      <h3>Next Predicted Period: {predictNextPeriod()}</h3>\r\n      <h3>Last Cycle Length: {cycleLengths.length > 0 ? cycleLengths[cycleLengths.length - 1] + \" days\" : \"N/A\"}</h3>\r\n      <h3>Average Cycle Length: {avgCycleLength} days</h3>\r\n\r\n      \r\n\r\n      <button onClick={exportData}>üìÇ Export Cycle Data</button>\r\n\r\n      // Integrating Reports \r\n      <Reports periodDates={periodDates} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tracker;\r\n*/\n\nimport React, { useState, useEffect } from \"react\";\nimport Calendar from \"react-calendar\";\nimport \"react-calendar/dist/Calendar.css\";\nimport \"../styles/Tracker.css\";\nimport Reports from \"./Reports\";\nimport { saveAs } from \"file-saver\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Tracker() {\n  _s();\n  const [date, setDate] = useState(new Date());\n  const [periodRecords, setPeriodRecords] = useState([]);\n  const [cycleLength, setCycleLength] = useState(28); // Default cycle length\n  const [message, setMessage] = useState(\"\");\n\n  // Load stored period dates and cycle length\n  useEffect(() => {\n    const fetchPeriodRecords = async () => {\n      try {\n        const response = await fetch(\"http://localhost:3000/api/cycles/history\", {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n          }\n        });\n        if (response.ok) {\n          const data = await response.json();\n          setPeriodRecords(data);\n          if (data.length > 0) {\n            setCycleLength(data[0].cycleLength);\n          }\n        } else {\n          setMessage(\"Failed to fetch period records.\");\n        }\n      } catch (error) {\n        setMessage(\"Error fetching period records.\");\n      }\n    };\n    fetchPeriodRecords();\n  }, []);\n\n  // Handle date selection\n  const handleDateChange = async selectedDate => {\n    const formattedDate = selectedDate.toISOString().split(\"T\")[0];\n    if (!periodRecords.some(record => record.startDate === formattedDate)) {\n      try {\n        const response = await fetch(\"http://localhost:5000/api/cycles/log\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n          },\n          body: JSON.stringify({\n            startDate: formattedDate,\n            cycleLength\n          })\n        });\n        if (response.ok) {\n          const newRecord = await response.json();\n          setPeriodRecords(prevRecords => [...prevRecords, newRecord].sort((a, b) => new Date(a.startDate) - new Date(b.startDate)));\n          setMessage(\"Period date logged!\");\n        } else {\n          setMessage(\"Failed to log period date.\");\n        }\n      } catch (error) {\n        setMessage(\"Error logging period date.\");\n      }\n    }\n  };\n\n  // Delete period log\n  const deleteLog = async recordId => {\n    try {\n      const response = await fetch(`http://localhost:5000/api/cycles/${recordId}`, {\n        method: \"DELETE\",\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n        }\n      });\n      if (response.ok) {\n        setPeriodRecords(prevRecords => prevRecords.filter(record => record._id !== recordId));\n        setMessage(\"Period record deleted.\");\n      } else {\n        setMessage(\"Failed to delete period record.\");\n      }\n    } catch (error) {\n      setMessage(\"Error deleting period record.\");\n    }\n  };\n\n  // Calculate cycle lengths\n  const cycleLengths = periodRecords.map((record, i) => i > 0 ? (new Date(record.startDate) - new Date(periodRecords[i - 1].startDate)) / (1000 * 60 * 60 * 24) : null).filter(length => length !== null);\n  const avgCycleLength = cycleLengths.length > 0 ? Math.round(cycleLengths.reduce((a, b) => a + b, 0) / cycleLengths.length) : 28;\n  const predictNextPeriod = () => {\n    if (periodRecords.length > 0) {\n      let lastPeriod = new Date(periodRecords[periodRecords.length - 1].startDate);\n      let nextPeriod = new Date(lastPeriod);\n      nextPeriod.setDate(nextPeriod.getDate() + cycleLength);\n      return nextPeriod.toDateString();\n    }\n    return \"Not enough data to predict.\";\n  };\n\n  // Show browser notification\n  const showNotification = message => {\n    if (Notification.permission === \"granted\") {\n      new Notification(\"Menstrual Tracker\", {\n        body: message\n      });\n    }\n  };\n\n  // Handle cycle length change\n  const handleCycleLengthChange = async e => {\n    const value = Number(e.target.value);\n    if (value > 15 && value < 50) {\n      setCycleLength(value);\n      try {\n        const response = await fetch(\"http://localhost:5000/api/cycles/update-cycle-length\", {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n          },\n          body: JSON.stringify({\n            cycleLength: value\n          })\n        });\n        if (!response.ok) {\n          setMessage(\"Failed to update cycle length.\");\n        }\n      } catch (error) {\n        setMessage(\"Error updating cycle length.\");\n      }\n    }\n  };\n\n  // Export cycle data as CSV\n  const exportData = () => {\n    const csvContent = \"data:text/csv;charset=utf-8,Start Date,Cycle Length\\n\" + periodRecords.map(record => `${record.startDate},${record.cycleLength}`).join(\"\\n\");\n    const blob = new Blob([csvContent], {\n      type: \"text/csv;charset=utf-8;\"\n    });\n    saveAs(blob, \"cycle_history.csv\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tracker-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Menstrual Cycle Tracker\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Calendar, {\n      onClickDay: handleDateChange,\n      value: date\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Logged Period Dates:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: periodDates.map((d, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [d, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => deleteLog(d),\n          children: \"\\u274E\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 7\n    }, this), \"//Allow user to manually set cycle length\", /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Set Your Cycle Length: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: cycleLength,\n      onChange: handleCycleLengthChange,\n      min: \"15\",\n      max: \"50\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Next Predicted Period: \", predictNextPeriod()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Last Cycle Length: \", cycleLengths.length > 0 ? cycleLengths[cycleLengths.length - 1] + \" days\" : \"N/A\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Average Cycle Length: \", avgCycleLength, \" days\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: exportData,\n      children: \"\\uD83D\\uDCC2 Export Cycle Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 7\n    }, this), \"// Integrating Reports\", /*#__PURE__*/_jsxDEV(Reports, {\n      periodDates: periodDates\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 387,\n    columnNumber: 5\n  }, this);\n}\n_s(Tracker, \"i9Uu+kBYZm8SUP+JW4AbczwVF7Y=\");\n_c = Tracker;\nexport default Tracker;\nvar _c;\n$RefreshReg$(_c, \"Tracker\");","map":{"version":3,"names":["React","useState","useEffect","Calendar","Reports","saveAs","jsxDEV","_jsxDEV","Tracker","_s","date","setDate","Date","periodRecords","setPeriodRecords","cycleLength","setCycleLength","message","setMessage","fetchPeriodRecords","response","fetch","headers","Authorization","localStorage","getItem","ok","data","json","length","error","handleDateChange","selectedDate","formattedDate","toISOString","split","some","record","startDate","method","body","JSON","stringify","newRecord","prevRecords","sort","a","b","deleteLog","recordId","filter","_id","cycleLengths","map","i","avgCycleLength","Math","round","reduce","predictNextPeriod","lastPeriod","nextPeriod","getDate","toDateString","showNotification","Notification","permission","handleCycleLengthChange","e","value","Number","target","exportData","csvContent","join","blob","Blob","type","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClickDay","periodDates","d","index","onClick","onChange","min","max","_c","$RefreshReg$"],"sources":["C:/vardha/Menstrual/frontend/src/pages/Tracker.js"],"sourcesContent":["/*import React, { useState, useEffect } from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport \"react-calendar/dist/Calendar.css\";\r\nimport \"../styles/Tracker.css\";\r\nimport Reports from \"./Reports\";\r\nimport { saveAs } from \"file-saver\"; \r\n\r\nfunction Tracker() {\r\n  const [date, setDate] = useState(new Date());\r\n  const [periodDates, setPeriodDates] = useState([]);\r\n\r\n  // Load stored period dates\r\n  useEffect(() => {\r\n    const savedDates = JSON.parse(localStorage.getItem(\"periodDates\"));\r\n    if (savedDates) {\r\n      setPeriodDates(savedDates);\r\n    }\r\n  }, []);\r\n\r\n  // Handle date selection\r\n  const handleDateChange = (selectedDate) => {\r\n    const formattedDate = selectedDate.toDateString();\r\n    if (!periodDates.includes(formattedDate)) {\r\n      const newDates = [...periodDates, formattedDate].sort((a, b) => new Date(a) - new Date(b));\r\n      setPeriodDates(newDates);\r\n      localStorage.setItem(\"periodDates\", JSON.stringify(newDates));\r\n      setDate(selectedDate);\r\n      showNotification(\"Period date logged!\");\r\n    }\r\n  };\r\n\r\n  // Delete period log\r\n  const deleteLog = (dateToDelete) => {\r\n    const updatedDates = periodDates.filter((d) => d !== dateToDelete);\r\n    setPeriodDates(updatedDates);\r\n    localStorage.setItem(\"periodDates\", JSON.stringify(updatedDates));\r\n  };\r\n\r\n  // Predict next period (assuming 28-day cycle)\r\n  const predictNextPeriod = () => {\r\n    if (periodDates.length > 0) {\r\n      let lastPeriod = new Date(periodDates[periodDates.length - 1]);\r\n      let nextPeriod = new Date(lastPeriod);\r\n      nextPeriod.setDate(nextPeriod.getDate() + 28);\r\n      return nextPeriod.toDateString();\r\n    }\r\n    return \"Not enough data to predict.\";\r\n  };\r\n\r\n  // Calculate cycle lengths\r\n  const cycleLengths = periodDates.map((date, i) => \r\n    i > 0 ? (new Date(date) - new Date(periodDates[i - 1])) / (1000 * 60 * 60 * 24) : null\r\n  ).filter(length => length !== null);\r\n\r\n  // Calculate average cycle length\r\n  const avgCycleLength = cycleLengths.length > 0 ? \r\n    (cycleLengths.reduce((a, b) => a + b, 0) / cycleLengths.length).toFixed(1) \r\n    : \"Not enough data\";\r\n\r\n  // Show browser notification\r\n  const showNotification = (message) => {\r\n    if (Notification.permission === \"granted\") {\r\n      new Notification(\"Menstrual Tracker\", { body: message });\r\n    }\r\n  };\r\n\r\n  // Export cycle data as CSV\r\n  const exportData = () => {\r\n    const csvContent = \"data:text/csv;charset=utf-8,Date\\n\" + periodDates.join(\"\\n\");\r\n    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\r\n    saveAs(blob, \"cycle_history.csv\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"tracker-container\">\r\n      <h2>Menstrual Cycle Tracker</h2>\r\n      <Calendar onClickDay={handleDateChange} value={date} />\r\n      \r\n      <h3>Logged Period Dates:</h3>\r\n      <ul>\r\n        {periodDates.map((d, index) => (\r\n          <li key={index}>\r\n            {d} \r\n            <button onClick={() => deleteLog(d)}>‚ùé</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      <h3>Next Predicted Period: {predictNextPeriod()}</h3>\r\n      <h3>Last Cycle Length: {cycleLengths.length > 0 ? cycleLengths[cycleLengths.length - 1] + \" days\" : \"N/A\"}</h3>\r\n      <h3>Average Cycle Length: {avgCycleLength}</h3> \r\n      \r\n      <button onClick={exportData}>üìÇ Export Cycle Data</button>\r\n\r\n      \r\n      <Reports periodDates={periodDates} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tracker;\r\n*/\r\n\r\n\r\n/*\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport \"react-calendar/dist/Calendar.css\";\r\nimport \"../styles/Tracker.css\";\r\nimport Reports from \"./Reports\";\r\nimport { saveAs } from \"file-saver\"; \r\n\r\nfunction Tracker() {\r\n  const [date, setDate] = useState(new Date());\r\n  const [periodDates, setPeriodDates] = useState([]);\r\n  const [cycleLength, setCycleLength] = useState(28); // Default cycle length\r\n\r\n  // Load stored period dates and cycle length\r\n  useEffect(() => {\r\n    const savedDates = JSON.parse(localStorage.getItem(\"periodDates\"));\r\n    if (savedDates) setPeriodDates(savedDates);\r\n\r\n    const savedCycleLength = localStorage.getItem(\"cycleLength\");\r\n    if (savedCycleLength) setCycleLength(Number(savedCycleLength));\r\n  }, []);\r\n\r\n  // Handle date selection\r\n  const handleDateChange = (selectedDate) => {\r\n    const formattedDate = selectedDate.toDateString();\r\n    if (!periodDates.includes(formattedDate)) {\r\n      const newDates = [...periodDates, formattedDate].sort((a, b) => new Date(a) - new Date(b));\r\n      setPeriodDates(newDates);\r\n      localStorage.setItem(\"periodDates\", JSON.stringify(newDates));\r\n      setDate(selectedDate);\r\n      showNotification(\"Period date logged!\");\r\n    }\r\n  };\r\n\r\n  // Delete period log\r\n  const deleteLog = (dateToDelete) => {\r\n    const updatedDates = periodDates.filter((d) => d !== dateToDelete);\r\n    setPeriodDates(updatedDates);\r\n    localStorage.setItem(\"periodDates\", JSON.stringify(updatedDates));\r\n  };\r\n\r\n  // Calculate cycle lengths\r\n  const cycleLengths = periodDates.map((date, i) => \r\n    i > 0 ? (new Date(date) - new Date(periodDates[i - 1])) / (1000 * 60 * 60 * 24) : null\r\n  ).filter(length => length !== null);\r\n\r\n  // Calculate average cycle length\r\n  const avgCycleLength = cycleLengths.length > 0 ? \r\n    Math.round(cycleLengths.reduce((a, b) => a + b, 0) / cycleLengths.length) \r\n    : 28; // Default to 28 if not enough data\r\n\r\n  // Predict next period based on user's actual cycle length or selected cycle length\r\n  const predictNextPeriod = () => {\r\n    if (periodDates.length > 0) {\r\n      let lastPeriod = new Date(periodDates[periodDates.length - 1]);\r\n      let nextPeriod = new Date(lastPeriod);\r\n      nextPeriod.setDate(nextPeriod.getDate() + cycleLength); // Use user-defined cycle length\r\n      return nextPeriod.toDateString();\r\n    }\r\n    return \"Not enough data to predict.\";\r\n  };\r\n\r\n  // Show browser notification\r\n  const showNotification = (message) => {\r\n    if (Notification.permission === \"granted\") {\r\n      new Notification(\"Menstrual Tracker\", { body: message });\r\n    }\r\n  };\r\n\r\n  // Handle cycle length change\r\n  const handleCycleLengthChange = (e) => {\r\n    const value = Number(e.target.value);\r\n    if (value > 15 && value < 50) { // Ensure valid range\r\n      setCycleLength(value);\r\n      localStorage.setItem(\"cycleLength\", value);\r\n    }\r\n  };\r\n\r\n  // Export cycle data as CSV\r\n  const exportData = () => {\r\n    const csvContent = \"data:text/csv;charset=utf-8,Date\\n\" + periodDates.join(\"\\n\");\r\n    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\r\n    saveAs(blob, \"cycle_history.csv\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"tracker-container\">\r\n      <h2>Menstrual Cycle Tracker</h2>\r\n      <Calendar onClickDay={handleDateChange} value={date} />\r\n      \r\n      <h3>Logged Period Dates:</h3>\r\n      <ul>\r\n        {periodDates.map((d, index) => (\r\n          <li key={index}>\r\n            {d} \r\n            <button onClick={() => deleteLog(d)}>‚ùé</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n\r\n       //Allow user to manually set cycle length \r\n      <label>Set Your Cycle Length: </label>\r\n      <input \r\n        type=\"number\" \r\n        value={cycleLength} \r\n        onChange={handleCycleLengthChange} \r\n        min=\"15\" \r\n        max=\"50\"\r\n      />\r\n\r\n      \r\n\r\n      <h3>Next Predicted Period: {predictNextPeriod()}</h3>\r\n      <h3>Last Cycle Length: {cycleLengths.length > 0 ? cycleLengths[cycleLengths.length - 1] + \" days\" : \"N/A\"}</h3>\r\n      <h3>Average Cycle Length: {avgCycleLength} days</h3>\r\n\r\n      \r\n\r\n      <button onClick={exportData}>üìÇ Export Cycle Data</button>\r\n\r\n      // Integrating Reports \r\n      <Reports periodDates={periodDates} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tracker;\r\n*/\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport \"react-calendar/dist/Calendar.css\";\r\nimport \"../styles/Tracker.css\";\r\nimport Reports from \"./Reports\";\r\nimport { saveAs } from \"file-saver\"; \r\n\r\nfunction Tracker() {\r\n  const [date, setDate] = useState(new Date());\r\n  const [periodRecords, setPeriodRecords] = useState([]);\r\n  const [cycleLength, setCycleLength] = useState(28); // Default cycle length\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  // Load stored period dates and cycle length\r\n  useEffect(() => {\r\n    const fetchPeriodRecords = async () => {\r\n      try {\r\n        const response = await fetch(\"http://localhost:3000/api/cycles/history\", {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n          },\r\n        });\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          setPeriodRecords(data);\r\n          if (data.length > 0) {\r\n            setCycleLength(data[0].cycleLength);\r\n          }\r\n        } else {\r\n          setMessage(\"Failed to fetch period records.\");\r\n        }\r\n      } catch (error) {\r\n        setMessage(\"Error fetching period records.\");\r\n      }\r\n    };\r\n  \r\n    fetchPeriodRecords();\r\n  }, []);\r\n  \r\n\r\n  // Handle date selection\r\n  const handleDateChange = async (selectedDate) => {\r\n    const formattedDate = selectedDate.toISOString().split(\"T\")[0];\r\n    if (!periodRecords.some((record) => record.startDate === formattedDate)) {\r\n      try {\r\n        const response = await fetch(\"http://localhost:5000/api/cycles/log\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n          },\r\n          body: JSON.stringify({ startDate: formattedDate, cycleLength }),\r\n        });\r\n  \r\n        if (response.ok) {\r\n          const newRecord = await response.json();\r\n          setPeriodRecords((prevRecords) => [...prevRecords, newRecord].sort((a, b) => new Date(a.startDate) - new Date(b.startDate)));\r\n          setMessage(\"Period date logged!\");\r\n        } else {\r\n          setMessage(\"Failed to log period date.\");\r\n        }\r\n      } catch (error) {\r\n        setMessage(\"Error logging period date.\");\r\n      }\r\n    }\r\n  };\r\n  \r\n\r\n  // Delete period log\r\n  const deleteLog = async (recordId) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:5000/api/cycles/${recordId}`, {\r\n        method: \"DELETE\",\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      });\r\n  \r\n      if (response.ok) {\r\n        setPeriodRecords((prevRecords) => prevRecords.filter((record) => record._id !== recordId));\r\n        setMessage(\"Period record deleted.\");\r\n      } else {\r\n        setMessage(\"Failed to delete period record.\");\r\n      }\r\n    } catch (error) {\r\n      setMessage(\"Error deleting period record.\");\r\n    }\r\n  };\r\n  \r\n\r\n  // Calculate cycle lengths\r\n  const cycleLengths = periodRecords.map((record, i) =>\r\n    i > 0 ? (new Date(record.startDate) - new Date(periodRecords[i - 1].startDate)) / (1000 * 60 * 60 * 24) : null\r\n  ).filter(length => length !== null);\r\n  \r\n  const avgCycleLength = cycleLengths.length > 0 ?\r\n    Math.round(cycleLengths.reduce((a, b) => a + b, 0) / cycleLengths.length)\r\n    : 28;\r\n  \r\n  const predictNextPeriod = () => {\r\n    if (periodRecords.length > 0) {\r\n      let lastPeriod = new Date(periodRecords[periodRecords.length - 1].startDate);\r\n      let nextPeriod = new Date(lastPeriod);\r\n      nextPeriod.setDate(nextPeriod.getDate() + cycleLength);\r\n      return nextPeriod.toDateString();\r\n    }\r\n    return \"Not enough data to predict.\";\r\n  };\r\n  \r\n  // Show browser notification\r\n  const showNotification = (message) => {\r\n    if (Notification.permission === \"granted\") {\r\n      new Notification(\"Menstrual Tracker\", { body: message });\r\n    }\r\n  };\r\n\r\n  // Handle cycle length change\r\n  const handleCycleLengthChange = async (e) => {\r\n    const value = Number(e.target.value);\r\n    if (value > 15 && value < 50) {\r\n      setCycleLength(value);\r\n      try {\r\n        const response = await fetch(\"http://localhost:5000/api/cycles/update-cycle-length\", {\r\n          method: \"PUT\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n          },\r\n          body: JSON.stringify({ cycleLength: value }),\r\n        });\r\n  \r\n        if (!response.ok) {\r\n          setMessage(\"Failed to update cycle length.\");\r\n        }\r\n      } catch (error) {\r\n        setMessage(\"Error updating cycle length.\");\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Export cycle data as CSV\r\n  const exportData = () => {\r\n    const csvContent = \"data:text/csv;charset=utf-8,Start Date,Cycle Length\\n\" +\r\n      periodRecords.map(record => `${record.startDate},${record.cycleLength}`).join(\"\\n\");\r\n    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\r\n    saveAs(blob, \"cycle_history.csv\");\r\n  };\r\n  \r\n\r\n  return (\r\n    <div className=\"tracker-container\">\r\n      <h2>Menstrual Cycle Tracker</h2>\r\n      <Calendar onClickDay={handleDateChange} value={date} />\r\n      \r\n      <h3>Logged Period Dates:</h3>\r\n      <ul>\r\n        {periodDates.map((d, index) => (\r\n          <li key={index}>\r\n            {d} \r\n            <button onClick={() => deleteLog(d)}>‚ùé</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n\r\n       //Allow user to manually set cycle length \r\n      <label>Set Your Cycle Length: </label>\r\n      <input \r\n        type=\"number\" \r\n        value={cycleLength} \r\n        onChange={handleCycleLengthChange} \r\n        min=\"15\" \r\n        max=\"50\"\r\n      />\r\n\r\n      \r\n\r\n      <h3>Next Predicted Period: {predictNextPeriod()}</h3>\r\n      <h3>Last Cycle Length: {cycleLengths.length > 0 ? cycleLengths[cycleLengths.length - 1] + \" days\" : \"N/A\"}</h3>\r\n      <h3>Average Cycle Length: {avgCycleLength} days</h3>\r\n\r\n      \r\n\r\n      <button onClick={exportData}>üìÇ Export Cycle Data</button>\r\n\r\n      // Integrating Reports \r\n      <Reports periodDates={periodDates} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tracker;\r\n\r\n\r\n\r\n\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,gBAAgB;AACrC,OAAO,kCAAkC;AACzC,OAAO,uBAAuB;AAC9B,OAAOC,OAAO,MAAM,WAAW;AAC/B,SAASC,MAAM,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,IAAIW,IAAI,CAAC,CAAC,CAAC;EAC5C,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACc,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACpD,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;;EAE1C;EACAC,SAAS,CAAC,MAAM;IACd,MAAMiB,kBAAkB,GAAG,MAAAA,CAAA,KAAY;MACrC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,0CAA0C,EAAE;UACvEC,OAAO,EAAE;YACPC,aAAa,EAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;UACxD;QACF,CAAC,CAAC;QACF,IAAIL,QAAQ,CAACM,EAAE,EAAE;UACf,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;UAClCd,gBAAgB,CAACa,IAAI,CAAC;UACtB,IAAIA,IAAI,CAACE,MAAM,GAAG,CAAC,EAAE;YACnBb,cAAc,CAACW,IAAI,CAAC,CAAC,CAAC,CAACZ,WAAW,CAAC;UACrC;QACF,CAAC,MAAM;UACLG,UAAU,CAAC,iCAAiC,CAAC;QAC/C;MACF,CAAC,CAAC,OAAOY,KAAK,EAAE;QACdZ,UAAU,CAAC,gCAAgC,CAAC;MAC9C;IACF,CAAC;IAEDC,kBAAkB,CAAC,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;;EAGN;EACA,MAAMY,gBAAgB,GAAG,MAAOC,YAAY,IAAK;IAC/C,MAAMC,aAAa,GAAGD,YAAY,CAACE,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC9D,IAAI,CAACtB,aAAa,CAACuB,IAAI,CAAEC,MAAM,IAAKA,MAAM,CAACC,SAAS,KAAKL,aAAa,CAAC,EAAE;MACvE,IAAI;QACF,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAsC,EAAE;UACnEkB,MAAM,EAAE,MAAM;UACdjB,OAAO,EAAE;YACP,cAAc,EAAE,kBAAkB;YAClCC,aAAa,EAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;UACxD,CAAC;UACDe,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEJ,SAAS,EAAEL,aAAa;YAAElB;UAAY,CAAC;QAChE,CAAC,CAAC;QAEF,IAAIK,QAAQ,CAACM,EAAE,EAAE;UACf,MAAMiB,SAAS,GAAG,MAAMvB,QAAQ,CAACQ,IAAI,CAAC,CAAC;UACvCd,gBAAgB,CAAE8B,WAAW,IAAK,CAAC,GAAGA,WAAW,EAAED,SAAS,CAAC,CAACE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAInC,IAAI,CAACkC,CAAC,CAACR,SAAS,CAAC,GAAG,IAAI1B,IAAI,CAACmC,CAAC,CAACT,SAAS,CAAC,CAAC,CAAC;UAC5HpB,UAAU,CAAC,qBAAqB,CAAC;QACnC,CAAC,MAAM;UACLA,UAAU,CAAC,4BAA4B,CAAC;QAC1C;MACF,CAAC,CAAC,OAAOY,KAAK,EAAE;QACdZ,UAAU,CAAC,4BAA4B,CAAC;MAC1C;IACF;EACF,CAAC;;EAGD;EACA,MAAM8B,SAAS,GAAG,MAAOC,QAAQ,IAAK;IACpC,IAAI;MACF,MAAM7B,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC4B,QAAQ,EAAE,EAAE;QAC3EV,MAAM,EAAE,QAAQ;QAChBjB,OAAO,EAAE;UACPC,aAAa,EAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;QACxD;MACF,CAAC,CAAC;MAEF,IAAIL,QAAQ,CAACM,EAAE,EAAE;QACfZ,gBAAgB,CAAE8B,WAAW,IAAKA,WAAW,CAACM,MAAM,CAAEb,MAAM,IAAKA,MAAM,CAACc,GAAG,KAAKF,QAAQ,CAAC,CAAC;QAC1F/B,UAAU,CAAC,wBAAwB,CAAC;MACtC,CAAC,MAAM;QACLA,UAAU,CAAC,iCAAiC,CAAC;MAC/C;IACF,CAAC,CAAC,OAAOY,KAAK,EAAE;MACdZ,UAAU,CAAC,+BAA+B,CAAC;IAC7C;EACF,CAAC;;EAGD;EACA,MAAMkC,YAAY,GAAGvC,aAAa,CAACwC,GAAG,CAAC,CAAChB,MAAM,EAAEiB,CAAC,KAC/CA,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI1C,IAAI,CAACyB,MAAM,CAACC,SAAS,CAAC,GAAG,IAAI1B,IAAI,CAACC,aAAa,CAACyC,CAAC,GAAG,CAAC,CAAC,CAAChB,SAAS,CAAC,KAAK,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,IAC5G,CAAC,CAACY,MAAM,CAACrB,MAAM,IAAIA,MAAM,KAAK,IAAI,CAAC;EAEnC,MAAM0B,cAAc,GAAGH,YAAY,CAACvB,MAAM,GAAG,CAAC,GAC5C2B,IAAI,CAACC,KAAK,CAACL,YAAY,CAACM,MAAM,CAAC,CAACZ,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,EAAE,CAAC,CAAC,GAAGK,YAAY,CAACvB,MAAM,CAAC,GACvE,EAAE;EAEN,MAAM8B,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,IAAI9C,aAAa,CAACgB,MAAM,GAAG,CAAC,EAAE;MAC5B,IAAI+B,UAAU,GAAG,IAAIhD,IAAI,CAACC,aAAa,CAACA,aAAa,CAACgB,MAAM,GAAG,CAAC,CAAC,CAACS,SAAS,CAAC;MAC5E,IAAIuB,UAAU,GAAG,IAAIjD,IAAI,CAACgD,UAAU,CAAC;MACrCC,UAAU,CAAClD,OAAO,CAACkD,UAAU,CAACC,OAAO,CAAC,CAAC,GAAG/C,WAAW,CAAC;MACtD,OAAO8C,UAAU,CAACE,YAAY,CAAC,CAAC;IAClC;IACA,OAAO,6BAA6B;EACtC,CAAC;;EAED;EACA,MAAMC,gBAAgB,GAAI/C,OAAO,IAAK;IACpC,IAAIgD,YAAY,CAACC,UAAU,KAAK,SAAS,EAAE;MACzC,IAAID,YAAY,CAAC,mBAAmB,EAAE;QAAEzB,IAAI,EAAEvB;MAAQ,CAAC,CAAC;IAC1D;EACF,CAAC;;EAED;EACA,MAAMkD,uBAAuB,GAAG,MAAOC,CAAC,IAAK;IAC3C,MAAMC,KAAK,GAAGC,MAAM,CAACF,CAAC,CAACG,MAAM,CAACF,KAAK,CAAC;IACpC,IAAIA,KAAK,GAAG,EAAE,IAAIA,KAAK,GAAG,EAAE,EAAE;MAC5BrD,cAAc,CAACqD,KAAK,CAAC;MACrB,IAAI;QACF,MAAMjD,QAAQ,GAAG,MAAMC,KAAK,CAAC,sDAAsD,EAAE;UACnFkB,MAAM,EAAE,KAAK;UACbjB,OAAO,EAAE;YACP,cAAc,EAAE,kBAAkB;YAClCC,aAAa,EAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;UACxD,CAAC;UACDe,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAE3B,WAAW,EAAEsD;UAAM,CAAC;QAC7C,CAAC,CAAC;QAEF,IAAI,CAACjD,QAAQ,CAACM,EAAE,EAAE;UAChBR,UAAU,CAAC,gCAAgC,CAAC;QAC9C;MACF,CAAC,CAAC,OAAOY,KAAK,EAAE;QACdZ,UAAU,CAAC,8BAA8B,CAAC;MAC5C;IACF;EACF,CAAC;;EAED;EACA,MAAMsD,UAAU,GAAGA,CAAA,KAAM;IACvB,MAAMC,UAAU,GAAG,uDAAuD,GACxE5D,aAAa,CAACwC,GAAG,CAAChB,MAAM,IAAI,GAAGA,MAAM,CAACC,SAAS,IAAID,MAAM,CAACtB,WAAW,EAAE,CAAC,CAAC2D,IAAI,CAAC,IAAI,CAAC;IACrF,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACH,UAAU,CAAC,EAAE;MAAEI,IAAI,EAAE;IAA0B,CAAC,CAAC;IACxExE,MAAM,CAACsE,IAAI,EAAE,mBAAmB,CAAC;EACnC,CAAC;EAGD,oBACEpE,OAAA;IAAKuE,SAAS,EAAC,mBAAmB;IAAAC,QAAA,gBAChCxE,OAAA;MAAAwE,QAAA,EAAI;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChC5E,OAAA,CAACJ,QAAQ;MAACiF,UAAU,EAAErD,gBAAiB;MAACsC,KAAK,EAAE3D;IAAK;MAAAsE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAEvD5E,OAAA;MAAAwE,QAAA,EAAI;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC7B5E,OAAA;MAAAwE,QAAA,EACGM,WAAW,CAAChC,GAAG,CAAC,CAACiC,CAAC,EAAEC,KAAK,kBACxBhF,OAAA;QAAAwE,QAAA,GACGO,CAAC,eACF/E,OAAA;UAAQiF,OAAO,EAAEA,CAAA,KAAMxC,SAAS,CAACsC,CAAC,CAAE;UAAAP,QAAA,EAAC;QAAC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,GAFxCI,KAAK;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGV,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,6CAIL,eAAA5E,OAAA;MAAAwE,QAAA,EAAO;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eACtC5E,OAAA;MACEsE,IAAI,EAAC,QAAQ;MACbR,KAAK,EAAEtD,WAAY;MACnB0E,QAAQ,EAAEtB,uBAAwB;MAClCuB,GAAG,EAAC,IAAI;MACRC,GAAG,EAAC;IAAI;MAAAX,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACT,CAAC,eAIF5E,OAAA;MAAAwE,QAAA,GAAI,yBAAuB,EAACpB,iBAAiB,CAAC,CAAC;IAAA;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACrD5E,OAAA;MAAAwE,QAAA,GAAI,qBAAmB,EAAC3B,YAAY,CAACvB,MAAM,GAAG,CAAC,GAAGuB,YAAY,CAACA,YAAY,CAACvB,MAAM,GAAG,CAAC,CAAC,GAAG,OAAO,GAAG,KAAK;IAAA;MAAAmD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAC/G5E,OAAA;MAAAwE,QAAA,GAAI,wBAAsB,EAACxB,cAAc,EAAC,OAAK;IAAA;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAIpD5E,OAAA;MAAQiF,OAAO,EAAEhB,UAAW;MAAAO,QAAA,EAAC;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,0BAG1D,eAAA5E,OAAA,CAACH,OAAO;MAACiF,WAAW,EAAEA;IAAY;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClC,CAAC;AAEV;AAAC1E,EAAA,CAtLQD,OAAO;AAAAoF,EAAA,GAAPpF,OAAO;AAwLhB,eAAeA,OAAO;AAAC,IAAAoF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}