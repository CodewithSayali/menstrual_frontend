{"ast":null,"code":"/*import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport \"../styles/Reports.css\";\r\nimport \"chart.js/auto\";\r\n\r\nfunction Reports({ periodDates }) {\r\n  // Ensure periodDates is an array\r\n  const datesArray = Array.isArray(periodDates) ? periodDates : [];\r\n\r\n  // Convert dates to cycle lengths\r\n  const cycleLengths = datesArray.map((date, i) => \r\n    i > 0 ? (new Date(date) - new Date(datesArray[i - 1])) / (1000 * 60 * 60 * 24) : null\r\n  ).filter(length => length !== null);\r\n\r\n  // Calculate average cycle length\r\n  const avgCycleLength = cycleLengths.length > 0 ? \r\n    (cycleLengths.reduce((a, b) => a + b, 0) / cycleLengths.length).toFixed(1) \r\n    : \"Not enough data\";\r\n\r\n  // Graph data\r\n  const chartData = {\r\n    labels: datesArray.slice(1).map(date => new Date(date).toDateString()), // X-axis labels (dates)\r\n    datasets: [{\r\n      label: \"Cycle Length (days)\",\r\n      data: cycleLengths, // Y-axis values\r\n      fill: false,\r\n      backgroundColor: \"#ff4d6d\",\r\n      borderColor: \"#ff4d6d\"\r\n    }]\r\n  };\r\n\r\n  return (\r\n    <div className=\"reports-container\">\r\n      <h2>Cycle Reports</h2>\r\n      <h3>Average Cycle Length: {avgCycleLength} days</h3>\r\n\r\n      <div className=\"chart-container\">\r\n        <Line data={chartData} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Add default props to ensure periodDates is always an array\r\nReports.defaultProps = {\r\n  periodDates: [],\r\n};\r\n\r\n// Add prop types to validate periodDates\r\nReports.propTypes = {\r\n  periodDates: PropTypes.arrayOf(PropTypes.string),\r\n};\r\n\r\nexport default Reports;\r\n*/","map":{"version":3,"names":[],"sources":["C:/vardha/Menstrual/frontend/src/pages/Reports.js"],"sourcesContent":["/*import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport \"../styles/Reports.css\";\r\nimport \"chart.js/auto\";\r\n\r\nfunction Reports({ periodDates }) {\r\n  // Ensure periodDates is an array\r\n  const datesArray = Array.isArray(periodDates) ? periodDates : [];\r\n\r\n  // Convert dates to cycle lengths\r\n  const cycleLengths = datesArray.map((date, i) => \r\n    i > 0 ? (new Date(date) - new Date(datesArray[i - 1])) / (1000 * 60 * 60 * 24) : null\r\n  ).filter(length => length !== null);\r\n\r\n  // Calculate average cycle length\r\n  const avgCycleLength = cycleLengths.length > 0 ? \r\n    (cycleLengths.reduce((a, b) => a + b, 0) / cycleLengths.length).toFixed(1) \r\n    : \"Not enough data\";\r\n\r\n  // Graph data\r\n  const chartData = {\r\n    labels: datesArray.slice(1).map(date => new Date(date).toDateString()), // X-axis labels (dates)\r\n    datasets: [{\r\n      label: \"Cycle Length (days)\",\r\n      data: cycleLengths, // Y-axis values\r\n      fill: false,\r\n      backgroundColor: \"#ff4d6d\",\r\n      borderColor: \"#ff4d6d\"\r\n    }]\r\n  };\r\n\r\n  return (\r\n    <div className=\"reports-container\">\r\n      <h2>Cycle Reports</h2>\r\n      <h3>Average Cycle Length: {avgCycleLength} days</h3>\r\n\r\n      <div className=\"chart-container\">\r\n        <Line data={chartData} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Add default props to ensure periodDates is always an array\r\nReports.defaultProps = {\r\n  periodDates: [],\r\n};\r\n\r\n// Add prop types to validate periodDates\r\nReports.propTypes = {\r\n  periodDates: PropTypes.arrayOf(PropTypes.string),\r\n};\r\n\r\nexport default Reports;\r\n*/"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}