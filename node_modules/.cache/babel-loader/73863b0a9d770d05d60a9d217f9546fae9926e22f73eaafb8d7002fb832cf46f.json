{"ast":null,"code":"var _jsxFileName = \"C:\\\\vardha\\\\Menstrual\\\\frontend\\\\src\\\\pages\\\\Tracker.js\",\n  _s = $RefreshSig$();\n/*import React, { useState, useEffect } from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport \"react-calendar/dist/Calendar.css\";\r\nimport \"../styles/Tracker.css\";\r\nimport Reports from \"./Reports\";\r\nimport { saveAs } from \"file-saver\"; \r\n\r\nfunction Tracker() {\r\n  const [date, setDate] = useState(new Date());\r\n  const [periodDates, setPeriodDates] = useState([]);\r\n\r\n  // Load stored period dates\r\n  useEffect(() => {\r\n    const savedDates = JSON.parse(localStorage.getItem(\"periodDates\"));\r\n    if (savedDates) {\r\n      setPeriodDates(savedDates);\r\n    }\r\n  }, []);\r\n\r\n  // Handle date selection\r\n  const handleDateChange = (selectedDate) => {\r\n    const formattedDate = selectedDate.toDateString();\r\n    if (!periodDates.includes(formattedDate)) {\r\n      const newDates = [...periodDates, formattedDate].sort((a, b) => new Date(a) - new Date(b));\r\n      setPeriodDates(newDates);\r\n      localStorage.setItem(\"periodDates\", JSON.stringify(newDates));\r\n      setDate(selectedDate);\r\n      showNotification(\"Period date logged!\");\r\n    }\r\n  };\r\n\r\n  // Delete period log\r\n  const deleteLog = (dateToDelete) => {\r\n    const updatedDates = periodDates.filter((d) => d !== dateToDelete);\r\n    setPeriodDates(updatedDates);\r\n    localStorage.setItem(\"periodDates\", JSON.stringify(updatedDates));\r\n  };\r\n\r\n  // Predict next period (assuming 28-day cycle)\r\n  const predictNextPeriod = () => {\r\n    if (periodDates.length > 0) {\r\n      let lastPeriod = new Date(periodDates[periodDates.length - 1]);\r\n      let nextPeriod = new Date(lastPeriod);\r\n      nextPeriod.setDate(nextPeriod.getDate() + 28);\r\n      return nextPeriod.toDateString();\r\n    }\r\n    return \"Not enough data to predict.\";\r\n  };\r\n\r\n  // Calculate cycle lengths\r\n  const cycleLengths = periodDates.map((date, i) => \r\n    i > 0 ? (new Date(date) - new Date(periodDates[i - 1])) / (1000 * 60 * 60 * 24) : null\r\n  ).filter(length => length !== null);\r\n\r\n  // Calculate average cycle length\r\n  const avgCycleLength = cycleLengths.length > 0 ? \r\n    (cycleLengths.reduce((a, b) => a + b, 0) / cycleLengths.length).toFixed(1) \r\n    : \"Not enough data\";\r\n\r\n  // Show browser notification\r\n  const showNotification = (message) => {\r\n    if (Notification.permission === \"granted\") {\r\n      new Notification(\"Menstrual Tracker\", { body: message });\r\n    }\r\n  };\r\n\r\n  // Export cycle data as CSV\r\n  const exportData = () => {\r\n    const csvContent = \"data:text/csv;charset=utf-8,Date\\n\" + periodDates.join(\"\\n\");\r\n    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\r\n    saveAs(blob, \"cycle_history.csv\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"tracker-container\">\r\n      <h2>Menstrual Cycle Tracker</h2>\r\n      <Calendar onClickDay={handleDateChange} value={date} />\r\n      \r\n      <h3>Logged Period Dates:</h3>\r\n      <ul>\r\n        {periodDates.map((d, index) => (\r\n          <li key={index}>\r\n            {d} \r\n            <button onClick={() => deleteLog(d)}>‚ùé</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      <h3>Next Predicted Period: {predictNextPeriod()}</h3>\r\n      <h3>Last Cycle Length: {cycleLengths.length > 0 ? cycleLengths[cycleLengths.length - 1] + \" days\" : \"N/A\"}</h3>\r\n      <h3>Average Cycle Length: {avgCycleLength}</h3> \r\n      \r\n      <button onClick={exportData}>üìÇ Export Cycle Data</button>\r\n\r\n      \r\n      <Reports periodDates={periodDates} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tracker;\r\n*/\n\n/*\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport \"react-calendar/dist/Calendar.css\";\r\nimport \"../styles/Tracker.css\";\r\nimport Reports from \"./Reports\";\r\nimport { saveAs } from \"file-saver\"; \r\n\r\nfunction Tracker() {\r\n  const [date, setDate] = useState(new Date());\r\n  const [periodDates, setPeriodDates] = useState([]);\r\n  const [cycleLength, setCycleLength] = useState(28); // Default cycle length\r\n\r\n  // Load stored period dates and cycle length\r\n  useEffect(() => {\r\n    const savedDates = JSON.parse(localStorage.getItem(\"periodDates\"));\r\n    if (savedDates) setPeriodDates(savedDates);\r\n\r\n    const savedCycleLength = localStorage.getItem(\"cycleLength\");\r\n    if (savedCycleLength) setCycleLength(Number(savedCycleLength));\r\n  }, []);\r\n\r\n  // Handle date selection\r\n  const handleDateChange = (selectedDate) => {\r\n    const formattedDate = selectedDate.toDateString();\r\n    if (!periodDates.includes(formattedDate)) {\r\n      const newDates = [...periodDates, formattedDate].sort((a, b) => new Date(a) - new Date(b));\r\n      setPeriodDates(newDates);\r\n      localStorage.setItem(\"periodDates\", JSON.stringify(newDates));\r\n      setDate(selectedDate);\r\n      showNotification(\"Period date logged!\");\r\n    }\r\n  };\r\n\r\n  // Delete period log\r\n  const deleteLog = (dateToDelete) => {\r\n    const updatedDates = periodDates.filter((d) => d !== dateToDelete);\r\n    setPeriodDates(updatedDates);\r\n    localStorage.setItem(\"periodDates\", JSON.stringify(updatedDates));\r\n  };\r\n\r\n  // Calculate cycle lengths\r\n  const cycleLengths = periodDates.map((date, i) => \r\n    i > 0 ? (new Date(date) - new Date(periodDates[i - 1])) / (1000 * 60 * 60 * 24) : null\r\n  ).filter(length => length !== null);\r\n\r\n  // Calculate average cycle length\r\n  const avgCycleLength = cycleLengths.length > 0 ? \r\n    Math.round(cycleLengths.reduce((a, b) => a + b, 0) / cycleLengths.length) \r\n    : 28; // Default to 28 if not enough data\r\n\r\n  // Predict next period based on user's actual cycle length or selected cycle length\r\n  const predictNextPeriod = () => {\r\n    if (periodDates.length > 0) {\r\n      let lastPeriod = new Date(periodDates[periodDates.length - 1]);\r\n      let nextPeriod = new Date(lastPeriod);\r\n      nextPeriod.setDate(nextPeriod.getDate() + cycleLength); // Use user-defined cycle length\r\n      return nextPeriod.toDateString();\r\n    }\r\n    return \"Not enough data to predict.\";\r\n  };\r\n\r\n  // Show browser notification\r\n  const showNotification = (message) => {\r\n    if (Notification.permission === \"granted\") {\r\n      new Notification(\"Menstrual Tracker\", { body: message });\r\n    }\r\n  };\r\n\r\n  // Handle cycle length change\r\n  const handleCycleLengthChange = (e) => {\r\n    const value = Number(e.target.value);\r\n    if (value > 15 && value < 50) { // Ensure valid range\r\n      setCycleLength(value);\r\n      localStorage.setItem(\"cycleLength\", value);\r\n    }\r\n  };\r\n\r\n  // Export cycle data as CSV\r\n  const exportData = () => {\r\n    const csvContent = \"data:text/csv;charset=utf-8,Date\\n\" + periodDates.join(\"\\n\");\r\n    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\r\n    saveAs(blob, \"cycle_history.csv\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"tracker-container\">\r\n      <h2>Menstrual Cycle Tracker</h2>\r\n      <Calendar onClickDay={handleDateChange} value={date} />\r\n      \r\n      <h3>Logged Period Dates:</h3>\r\n      <ul>\r\n        {periodDates.map((d, index) => (\r\n          <li key={index}>\r\n            {d} \r\n            <button onClick={() => deleteLog(d)}>‚ùé</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n\r\n      {/*Allow user to manually set cycle length \r\n      <label>Set Your Cycle Length: </label>\r\n      <input \r\n        type=\"number\" \r\n        value={cycleLength} \r\n        onChange={handleCycleLengthChange} \r\n        min=\"15\" \r\n        max=\"50\"\r\n      />\r\n\r\n      \r\n\r\n      <h3>Next Predicted Period: {predictNextPeriod()}</h3>\r\n      <h3>Last Cycle Length: {cycleLengths.length > 0 ? cycleLengths[cycleLengths.length - 1] + \" days\" : \"N/A\"}</h3>\r\n      <h3>Average Cycle Length: {avgCycleLength} days</h3>\r\n\r\n      \r\n\r\n      <button onClick={exportData}>üìÇ Export Cycle Data</button>\r\n\r\n      {/* Integrating Reports \r\n      <Reports periodDates={periodDates} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tracker;\r\n*/\n/*\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport \"react-calendar/dist/Calendar.css\";\r\nimport \"../styles/Tracker.css\";\r\nimport Reports from \"./Reports\";\r\nimport { saveAs } from \"file-saver\";\r\n\r\nfunction Tracker() {\r\n  // eslint-disable-next-line no-unused-vars\r\n  const [date, setDate] = useState(new Date());\r\n  const [periodRecords, setPeriodRecords] = useState([]);\r\n  const [cycleLength, setCycleLength] = useState(28); // Default cycle length\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  // Load stored period dates and cycle length\r\n  useEffect(() => {\r\n    const fetchPeriodRecords = async () => {\r\n      try {\r\n        const response = await fetch(\"http://localhost:3000/api/cycles/history\", {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n          },\r\n        });\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          setPeriodRecords(data);\r\n          if (data.length > 0) {\r\n            setCycleLength(data[0].cycleLength);\r\n          }\r\n        } else {\r\n          setMessage(\"Failed to fetch period records.\");\r\n        }\r\n      } catch (error) {\r\n        setMessage(\"Error fetching period records.\");\r\n      }\r\n    };\r\n\r\n    fetchPeriodRecords();\r\n  }, []);\r\n\r\n  // Handle date selection\r\n  const handleDateChange = async (selectedDate) => {\r\n    const formattedDate = selectedDate.toISOString().split(\"T\")[0];\r\n    if (!periodRecords.some((record) => record.startDate === formattedDate)) {\r\n      try {\r\n        const response = await fetch(\"http://localhost:3000/api/cycles/log\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n          },\r\n          body: JSON.stringify({ startDate: formattedDate, cycleLength }),\r\n        });\r\n\r\n        if (response.ok) {\r\n          const newRecord = await response.json();\r\n          setPeriodRecords((prevRecords) =>\r\n            [...prevRecords, newRecord].sort(\r\n              (a, b) => new Date(a.startDate) - new Date(b.startDate)\r\n            )\r\n          );\r\n          setMessage(\"Period date logged!\");\r\n        } else {\r\n          setMessage(\"Failed to log period date.\");\r\n        }\r\n      } catch (error) {\r\n        setMessage(\"Error logging period date.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  // Delete period log\r\n  const deleteLog = async (recordId) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:3000/api/cycles/${recordId}`, {\r\n        method: \"DELETE\",\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      });\r\n\r\n      if (response.ok) {\r\n        setPeriodRecords((prevRecords) =>\r\n          prevRecords.filter((record) => record._id !== recordId)\r\n        );\r\n        setMessage(\"Period record deleted.\");\r\n      } else {\r\n        setMessage(\"Failed to delete period record.\");\r\n      }\r\n    } catch (error) {\r\n      setMessage(\"Error deleting period record.\");\r\n    }\r\n  };\r\n\r\n  // Calculate cycle lengths\r\n  const cycleLengths = periodRecords\r\n    .map((record, i) =>\r\n      i > 0\r\n        ? (new Date(record.startDate) -\r\n            new Date(periodRecords[i - 1].startDate)) /\r\n          (1000 * 60 * 60 * 24)\r\n        : null\r\n    )\r\n    .filter((length) => length !== null);\r\n\r\n  const avgCycleLength =\r\n    cycleLengths.length > 0\r\n      ? Math.round(cycleLengths.reduce((a, b) => a + b, 0) / cycleLengths.length)\r\n      : 28;\r\n\r\n  const predictNextPeriod = () => {\r\n    if (periodRecords.length > 0) {\r\n      let lastPeriod = new Date(periodRecords[periodRecords.length - 1].startDate);\r\n      let nextPeriod = new Date(lastPeriod);\r\n      nextPeriod.setDate(nextPeriod.getDate() + cycleLength);\r\n      return nextPeriod.toDateString();\r\n    }\r\n    return \"Not enough data to predict.\";\r\n  };\r\n\r\n  // Show browser notification\r\n  // eslint-disable-next-line no-unused-vars\r\n  const showNotification = (message) => {\r\n    if (Notification.permission === \"granted\") {\r\n      new Notification(\"Menstrual Tracker\", { body: message });\r\n    } else if (Notification.permission !== \"denied\") {\r\n      Notification.requestPermission().then((permission) => {\r\n        if (permission === \"granted\") {\r\n          new Notification(\"Menstrual Tracker\", { body: message });\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  // Handle cycle length change\r\n  const handleCycleLengthChange = async (e) => {\r\n    const value = Number(e.target.value);\r\n    if (value > 15 && value < 50) {\r\n      setCycleLength(value);\r\n      try {\r\n        const response = await fetch(\r\n          \"http://localhost:3000/api/cycles/update-cycle-length\",\r\n          {\r\n            method: \"PUT\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n            },\r\n            body: JSON.stringify({ cycleLength: value }),\r\n          }\r\n        );\r\n\r\n        if (response.ok) {\r\n          setMessage(\"Cycle length updated.\");\r\n        } else {\r\n          setMessage(\"Failed to update cycle length.\");\r\n        }\r\n      } catch (error) {\r\n        setMessage(\"Error updating cycle length.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  // Export cycle data as CSV\r\n  const exportData = () => {\r\n    const periodDates = periodRecords.map((record) => record.startDate);\r\n    const csvContent =\r\n      \"data:text/csv;charset=utf-8,Date\\n\" + periodDates.join(\"\\n\");\r\n    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\r\n    saveAs(blob, \"cycle_history.csv\");\r\n  };\r\n\r\n  // Define periodDates for use in Reports component\r\n  const periodDates = periodRecords.map((record) => record.startDate);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Menstrual Health Tracker</h1>\r\n      <div>\r\n        {/* Calendar Component \r\n        <Calendar onChange={handleDateChange} value={date} />\r\n      </div>\r\n      <div>\r\n        {/* Cycle Length Input \r\n        <label>\r\n          Cycle Length:\r\n          <input\r\n            type=\"number\"\r\n            value={cycleLength}\r\n            onChange={handleCycleLengthChange}\r\n            min=\"15\"\r\n            max=\"50\"\r\n          />\r\n        </label>\r\n      </div>\r\n      <div>\r\n        <h2>Period Records</h2>\r\n        <ul>\r\n          {periodRecords.map((record) => (\r\n            <li key={record._id}>\r\n              {record.startDate}\r\n              <button onClick={() => deleteLog(record._id)}>Delete</button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n      <div>\r\n\r\n      \r\n\r\n        {/* Additional Features \r\n        <h3>Next Predicted Period: {predictNextPeriod()}</h3>\r\n        <h3>\r\n          Last Cycle Length:{\" \"}\r\n          {cycleLengths.length > 0\r\n            ? cycleLengths[cycleLengths.length - 1] + \" days\"\r\n            : \"N/A\"}\r\n        </h3>\r\n        <h3>Average Cycle Length: {avgCycleLength} days</h3>\r\n        <button onClick={exportData}>üìÇ Export Cycle Data</button>\r\n      </div>\r\n      {/* Reports Component \r\n      <Reports periodDates={periodDates} />\r\n      {/* Message Display \r\n      {message && <p>{message}</p>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tracker;\r\n*/\n/*\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport \"react-calendar/dist/Calendar.css\";\r\nimport \"../styles/Tracker.css\";\r\nimport Reports from \"./Reports\";\r\nimport { saveAs } from \"file-saver\";\r\n\r\nfunction Tracker() {\r\n  \r\n  const [date, setDate] = useState(new Date());\r\n  const [periodDates, setPeriodDates] = useState([]);\r\n  const [cycleLength, setCycleLength] = useState(28); // Default cycle length\r\n\r\n  const API_URL = \"http://localhost:3000/api/cycle\"; // Backend API URL\r\n\r\n  // üìå Fetch stored period data from the backend\r\n  useEffect(() => {\r\n    const fetchPeriodData = async () => {\r\n      try {\r\n        const response = await fetch(`${API_URL}/history`, {\r\n          method: \"GET\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`, // If using authentication\r\n          },\r\n        });\r\n        const data = await response.json();\r\n        setPeriodDates(data.periods || []);\r\n        setCycleLength(data.cycleLength || 28);\r\n      } catch (error) {\r\n        console.error(\"Error fetching period history:\", error);\r\n        setPeriodDates([]);\r\n      }\r\n    };\r\n\r\n    fetchPeriodData();\r\n  }, []);\r\n\r\n  // üìå Handle date selection and log to database\r\n  const handleDateChange = async (selectedDate) => {console.log(\"Calendar clicked! Selected Date:\", selectedDate);\r\n\r\n    const formattedDate = selectedDate.toISOString();\r\n    console.log(\"üìù ISO Formatted Date:\", formattedDate);\r\n\r\n    if (!periodDates.includes(formattedDate)) {\r\n      console.log(\"üÜï New period date detected. Sending request...\");\r\n      try {\r\n        const response = await fetch(`${API_URL}/log`, {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n          },\r\n          body: JSON.stringify({ startDate: formattedDate, cycleLength }),\r\n        });\r\n\r\n        console.log(\"üîç Response Status:\", response.status);\r\n        const result = await response.json();\r\n        console.log(\"üì• Response Data:\", result);\r\n        setPeriodDates(result.periods);\r\n        setDate(selectedDate);\r\n        showNotification(\"Period date logged!\");\r\n\r\n        if (response.ok) {\r\n          setPeriodDates(result.periods);\r\n          setDate(selectedDate);\r\n          showNotification(\"Period date logged!\");\r\n        } else {\r\n          console.error(\"‚ùå Error response from server:\", result);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error logging period:\", error);\r\n      }\r\n      \r\n\r\n      \r\n    }\r\n  };\r\n\r\n  // üìå Delete period log from backend\r\n  const deleteLog = async (dateToDelete) => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/delete`, {\r\n        method: \"DELETE\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n        body: JSON.stringify({ date: dateToDelete }),\r\n      });\r\n\r\n      const result = await response.json();\r\n      setPeriodDates(result.periods);\r\n    } catch (error) {\r\n      console.error(\"Error deleting period log:\", error);\r\n    }\r\n  };\r\n\r\n  // üìå Calculate cycle lengths\r\n  const cycleLengths = periodDates\r\n    .map((date, i) =>\r\n      i > 0 ? (new Date(date) - new Date(periodDates[i - 1])) / (1000 * 60 * 60 * 24) : null\r\n    )\r\n    .filter((length) => length !== null);\r\n\r\n  // üìå Calculate average cycle length\r\n  const avgCycleLength =\r\n    cycleLengths.length > 0\r\n      ? Math.round(cycleLengths.reduce((a, b) => a + b, 0) / cycleLengths.length)\r\n      : 28; // Default to 28 if not enough data\r\n\r\n  // üìå Predict next period based on last cycle length\r\n  const predictNextPeriod = () => {\r\n    if (periodDates.length > 0) {\r\n      let lastPeriod = new Date(periodDates[periodDates.length - 1]);\r\n      let nextPeriod = new Date(lastPeriod);\r\n      nextPeriod.setDate(nextPeriod.getDate() + cycleLength);\r\n      return nextPeriod.toDateString();\r\n    }\r\n    return \"Not enough data to predict.\";\r\n  };\r\n\r\n  // üìå Show browser notification\r\n  const showNotification = (message) => {\r\n    if (Notification.permission === \"granted\") {\r\n      new Notification(\"Menstrual Tracker\", { body: message });\r\n    }\r\n  };\r\n\r\n  // üìå Update cycle length in backend\r\n  const handleCycleLengthChange = async (e) => {\r\n    const value = Number(e.target.value);\r\n    if (value > 15 && value < 50) {\r\n      try {\r\n        const response = await fetch(`${API_URL}/update-cycle-length`, {\r\n          method: \"PUT\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n          },\r\n          body: JSON.stringify({ cycleLength: value }),\r\n        });\r\n\r\n        const result = await response.json();\r\n        setCycleLength(result.cycleLength);\r\n      } catch (error) {\r\n        console.error(\"Error updating cycle length:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  // üìå Export cycle data as CSV\r\n  const exportData = () => {\r\n    const csvContent = \"data:text/csv;charset=utf-8,Date\\n\" + periodDates.join(\"\\n\");\r\n    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\r\n    saveAs(blob, \"cycle_history.csv\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"tracker-container\">\r\n      <h2>Menstrual Cycle Tracker</h2>\r\n      <Calendar onClickDay={handleDateChange} value={date} />\r\n\r\n      <h3>Logged Period Dates:</h3>\r\n      <ul>\r\n        {periodDates.map((d, index) => (\r\n          <li key={index}>\r\n            {d} <button onClick={() => deleteLog(d)}>‚ùé</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      {/* Allow user to manually set cycle length \r\n      <label>Set Your Cycle Length: </label>\r\n      <input\r\n        type=\"number\"\r\n        value={cycleLength}\r\n        onChange={handleCycleLengthChange}\r\n        min=\"15\"\r\n        max=\"50\"\r\n      />\r\n\r\n      <h3>Next Predicted Period: {predictNextPeriod()}</h3>\r\n      <h3>Last Cycle Length: {cycleLengths.length > 0 ? cycleLengths[cycleLengths.length - 1] + \" days\" : \"N/A\"}</h3>\r\n      <h3>Average Cycle Length: {avgCycleLength} days</h3>\r\n\r\n      <button onClick={exportData}>üìÇ Export Cycle Data</button>\r\n\r\n      {/* Integrating Reports \r\n      <Reports periodDates={periodDates} />\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default Tracker;\r\n*/\n\n/*\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport \"react-calendar/dist/Calendar.css\";\r\nimport \"../styles/Tracker.css\";\r\nimport Reports from \"./Reports\";\r\nimport { saveAs } from \"file-saver\";\r\n\r\nfunction Tracker() {\r\n  const [date, setDate] = useState(new Date());\r\n  const [periodDates, setPeriodDates] = useState([]);\r\n  const [cycleLength, setCycleLength] = useState(28); // Default cycle length\r\n\r\n  // Load stored period dates and cycle length\r\n  const fetchCycleData = async () => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:3000/api/cycle\", {\r\n        method: \"GET\",\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      });\r\n  \r\n      const data = await response.json();\r\n      console.log(\"Response Data:\", data);\r\n  \r\n      if (!response.ok) {\r\n        throw new Error(data.error || \"Failed to fetch data\");\r\n      }\r\n  \r\n      setPeriodDates(data.periods || []);\r\n    } catch (error) {\r\n      console.error(\"Error Fetching Data:\", error);\r\n      alert(\"Error fetching data.\"); // Debugging alert\r\n    }\r\n  };\r\n  \r\n\r\n  /*useEffect(() => {\r\n\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(\"http://localhost:5000/api/cycle/history\", {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n          },\r\n        });\r\n\r\n        if (!response.ok) throw new Error(\"Failed to fetch data\");\r\n\r\n        const data = await response.json();\r\n        setPeriodDates(data.periods);\r\n        setCycleLength(data.cycleLength);\r\n      } catch (error) {\r\n        console.error(error);\r\n        alert(\"Error fetching data.\");\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n  */\n\n// Handle date selection\n/*\r\nconst handleDateChange = async (selectedDate) => {\r\n  setDate(selectedDate); \r\n  const formattedDate = selectedDate.toISOString().split(\"T\")[0]; // Convert date to \"YYYY-MM-DD\" format\r\n    if (!periodDates.includes(formattedDate)) {\r\n    try {\r\n      const response = await fetch(\"http://localhost:3000/api/cycle/log\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`, // Ensure the user is authenticated\r\n        },\r\n        body: JSON.stringify({ startDate: formattedDate, cycleLength }),\r\n      });\r\n        if (!response.ok) throw new Error(\"Failed to log period date\");\r\n        const data = await response.json();\r\n      setPeriodDates(data.periods); // Update frontend with data from backend\r\n      showNotification(\"Period date logged!\");\r\n    } catch (error) {\r\n      console.error(error);\r\n      alert(\"Error logging period.\");\r\n    }\r\n  }\r\n};\r\n  // Delete period log\r\nconst deleteLog = async (dateToDelete) => {\r\n  try {\r\n    const response = await fetch(\"http://localhost:3000/api/cycle/delete\", {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n      },\r\n      body: JSON.stringify({ date: dateToDelete }),\r\n    });\r\n      if (!response.ok) throw new Error(\"Failed to delete period log\");\r\n      const data = await response.json();\r\n    setPeriodDates(data.periods); // Update frontend with new data\r\n  } catch (error) {\r\n    console.error(error);\r\n    alert(\"Error deleting period log.\");\r\n  }\r\n};\r\n  // Calculate cycle lengths\r\nconst cycleLengths = periodDates\r\n  .map((date, i) =>\r\n    i > 0 ? (new Date(date) - new Date(periodDates[i - 1])) / (1000 * 60 * 60 * 24) : null\r\n  )\r\n  .filter((length) => length !== null);\r\n  // Calculate average cycle length\r\nconst avgCycleLength =\r\n  cycleLengths.length > 0\r\n    ? Math.round(cycleLengths.reduce((a, b) => a + b, 0) / cycleLengths.length)\r\n    : 28; // Default to 28 if not enough data\r\n  // Predict next period based on user's actual cycle length or selected cycle length\r\nconst predictNextPeriod = () => {\r\n  if (periodDates.length > 0) {\r\n    let lastPeriod = new Date(periodDates[periodDates.length - 1]);\r\n    let nextPeriod = new Date(lastPeriod);\r\n    nextPeriod.setDate(nextPeriod.getDate() + cycleLength); // Use user-defined cycle length\r\n    return nextPeriod.toDateString();\r\n  }\r\n  return \"Not enough data to predict.\";\r\n};\r\n  // Show browser notification\r\n/*const showNotification = (message) => {\r\n  if (Notification.permission === \"granted\") {\r\n    new Notification(\"Menstrual Tracker\", { body: message });\r\n  }\r\n};\r\nconst showNotification = (message) => {\r\n  if (Notification.permission !== \"granted\") {\r\n    Notification.requestPermission().then((permission) => {\r\n      if (permission === \"granted\") {\r\n        new Notification(\"Menstrual Tracker\", { body: message });\r\n      }\r\n    });\r\n  } else {\r\n    new Notification(\"Menstrual Tracker\", { body: message });\r\n  }\r\n};\r\n\r\n  // Handle cycle length change\r\nconst handleCycleLengthChange = async (e) => {\r\n  const value = Number(e.target.value);\r\n  if (value < 15 || value > 50) return;\r\n    setCycleLength(value);\r\n    try {\r\n    const response = await fetch(\"http://localhost:3000/api/cycle/update-cycle-length\", {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n      },\r\n      body: JSON.stringify({ cycleLength: value }),\r\n    });\r\n      if (!response.ok) throw new Error(\"Failed to update cycle length\");\r\n  } catch (error) {\r\n    console.error(error);\r\n    alert(\"Error updating cycle length.\");\r\n  }\r\n};\r\n  // Export cycle data as CSV\r\nconst exportData = () => {\r\n  const csvContent = \"data:text/csv;charset=utf-8,Date\\n\" + periodDates.join(\"\\n\");\r\n  const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\r\n  saveAs(blob, \"cycle_history.csv\");\r\n    if (periodDates.length === 0) {\r\n    alert(\"No data to export!\");\r\n    return;\r\n  }\r\n  };\r\n  return (\r\n  <div className=\"tracker-container\">\r\n    <h2>Menstrual Cycle Tracker</h2>\r\n    <Calendar onClickDay={handleDateChange} value={date} />\r\n      <h3>Logged Period Dates:</h3>\r\n    <ul>\r\n      {periodDates.map((d, index) => (\r\n        <li key={index}>\r\n          {d} <button onClick={() => deleteLog(d)}>‚ùé</button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n      <label>Set Your Cycle Length: </label>\r\n    <input\r\n      type=\"number\"\r\n      value={cycleLength}\r\n      onChange={handleCycleLengthChange}\r\n      min=\"15\"\r\n      max=\"50\"\r\n    />\r\n      <h3>Next Predicted Period: {predictNextPeriod()}</h3>\r\n    <h3>Last Cycle Length: {cycleLengths.length > 0 ? cycleLengths[cycleLengths.length - 1] + \" days\" : \"N/A\"}</h3>\r\n    <h3>Average Cycle Length: {avgCycleLength} days</h3>\r\n      <button onClick={exportData}>üìÇ Export Cycle Data</button>\r\n      <Reports periodDates={periodDates} />\r\n  </div>\r\n);\r\n}\r\nexport default Tracker;\r\n*/\nimport React, { useState, useEffect } from \"react\";\nimport Calendar from \"react-calendar\";\nimport \"react-calendar/dist/Calendar.css\";\nimport \"../styles/Tracker.css\";\nimport Reports from \"./Reports\";\nimport { saveAs } from \"file-saver\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Tracker() {\n  _s();\n  //const [date, setDate] = useState(new Date());\n  const [periodDates, setPeriodDates] = useState([]);\n  const [cycleLength, setCycleLength] = useState(28); // Default cycle length\n\n  // Fetch period history from backend\n  console.log(\"Sending Token:\", localStorage.getItem(\"token\"));\n  useEffect(() => {\n    // eslint-disable-next-line no-unused-vars\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"http://localhost:3000/api/cycles\", {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}` // Add token if using authentication\n          }\n        });\n        const contentType = response.headers.get(\"content-type\");\n        if (!response.ok || !contentType || !contentType.includes(\"application/json\")) {\n          throw new Error(\"Unexpected response format. Possibly unauthorized.\");\n        }\n        //if (!response.ok) throw new Error(\"Failed to fetch data\");\n        if (!response.ok) {\n          const errorData = await response.json();\n          console.error(\"API Error:\", errorData.message);\n          throw new Error(\"Failed to log period\");\n        }\n        const data = await response.json();\n        if (data.periods) setPeriodDates(data.periods);\n        if (data.cycleLength) setCycleLength(data.cycleLength);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n  }, []);\n  console.log(\"Sending Token:\", localStorage.getItem(\"token\"));\n\n  // Handle date selection and log the period\n  const handleDateChange = async selectedDate => {\n    const formattedDate = selectedDate.toISOString();\n    try {\n      const response = await fetch(\"http://localhost:3000/api/cycles/log\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n        },\n        body: JSON.stringify({\n          startDate: formattedDate,\n          cycleLength\n        })\n      });\n\n      //if (!response.ok) throw new Error(\"Failed to log period\");\n      if (!response.ok) {\n        const errorData = await response.json();\n        console.error(\"API Error:\", errorData.message);\n        throw new Error(\"Failed to log period\");\n      }\n      const data = await response.json();\n      setPeriodDates(data.periods);\n      showNotification(\"Period date logged!\");\n    } catch (error) {\n      console.error(\"Error logging period:\", error);\n    }\n  };\n\n  // Delete period log\n  console.log(\"Sending Token:\", localStorage.getItem(\"token\"));\n  const deleteLog = async dateToDelete => {\n    try {\n      const response = await fetch(\"http://localhost:3000/api/cycles/delete\", {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n        },\n        body: JSON.stringify({\n          date: dateToDelete\n        })\n      });\n      if (!response.ok) throw new Error(\"Failed to delete period log\");\n      const data = await response.json();\n      setPeriodDates(data.periods);\n    } catch (error) {\n      console.error(\"Error deleting log:\", error);\n    }\n  };\n\n  // Update cycle length\n  const handleCycleLengthChange = async e => {\n    const value = Number(e.target.value);\n    if (value > 15 && value < 50) {\n      try {\n        const response = await fetch(\"http://localhost:3000/api/cycles/update-cycle-length\", {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n          },\n          body: JSON.stringify({\n            cycleLength: value\n          })\n        });\n        if (!response.ok) throw new Error(\"Failed to update cycle length\");\n        const data = await response.json();\n        setCycleLength(data.cycleLength);\n      } catch (error) {\n        console.error(\"Error updating cycle length:\", error);\n      }\n    }\n  };\n  // Calculate cycle lengths\n  const cycleLengths = periodDates.map((date, i) => i > 0 ? (new Date(date) - new Date(periodDates[i - 1])) / (1000 * 60 * 60 * 24) : null).filter(length => length !== null);\n\n  // Calculate average cycle length\n  const avgCycleLength = cycleLengths.length > 0 ? Math.round(cycleLengths.reduce((a, b) => a + b, 0) / cycleLengths.length) : 28; // Default to 28 if not enough data\n\n  // Predict next period based on user's actual cycle length or selected cycle length\n  const predictNextPeriod = () => {\n    if (periodDates.length > 0) {\n      let lastPeriod = new Date(periodDates[periodDates.length - 1]);\n      let nextPeriod = new Date(lastPeriod);\n      nextPeriod.setDate(nextPeriod.getDate() + cycleLength); // Use user-defined cycle length\n      return nextPeriod.toDateString();\n    }\n    return \"Not enough data to predict.\";\n  };\n\n  // Show browser notification\n  const showNotification = message => {\n    if (Notification.permission === \"granted\") {\n      new Notification(\"Menstrual Tracker\", {\n        body: message\n      });\n    }\n  };\n\n  // Export cycle data as CSV\n  const exportData = () => {\n    const csvContent = \"Date\\n\" + periodDates.join(\"\\n\");\n    const blob = new Blob([csvContent], {\n      type: \"text/csv;charset=utf-8;\"\n    });\n    saveAs(blob, \"cycle_history.csv\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tracker-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Menstrual Cycle Tracker\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1053,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Calendar, {\n      onClickDay: handleDateChange,\n      value: new Date()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1054,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Logged Period Dates:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1056,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: periodDates.map((d, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [new Date(d).toDateString(), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => deleteLog(new Date(d).toISOString()),\n          children: \"\\u274E\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1061,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1059,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1057,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Set Your Cycle Length: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1066,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: cycleLength,\n      onChange: handleCycleLengthChange,\n      min: \"15\",\n      max: \"50\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1067,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Next Predicted Period: \", predictNextPeriod()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1074,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Last Cycle Length: \", cycleLengths.length > 0 ? cycleLengths[cycleLengths.length - 1] + \" days\" : \"N/A\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1075,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Average Cycle Length: \", avgCycleLength, \" days\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1076,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: exportData,\n      children: \"\\uD83D\\uDCC2 Export Cycle Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1079,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Reports, {\n      periodDates: periodDates\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1082,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1052,\n    columnNumber: 5\n  }, this);\n}\n_s(Tracker, \"D6xrrUpQGPGVSuAAAa4fmcYY9v0=\");\n_c = Tracker;\nexport default Tracker;\nvar _c;\n$RefreshReg$(_c, \"Tracker\");","map":{"version":3,"names":["React","useState","useEffect","Calendar","Reports","saveAs","jsxDEV","_jsxDEV","Tracker","_s","periodDates","setPeriodDates","cycleLength","setCycleLength","console","log","localStorage","getItem","fetchData","response","fetch","method","headers","Authorization","contentType","get","ok","includes","Error","errorData","json","error","message","data","periods","handleDateChange","selectedDate","formattedDate","toISOString","body","JSON","stringify","startDate","showNotification","deleteLog","dateToDelete","date","handleCycleLengthChange","e","value","Number","target","cycleLengths","map","i","Date","filter","length","avgCycleLength","Math","round","reduce","a","b","predictNextPeriod","lastPeriod","nextPeriod","setDate","getDate","toDateString","Notification","permission","exportData","csvContent","join","blob","Blob","type","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClickDay","d","index","onClick","onChange","min","max","_c","$RefreshReg$"],"sources":["C:/vardha/Menstrual/frontend/src/pages/Tracker.js"],"sourcesContent":["/*import React, { useState, useEffect } from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport \"react-calendar/dist/Calendar.css\";\r\nimport \"../styles/Tracker.css\";\r\nimport Reports from \"./Reports\";\r\nimport { saveAs } from \"file-saver\"; \r\n\r\nfunction Tracker() {\r\n  const [date, setDate] = useState(new Date());\r\n  const [periodDates, setPeriodDates] = useState([]);\r\n\r\n  // Load stored period dates\r\n  useEffect(() => {\r\n    const savedDates = JSON.parse(localStorage.getItem(\"periodDates\"));\r\n    if (savedDates) {\r\n      setPeriodDates(savedDates);\r\n    }\r\n  }, []);\r\n\r\n  // Handle date selection\r\n  const handleDateChange = (selectedDate) => {\r\n    const formattedDate = selectedDate.toDateString();\r\n    if (!periodDates.includes(formattedDate)) {\r\n      const newDates = [...periodDates, formattedDate].sort((a, b) => new Date(a) - new Date(b));\r\n      setPeriodDates(newDates);\r\n      localStorage.setItem(\"periodDates\", JSON.stringify(newDates));\r\n      setDate(selectedDate);\r\n      showNotification(\"Period date logged!\");\r\n    }\r\n  };\r\n\r\n  // Delete period log\r\n  const deleteLog = (dateToDelete) => {\r\n    const updatedDates = periodDates.filter((d) => d !== dateToDelete);\r\n    setPeriodDates(updatedDates);\r\n    localStorage.setItem(\"periodDates\", JSON.stringify(updatedDates));\r\n  };\r\n\r\n  // Predict next period (assuming 28-day cycle)\r\n  const predictNextPeriod = () => {\r\n    if (periodDates.length > 0) {\r\n      let lastPeriod = new Date(periodDates[periodDates.length - 1]);\r\n      let nextPeriod = new Date(lastPeriod);\r\n      nextPeriod.setDate(nextPeriod.getDate() + 28);\r\n      return nextPeriod.toDateString();\r\n    }\r\n    return \"Not enough data to predict.\";\r\n  };\r\n\r\n  // Calculate cycle lengths\r\n  const cycleLengths = periodDates.map((date, i) => \r\n    i > 0 ? (new Date(date) - new Date(periodDates[i - 1])) / (1000 * 60 * 60 * 24) : null\r\n  ).filter(length => length !== null);\r\n\r\n  // Calculate average cycle length\r\n  const avgCycleLength = cycleLengths.length > 0 ? \r\n    (cycleLengths.reduce((a, b) => a + b, 0) / cycleLengths.length).toFixed(1) \r\n    : \"Not enough data\";\r\n\r\n  // Show browser notification\r\n  const showNotification = (message) => {\r\n    if (Notification.permission === \"granted\") {\r\n      new Notification(\"Menstrual Tracker\", { body: message });\r\n    }\r\n  };\r\n\r\n  // Export cycle data as CSV\r\n  const exportData = () => {\r\n    const csvContent = \"data:text/csv;charset=utf-8,Date\\n\" + periodDates.join(\"\\n\");\r\n    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\r\n    saveAs(blob, \"cycle_history.csv\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"tracker-container\">\r\n      <h2>Menstrual Cycle Tracker</h2>\r\n      <Calendar onClickDay={handleDateChange} value={date} />\r\n      \r\n      <h3>Logged Period Dates:</h3>\r\n      <ul>\r\n        {periodDates.map((d, index) => (\r\n          <li key={index}>\r\n            {d} \r\n            <button onClick={() => deleteLog(d)}>‚ùé</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      <h3>Next Predicted Period: {predictNextPeriod()}</h3>\r\n      <h3>Last Cycle Length: {cycleLengths.length > 0 ? cycleLengths[cycleLengths.length - 1] + \" days\" : \"N/A\"}</h3>\r\n      <h3>Average Cycle Length: {avgCycleLength}</h3> \r\n      \r\n      <button onClick={exportData}>üìÇ Export Cycle Data</button>\r\n\r\n      \r\n      <Reports periodDates={periodDates} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tracker;\r\n*/\r\n\r\n/*\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport \"react-calendar/dist/Calendar.css\";\r\nimport \"../styles/Tracker.css\";\r\nimport Reports from \"./Reports\";\r\nimport { saveAs } from \"file-saver\"; \r\n\r\nfunction Tracker() {\r\n  const [date, setDate] = useState(new Date());\r\n  const [periodDates, setPeriodDates] = useState([]);\r\n  const [cycleLength, setCycleLength] = useState(28); // Default cycle length\r\n\r\n  // Load stored period dates and cycle length\r\n  useEffect(() => {\r\n    const savedDates = JSON.parse(localStorage.getItem(\"periodDates\"));\r\n    if (savedDates) setPeriodDates(savedDates);\r\n\r\n    const savedCycleLength = localStorage.getItem(\"cycleLength\");\r\n    if (savedCycleLength) setCycleLength(Number(savedCycleLength));\r\n  }, []);\r\n\r\n  // Handle date selection\r\n  const handleDateChange = (selectedDate) => {\r\n    const formattedDate = selectedDate.toDateString();\r\n    if (!periodDates.includes(formattedDate)) {\r\n      const newDates = [...periodDates, formattedDate].sort((a, b) => new Date(a) - new Date(b));\r\n      setPeriodDates(newDates);\r\n      localStorage.setItem(\"periodDates\", JSON.stringify(newDates));\r\n      setDate(selectedDate);\r\n      showNotification(\"Period date logged!\");\r\n    }\r\n  };\r\n\r\n  // Delete period log\r\n  const deleteLog = (dateToDelete) => {\r\n    const updatedDates = periodDates.filter((d) => d !== dateToDelete);\r\n    setPeriodDates(updatedDates);\r\n    localStorage.setItem(\"periodDates\", JSON.stringify(updatedDates));\r\n  };\r\n\r\n  // Calculate cycle lengths\r\n  const cycleLengths = periodDates.map((date, i) => \r\n    i > 0 ? (new Date(date) - new Date(periodDates[i - 1])) / (1000 * 60 * 60 * 24) : null\r\n  ).filter(length => length !== null);\r\n\r\n  // Calculate average cycle length\r\n  const avgCycleLength = cycleLengths.length > 0 ? \r\n    Math.round(cycleLengths.reduce((a, b) => a + b, 0) / cycleLengths.length) \r\n    : 28; // Default to 28 if not enough data\r\n\r\n  // Predict next period based on user's actual cycle length or selected cycle length\r\n  const predictNextPeriod = () => {\r\n    if (periodDates.length > 0) {\r\n      let lastPeriod = new Date(periodDates[periodDates.length - 1]);\r\n      let nextPeriod = new Date(lastPeriod);\r\n      nextPeriod.setDate(nextPeriod.getDate() + cycleLength); // Use user-defined cycle length\r\n      return nextPeriod.toDateString();\r\n    }\r\n    return \"Not enough data to predict.\";\r\n  };\r\n\r\n  // Show browser notification\r\n  const showNotification = (message) => {\r\n    if (Notification.permission === \"granted\") {\r\n      new Notification(\"Menstrual Tracker\", { body: message });\r\n    }\r\n  };\r\n\r\n  // Handle cycle length change\r\n  const handleCycleLengthChange = (e) => {\r\n    const value = Number(e.target.value);\r\n    if (value > 15 && value < 50) { // Ensure valid range\r\n      setCycleLength(value);\r\n      localStorage.setItem(\"cycleLength\", value);\r\n    }\r\n  };\r\n\r\n  // Export cycle data as CSV\r\n  const exportData = () => {\r\n    const csvContent = \"data:text/csv;charset=utf-8,Date\\n\" + periodDates.join(\"\\n\");\r\n    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\r\n    saveAs(blob, \"cycle_history.csv\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"tracker-container\">\r\n      <h2>Menstrual Cycle Tracker</h2>\r\n      <Calendar onClickDay={handleDateChange} value={date} />\r\n      \r\n      <h3>Logged Period Dates:</h3>\r\n      <ul>\r\n        {periodDates.map((d, index) => (\r\n          <li key={index}>\r\n            {d} \r\n            <button onClick={() => deleteLog(d)}>‚ùé</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n\r\n      {/*Allow user to manually set cycle length \r\n      <label>Set Your Cycle Length: </label>\r\n      <input \r\n        type=\"number\" \r\n        value={cycleLength} \r\n        onChange={handleCycleLengthChange} \r\n        min=\"15\" \r\n        max=\"50\"\r\n      />\r\n\r\n      \r\n\r\n      <h3>Next Predicted Period: {predictNextPeriod()}</h3>\r\n      <h3>Last Cycle Length: {cycleLengths.length > 0 ? cycleLengths[cycleLengths.length - 1] + \" days\" : \"N/A\"}</h3>\r\n      <h3>Average Cycle Length: {avgCycleLength} days</h3>\r\n\r\n      \r\n\r\n      <button onClick={exportData}>üìÇ Export Cycle Data</button>\r\n\r\n      {/* Integrating Reports \r\n      <Reports periodDates={periodDates} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tracker;\r\n*/\r\n/*\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport \"react-calendar/dist/Calendar.css\";\r\nimport \"../styles/Tracker.css\";\r\nimport Reports from \"./Reports\";\r\nimport { saveAs } from \"file-saver\";\r\n\r\nfunction Tracker() {\r\n  // eslint-disable-next-line no-unused-vars\r\n  const [date, setDate] = useState(new Date());\r\n  const [periodRecords, setPeriodRecords] = useState([]);\r\n  const [cycleLength, setCycleLength] = useState(28); // Default cycle length\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  // Load stored period dates and cycle length\r\n  useEffect(() => {\r\n    const fetchPeriodRecords = async () => {\r\n      try {\r\n        const response = await fetch(\"http://localhost:3000/api/cycles/history\", {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n          },\r\n        });\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          setPeriodRecords(data);\r\n          if (data.length > 0) {\r\n            setCycleLength(data[0].cycleLength);\r\n          }\r\n        } else {\r\n          setMessage(\"Failed to fetch period records.\");\r\n        }\r\n      } catch (error) {\r\n        setMessage(\"Error fetching period records.\");\r\n      }\r\n    };\r\n\r\n    fetchPeriodRecords();\r\n  }, []);\r\n\r\n  // Handle date selection\r\n  const handleDateChange = async (selectedDate) => {\r\n    const formattedDate = selectedDate.toISOString().split(\"T\")[0];\r\n    if (!periodRecords.some((record) => record.startDate === formattedDate)) {\r\n      try {\r\n        const response = await fetch(\"http://localhost:3000/api/cycles/log\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n          },\r\n          body: JSON.stringify({ startDate: formattedDate, cycleLength }),\r\n        });\r\n\r\n        if (response.ok) {\r\n          const newRecord = await response.json();\r\n          setPeriodRecords((prevRecords) =>\r\n            [...prevRecords, newRecord].sort(\r\n              (a, b) => new Date(a.startDate) - new Date(b.startDate)\r\n            )\r\n          );\r\n          setMessage(\"Period date logged!\");\r\n        } else {\r\n          setMessage(\"Failed to log period date.\");\r\n        }\r\n      } catch (error) {\r\n        setMessage(\"Error logging period date.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  // Delete period log\r\n  const deleteLog = async (recordId) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:3000/api/cycles/${recordId}`, {\r\n        method: \"DELETE\",\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      });\r\n\r\n      if (response.ok) {\r\n        setPeriodRecords((prevRecords) =>\r\n          prevRecords.filter((record) => record._id !== recordId)\r\n        );\r\n        setMessage(\"Period record deleted.\");\r\n      } else {\r\n        setMessage(\"Failed to delete period record.\");\r\n      }\r\n    } catch (error) {\r\n      setMessage(\"Error deleting period record.\");\r\n    }\r\n  };\r\n\r\n  // Calculate cycle lengths\r\n  const cycleLengths = periodRecords\r\n    .map((record, i) =>\r\n      i > 0\r\n        ? (new Date(record.startDate) -\r\n            new Date(periodRecords[i - 1].startDate)) /\r\n          (1000 * 60 * 60 * 24)\r\n        : null\r\n    )\r\n    .filter((length) => length !== null);\r\n\r\n  const avgCycleLength =\r\n    cycleLengths.length > 0\r\n      ? Math.round(cycleLengths.reduce((a, b) => a + b, 0) / cycleLengths.length)\r\n      : 28;\r\n\r\n  const predictNextPeriod = () => {\r\n    if (periodRecords.length > 0) {\r\n      let lastPeriod = new Date(periodRecords[periodRecords.length - 1].startDate);\r\n      let nextPeriod = new Date(lastPeriod);\r\n      nextPeriod.setDate(nextPeriod.getDate() + cycleLength);\r\n      return nextPeriod.toDateString();\r\n    }\r\n    return \"Not enough data to predict.\";\r\n  };\r\n\r\n  // Show browser notification\r\n  // eslint-disable-next-line no-unused-vars\r\n  const showNotification = (message) => {\r\n    if (Notification.permission === \"granted\") {\r\n      new Notification(\"Menstrual Tracker\", { body: message });\r\n    } else if (Notification.permission !== \"denied\") {\r\n      Notification.requestPermission().then((permission) => {\r\n        if (permission === \"granted\") {\r\n          new Notification(\"Menstrual Tracker\", { body: message });\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  // Handle cycle length change\r\n  const handleCycleLengthChange = async (e) => {\r\n    const value = Number(e.target.value);\r\n    if (value > 15 && value < 50) {\r\n      setCycleLength(value);\r\n      try {\r\n        const response = await fetch(\r\n          \"http://localhost:3000/api/cycles/update-cycle-length\",\r\n          {\r\n            method: \"PUT\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n            },\r\n            body: JSON.stringify({ cycleLength: value }),\r\n          }\r\n        );\r\n\r\n        if (response.ok) {\r\n          setMessage(\"Cycle length updated.\");\r\n        } else {\r\n          setMessage(\"Failed to update cycle length.\");\r\n        }\r\n      } catch (error) {\r\n        setMessage(\"Error updating cycle length.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  // Export cycle data as CSV\r\n  const exportData = () => {\r\n    const periodDates = periodRecords.map((record) => record.startDate);\r\n    const csvContent =\r\n      \"data:text/csv;charset=utf-8,Date\\n\" + periodDates.join(\"\\n\");\r\n    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\r\n    saveAs(blob, \"cycle_history.csv\");\r\n  };\r\n\r\n  // Define periodDates for use in Reports component\r\n  const periodDates = periodRecords.map((record) => record.startDate);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Menstrual Health Tracker</h1>\r\n      <div>\r\n        {/* Calendar Component \r\n        <Calendar onChange={handleDateChange} value={date} />\r\n      </div>\r\n      <div>\r\n        {/* Cycle Length Input \r\n        <label>\r\n          Cycle Length:\r\n          <input\r\n            type=\"number\"\r\n            value={cycleLength}\r\n            onChange={handleCycleLengthChange}\r\n            min=\"15\"\r\n            max=\"50\"\r\n          />\r\n        </label>\r\n      </div>\r\n      <div>\r\n        <h2>Period Records</h2>\r\n        <ul>\r\n          {periodRecords.map((record) => (\r\n            <li key={record._id}>\r\n              {record.startDate}\r\n              <button onClick={() => deleteLog(record._id)}>Delete</button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n      <div>\r\n\r\n      \r\n\r\n        {/* Additional Features \r\n        <h3>Next Predicted Period: {predictNextPeriod()}</h3>\r\n        <h3>\r\n          Last Cycle Length:{\" \"}\r\n          {cycleLengths.length > 0\r\n            ? cycleLengths[cycleLengths.length - 1] + \" days\"\r\n            : \"N/A\"}\r\n        </h3>\r\n        <h3>Average Cycle Length: {avgCycleLength} days</h3>\r\n        <button onClick={exportData}>üìÇ Export Cycle Data</button>\r\n      </div>\r\n      {/* Reports Component \r\n      <Reports periodDates={periodDates} />\r\n      {/* Message Display \r\n      {message && <p>{message}</p>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tracker;\r\n*/\r\n/*\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport \"react-calendar/dist/Calendar.css\";\r\nimport \"../styles/Tracker.css\";\r\nimport Reports from \"./Reports\";\r\nimport { saveAs } from \"file-saver\";\r\n\r\nfunction Tracker() {\r\n  \r\n  const [date, setDate] = useState(new Date());\r\n  const [periodDates, setPeriodDates] = useState([]);\r\n  const [cycleLength, setCycleLength] = useState(28); // Default cycle length\r\n\r\n  const API_URL = \"http://localhost:3000/api/cycle\"; // Backend API URL\r\n\r\n  // üìå Fetch stored period data from the backend\r\n  useEffect(() => {\r\n    const fetchPeriodData = async () => {\r\n      try {\r\n        const response = await fetch(`${API_URL}/history`, {\r\n          method: \"GET\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`, // If using authentication\r\n          },\r\n        });\r\n        const data = await response.json();\r\n        setPeriodDates(data.periods || []);\r\n        setCycleLength(data.cycleLength || 28);\r\n      } catch (error) {\r\n        console.error(\"Error fetching period history:\", error);\r\n        setPeriodDates([]);\r\n      }\r\n    };\r\n\r\n    fetchPeriodData();\r\n  }, []);\r\n\r\n  // üìå Handle date selection and log to database\r\n  const handleDateChange = async (selectedDate) => {console.log(\"Calendar clicked! Selected Date:\", selectedDate);\r\n\r\n    const formattedDate = selectedDate.toISOString();\r\n    console.log(\"üìù ISO Formatted Date:\", formattedDate);\r\n\r\n    if (!periodDates.includes(formattedDate)) {\r\n      console.log(\"üÜï New period date detected. Sending request...\");\r\n      try {\r\n        const response = await fetch(`${API_URL}/log`, {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n          },\r\n          body: JSON.stringify({ startDate: formattedDate, cycleLength }),\r\n        });\r\n\r\n        console.log(\"üîç Response Status:\", response.status);\r\n        const result = await response.json();\r\n        console.log(\"üì• Response Data:\", result);\r\n        setPeriodDates(result.periods);\r\n        setDate(selectedDate);\r\n        showNotification(\"Period date logged!\");\r\n\r\n        if (response.ok) {\r\n          setPeriodDates(result.periods);\r\n          setDate(selectedDate);\r\n          showNotification(\"Period date logged!\");\r\n        } else {\r\n          console.error(\"‚ùå Error response from server:\", result);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error logging period:\", error);\r\n      }\r\n      \r\n\r\n      \r\n    }\r\n  };\r\n\r\n  // üìå Delete period log from backend\r\n  const deleteLog = async (dateToDelete) => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/delete`, {\r\n        method: \"DELETE\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n        body: JSON.stringify({ date: dateToDelete }),\r\n      });\r\n\r\n      const result = await response.json();\r\n      setPeriodDates(result.periods);\r\n    } catch (error) {\r\n      console.error(\"Error deleting period log:\", error);\r\n    }\r\n  };\r\n\r\n  // üìå Calculate cycle lengths\r\n  const cycleLengths = periodDates\r\n    .map((date, i) =>\r\n      i > 0 ? (new Date(date) - new Date(periodDates[i - 1])) / (1000 * 60 * 60 * 24) : null\r\n    )\r\n    .filter((length) => length !== null);\r\n\r\n  // üìå Calculate average cycle length\r\n  const avgCycleLength =\r\n    cycleLengths.length > 0\r\n      ? Math.round(cycleLengths.reduce((a, b) => a + b, 0) / cycleLengths.length)\r\n      : 28; // Default to 28 if not enough data\r\n\r\n  // üìå Predict next period based on last cycle length\r\n  const predictNextPeriod = () => {\r\n    if (periodDates.length > 0) {\r\n      let lastPeriod = new Date(periodDates[periodDates.length - 1]);\r\n      let nextPeriod = new Date(lastPeriod);\r\n      nextPeriod.setDate(nextPeriod.getDate() + cycleLength);\r\n      return nextPeriod.toDateString();\r\n    }\r\n    return \"Not enough data to predict.\";\r\n  };\r\n\r\n  // üìå Show browser notification\r\n  const showNotification = (message) => {\r\n    if (Notification.permission === \"granted\") {\r\n      new Notification(\"Menstrual Tracker\", { body: message });\r\n    }\r\n  };\r\n\r\n  // üìå Update cycle length in backend\r\n  const handleCycleLengthChange = async (e) => {\r\n    const value = Number(e.target.value);\r\n    if (value > 15 && value < 50) {\r\n      try {\r\n        const response = await fetch(`${API_URL}/update-cycle-length`, {\r\n          method: \"PUT\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n          },\r\n          body: JSON.stringify({ cycleLength: value }),\r\n        });\r\n\r\n        const result = await response.json();\r\n        setCycleLength(result.cycleLength);\r\n      } catch (error) {\r\n        console.error(\"Error updating cycle length:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  // üìå Export cycle data as CSV\r\n  const exportData = () => {\r\n    const csvContent = \"data:text/csv;charset=utf-8,Date\\n\" + periodDates.join(\"\\n\");\r\n    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\r\n    saveAs(blob, \"cycle_history.csv\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"tracker-container\">\r\n      <h2>Menstrual Cycle Tracker</h2>\r\n      <Calendar onClickDay={handleDateChange} value={date} />\r\n\r\n      <h3>Logged Period Dates:</h3>\r\n      <ul>\r\n        {periodDates.map((d, index) => (\r\n          <li key={index}>\r\n            {d} <button onClick={() => deleteLog(d)}>‚ùé</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      {/* Allow user to manually set cycle length \r\n      <label>Set Your Cycle Length: </label>\r\n      <input\r\n        type=\"number\"\r\n        value={cycleLength}\r\n        onChange={handleCycleLengthChange}\r\n        min=\"15\"\r\n        max=\"50\"\r\n      />\r\n\r\n      <h3>Next Predicted Period: {predictNextPeriod()}</h3>\r\n      <h3>Last Cycle Length: {cycleLengths.length > 0 ? cycleLengths[cycleLengths.length - 1] + \" days\" : \"N/A\"}</h3>\r\n      <h3>Average Cycle Length: {avgCycleLength} days</h3>\r\n\r\n      <button onClick={exportData}>üìÇ Export Cycle Data</button>\r\n\r\n      {/* Integrating Reports \r\n      <Reports periodDates={periodDates} />\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default Tracker;\r\n*/\r\n\r\n/*\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport \"react-calendar/dist/Calendar.css\";\r\nimport \"../styles/Tracker.css\";\r\nimport Reports from \"./Reports\";\r\nimport { saveAs } from \"file-saver\";\r\n\r\nfunction Tracker() {\r\n  const [date, setDate] = useState(new Date());\r\n  const [periodDates, setPeriodDates] = useState([]);\r\n  const [cycleLength, setCycleLength] = useState(28); // Default cycle length\r\n\r\n  // Load stored period dates and cycle length\r\n  const fetchCycleData = async () => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:3000/api/cycle\", {\r\n        method: \"GET\",\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      });\r\n  \r\n      const data = await response.json();\r\n      console.log(\"Response Data:\", data);\r\n  \r\n      if (!response.ok) {\r\n        throw new Error(data.error || \"Failed to fetch data\");\r\n      }\r\n  \r\n      setPeriodDates(data.periods || []);\r\n    } catch (error) {\r\n      console.error(\"Error Fetching Data:\", error);\r\n      alert(\"Error fetching data.\"); // Debugging alert\r\n    }\r\n  };\r\n  \r\n\r\n  /*useEffect(() => {\r\n\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(\"http://localhost:5000/api/cycle/history\", {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n          },\r\n        });\r\n\r\n        if (!response.ok) throw new Error(\"Failed to fetch data\");\r\n\r\n        const data = await response.json();\r\n        setPeriodDates(data.periods);\r\n        setCycleLength(data.cycleLength);\r\n      } catch (error) {\r\n        console.error(error);\r\n        alert(\"Error fetching data.\");\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n  */\r\n \r\n  // Handle date selection\r\n  /*\r\n  const handleDateChange = async (selectedDate) => {\r\n    setDate(selectedDate); \r\n    const formattedDate = selectedDate.toISOString().split(\"T\")[0]; // Convert date to \"YYYY-MM-DD\" format\r\n\r\n    if (!periodDates.includes(formattedDate)) {\r\n      try {\r\n        const response = await fetch(\"http://localhost:3000/api/cycle/log\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`, // Ensure the user is authenticated\r\n          },\r\n          body: JSON.stringify({ startDate: formattedDate, cycleLength }),\r\n        });\r\n\r\n        if (!response.ok) throw new Error(\"Failed to log period date\");\r\n\r\n        const data = await response.json();\r\n        setPeriodDates(data.periods); // Update frontend with data from backend\r\n        showNotification(\"Period date logged!\");\r\n      } catch (error) {\r\n        console.error(error);\r\n        alert(\"Error logging period.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  // Delete period log\r\n  const deleteLog = async (dateToDelete) => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:3000/api/cycle/delete\", {\r\n        method: \"DELETE\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n        body: JSON.stringify({ date: dateToDelete }),\r\n      });\r\n\r\n      if (!response.ok) throw new Error(\"Failed to delete period log\");\r\n\r\n      const data = await response.json();\r\n      setPeriodDates(data.periods); // Update frontend with new data\r\n    } catch (error) {\r\n      console.error(error);\r\n      alert(\"Error deleting period log.\");\r\n    }\r\n  };\r\n\r\n  // Calculate cycle lengths\r\n  const cycleLengths = periodDates\r\n    .map((date, i) =>\r\n      i > 0 ? (new Date(date) - new Date(periodDates[i - 1])) / (1000 * 60 * 60 * 24) : null\r\n    )\r\n    .filter((length) => length !== null);\r\n\r\n  // Calculate average cycle length\r\n  const avgCycleLength =\r\n    cycleLengths.length > 0\r\n      ? Math.round(cycleLengths.reduce((a, b) => a + b, 0) / cycleLengths.length)\r\n      : 28; // Default to 28 if not enough data\r\n\r\n  // Predict next period based on user's actual cycle length or selected cycle length\r\n  const predictNextPeriod = () => {\r\n    if (periodDates.length > 0) {\r\n      let lastPeriod = new Date(periodDates[periodDates.length - 1]);\r\n      let nextPeriod = new Date(lastPeriod);\r\n      nextPeriod.setDate(nextPeriod.getDate() + cycleLength); // Use user-defined cycle length\r\n      return nextPeriod.toDateString();\r\n    }\r\n    return \"Not enough data to predict.\";\r\n  };\r\n\r\n  // Show browser notification\r\n  /*const showNotification = (message) => {\r\n    if (Notification.permission === \"granted\") {\r\n      new Notification(\"Menstrual Tracker\", { body: message });\r\n    }\r\n  };\r\n  const showNotification = (message) => {\r\n    if (Notification.permission !== \"granted\") {\r\n      Notification.requestPermission().then((permission) => {\r\n        if (permission === \"granted\") {\r\n          new Notification(\"Menstrual Tracker\", { body: message });\r\n        }\r\n      });\r\n    } else {\r\n      new Notification(\"Menstrual Tracker\", { body: message });\r\n    }\r\n  };\r\n  \r\n\r\n  // Handle cycle length change\r\n  const handleCycleLengthChange = async (e) => {\r\n    const value = Number(e.target.value);\r\n    if (value < 15 || value > 50) return;\r\n\r\n    setCycleLength(value);\r\n\r\n    try {\r\n      const response = await fetch(\"http://localhost:3000/api/cycle/update-cycle-length\", {\r\n        method: \"PUT\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n        body: JSON.stringify({ cycleLength: value }),\r\n      });\r\n\r\n      if (!response.ok) throw new Error(\"Failed to update cycle length\");\r\n    } catch (error) {\r\n      console.error(error);\r\n      alert(\"Error updating cycle length.\");\r\n    }\r\n  };\r\n\r\n  // Export cycle data as CSV\r\n  const exportData = () => {\r\n    const csvContent = \"data:text/csv;charset=utf-8,Date\\n\" + periodDates.join(\"\\n\");\r\n    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\r\n    saveAs(blob, \"cycle_history.csv\");\r\n\r\n    if (periodDates.length === 0) {\r\n      alert(\"No data to export!\");\r\n      return;\r\n    }\r\n\r\n  };\r\n\r\n  return (\r\n    <div className=\"tracker-container\">\r\n      <h2>Menstrual Cycle Tracker</h2>\r\n      <Calendar onClickDay={handleDateChange} value={date} />\r\n\r\n      <h3>Logged Period Dates:</h3>\r\n      <ul>\r\n        {periodDates.map((d, index) => (\r\n          <li key={index}>\r\n            {d} <button onClick={() => deleteLog(d)}>‚ùé</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      <label>Set Your Cycle Length: </label>\r\n      <input\r\n        type=\"number\"\r\n        value={cycleLength}\r\n        onChange={handleCycleLengthChange}\r\n        min=\"15\"\r\n        max=\"50\"\r\n      />\r\n\r\n      <h3>Next Predicted Period: {predictNextPeriod()}</h3>\r\n      <h3>Last Cycle Length: {cycleLengths.length > 0 ? cycleLengths[cycleLengths.length - 1] + \" days\" : \"N/A\"}</h3>\r\n      <h3>Average Cycle Length: {avgCycleLength} days</h3>\r\n\r\n      <button onClick={exportData}>üìÇ Export Cycle Data</button>\r\n\r\n      <Reports periodDates={periodDates} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tracker;\r\n*/\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport \"react-calendar/dist/Calendar.css\";\r\nimport \"../styles/Tracker.css\";\r\nimport Reports from \"./Reports\";\r\nimport { saveAs } from \"file-saver\";\r\n\r\nfunction Tracker() {\r\n  //const [date, setDate] = useState(new Date());\r\n  const [periodDates, setPeriodDates] = useState([]);\r\n  const [cycleLength, setCycleLength] = useState(28); // Default cycle length\r\n\r\n  // Fetch period history from backend\r\n  console.log(\"Sending Token:\", localStorage.getItem(\"token\"));\r\n\r\n  useEffect(() => {\r\n    // eslint-disable-next-line no-unused-vars\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(\"http://localhost:3000/api/cycles\", {\r\n          method: \"GET\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,// Add token if using authentication\r\n          },\r\n        });\r\n\r\n        const contentType = response.headers.get(\"content-type\");\r\n        if (!response.ok || !contentType || !contentType.includes(\"application/json\")) {\r\n          throw new Error(\"Unexpected response format. Possibly unauthorized.\");\r\n        }\r\n        //if (!response.ok) throw new Error(\"Failed to fetch data\");\r\n        if (!response.ok) {\r\n          const errorData = await response.json();\r\n          console.error(\"API Error:\", errorData.message);\r\n          throw new Error(\"Failed to log period\");\r\n        }\r\n\r\n        const data = await response.json();\r\n        if (data.periods) setPeriodDates(data.periods);\r\n        if (data.cycleLength) setCycleLength(data.cycleLength);\r\n      } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  console.log(\"Sending Token:\", localStorage.getItem(\"token\"));\r\n\r\n  // Handle date selection and log the period\r\n  const handleDateChange = async (selectedDate) => {\r\n    const formattedDate = selectedDate.toISOString();\r\n    try {\r\n      const response = await fetch(\"http://localhost:3000/api/cycles/log\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n        body: JSON.stringify({ startDate: formattedDate, cycleLength }),\r\n      });\r\n\r\n      //if (!response.ok) throw new Error(\"Failed to log period\");\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        console.error(\"API Error:\", errorData.message);\r\n        throw new Error(\"Failed to log period\");\r\n      }\r\n\r\n      const data = await response.json();\r\n      setPeriodDates(data.periods);\r\n      showNotification(\"Period date logged!\");\r\n    } catch (error) {\r\n      console.error(\"Error logging period:\", error);\r\n    }\r\n  };\r\n\r\n  // Delete period log\r\n  console.log(\"Sending Token:\", localStorage.getItem(\"token\"));\r\n  const deleteLog = async (dateToDelete) => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:3000/api/cycles/delete\", {\r\n        method: \"DELETE\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n        body: JSON.stringify({ date: dateToDelete }),\r\n      });\r\n\r\n      if (!response.ok) throw new Error(\"Failed to delete period log\");\r\n\r\n      const data = await response.json();\r\n      setPeriodDates(data.periods);\r\n    } catch (error) {\r\n      console.error(\"Error deleting log:\", error);\r\n    }\r\n  };\r\n\r\n  // Update cycle length\r\n  const handleCycleLengthChange = async (e) => {\r\n    const value = Number(e.target.value);\r\n    if (value > 15 && value < 50) {\r\n      try {\r\n        const response = await fetch(\"http://localhost:3000/api/cycles/update-cycle-length\", {\r\n          method: \"PUT\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n          },\r\n          body: JSON.stringify({ cycleLength: value }),\r\n        });\r\n\r\n        if (!response.ok) throw new Error(\"Failed to update cycle length\");\r\n\r\n        const data = await response.json();\r\n        setCycleLength(data.cycleLength);\r\n      } catch (error) {\r\n        console.error(\"Error updating cycle length:\", error);\r\n      }\r\n    }\r\n  };\r\n  // Calculate cycle lengths\r\n  const cycleLengths = periodDates.map((date, i) => \r\n    i > 0 ? (new Date(date) - new Date(periodDates[i - 1])) / (1000 * 60 * 60 * 24) : null\r\n  ).filter(length => length !== null);\r\n\r\n  // Calculate average cycle length\r\n  const avgCycleLength = cycleLengths.length > 0 ? \r\n    Math.round(cycleLengths.reduce((a, b) => a + b, 0) / cycleLengths.length) \r\n    : 28; // Default to 28 if not enough data\r\n\r\n  // Predict next period based on user's actual cycle length or selected cycle length\r\n  const predictNextPeriod = () => {\r\n    if (periodDates.length > 0) {\r\n      let lastPeriod = new Date(periodDates[periodDates.length - 1]);\r\n      let nextPeriod = new Date(lastPeriod);\r\n      nextPeriod.setDate(nextPeriod.getDate() + cycleLength); // Use user-defined cycle length\r\n      return nextPeriod.toDateString();\r\n    }\r\n    return \"Not enough data to predict.\";\r\n  };\r\n\r\n  // Show browser notification\r\n  const showNotification = (message) => {\r\n    if (Notification.permission === \"granted\") {\r\n      new Notification(\"Menstrual Tracker\", { body: message });\r\n    }\r\n  };\r\n\r\n  // Export cycle data as CSV\r\n  const exportData = () => {\r\n    const csvContent = \"Date\\n\" + periodDates.join(\"\\n\");\r\n    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\r\n    saveAs(blob, \"cycle_history.csv\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"tracker-container\">\r\n      <h2>Menstrual Cycle Tracker</h2>\r\n      <Calendar onClickDay={handleDateChange} value={new Date()} />\r\n\r\n      <h3>Logged Period Dates:</h3>\r\n      <ul>\r\n        {periodDates.map((d, index) => (\r\n          <li key={index}>\r\n            {new Date(d).toDateString()}\r\n            <button onClick={() => deleteLog(new Date(d).toISOString())}>‚ùé</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      <label>Set Your Cycle Length: </label>\r\n      <input\r\n        type=\"number\"\r\n        value={cycleLength}\r\n        onChange={handleCycleLengthChange}\r\n        min=\"15\"\r\n        max=\"50\"\r\n      />\r\n      <h3>Next Predicted Period: {predictNextPeriod()}</h3>\r\n      <h3>Last Cycle Length: {cycleLengths.length > 0 ? cycleLengths[cycleLengths.length - 1] + \" days\" : \"N/A\"}</h3>\r\n      <h3>Average Cycle Length: {avgCycleLength} days</h3>\r\n\r\n\r\n      <button onClick={exportData}>üìÇ Export Cycle Data</button>\r\n\r\n      {/* Integrating Reports */}\r\n      <Reports periodDates={periodDates} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tracker;\r\n"],"mappingsyBA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,gBAAgB;AACrC,OAAO,kCAAkC;AACzC,OAAO,uBAAuB;AAC9B,OAAOC,OAAO,MAAM,WAAW;AAC/B,SAASC,MAAM,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACjB;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAEpD;EACAa,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;EAE5Df,SAAS,CAAC,MAAM;IACd;IACA,MAAMgB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,EAAE;UAC/DC,MAAM,EAAE,KAAK;UACbC,OAAO,EAAE;YACP,cAAc,EAAE,kBAAkB;YAClCC,aAAa,EAAE,UAAUP,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC;UAC3D;QACF,CAAC,CAAC;QAEF,MAAMO,WAAW,GAAGL,QAAQ,CAACG,OAAO,CAACG,GAAG,CAAC,cAAc,CAAC;QACxD,IAAI,CAACN,QAAQ,CAACO,EAAE,IAAI,CAACF,WAAW,IAAI,CAACA,WAAW,CAACG,QAAQ,CAAC,kBAAkB,CAAC,EAAE;UAC7E,MAAM,IAAIC,KAAK,CAAC,oDAAoD,CAAC;QACvE;QACA;QACA,IAAI,CAACT,QAAQ,CAACO,EAAE,EAAE;UAChB,MAAMG,SAAS,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;UACvChB,OAAO,CAACiB,KAAK,CAAC,YAAY,EAAEF,SAAS,CAACG,OAAO,CAAC;UAC9C,MAAM,IAAIJ,KAAK,CAAC,sBAAsB,CAAC;QACzC;QAEA,MAAMK,IAAI,GAAG,MAAMd,QAAQ,CAACW,IAAI,CAAC,CAAC;QAClC,IAAIG,IAAI,CAACC,OAAO,EAAEvB,cAAc,CAACsB,IAAI,CAACC,OAAO,CAAC;QAC9C,IAAID,IAAI,CAACrB,WAAW,EAAEC,cAAc,CAACoB,IAAI,CAACrB,WAAW,CAAC;MACxD,CAAC,CAAC,OAAOmB,KAAK,EAAE;QACdjB,OAAO,CAACiB,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAENjB,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;;EAE5D;EACA,MAAMkB,gBAAgB,GAAG,MAAOC,YAAY,IAAK;IAC/C,MAAMC,aAAa,GAAGD,YAAY,CAACE,WAAW,CAAC,CAAC;IAChD,IAAI;MACF,MAAMnB,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAsC,EAAE;QACnEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClCC,aAAa,EAAE,UAAUP,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;QACxD,CAAC;QACDsB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,SAAS,EAAEL,aAAa;UAAEzB;QAAY,CAAC;MAChE,CAAC,CAAC;;MAEF;MACA,IAAI,CAACO,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAMG,SAAS,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;QACvChB,OAAO,CAACiB,KAAK,CAAC,YAAY,EAAEF,SAAS,CAACG,OAAO,CAAC;QAC9C,MAAM,IAAIJ,KAAK,CAAC,sBAAsB,CAAC;MACzC;MAEA,MAAMK,IAAI,GAAG,MAAMd,QAAQ,CAACW,IAAI,CAAC,CAAC;MAClCnB,cAAc,CAACsB,IAAI,CAACC,OAAO,CAAC;MAC5BS,gBAAgB,CAAC,qBAAqB,CAAC;IACzC,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACdjB,OAAO,CAACiB,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF,CAAC;;EAED;EACAjB,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;EAC5D,MAAM2B,SAAS,GAAG,MAAOC,YAAY,IAAK;IACxC,IAAI;MACF,MAAM1B,QAAQ,GAAG,MAAMC,KAAK,CAAC,yCAAyC,EAAE;QACtEC,MAAM,EAAE,QAAQ;QAChBC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClCC,aAAa,EAAE,UAAUP,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;QACxD,CAAC;QACDsB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEK,IAAI,EAAED;QAAa,CAAC;MAC7C,CAAC,CAAC;MAEF,IAAI,CAAC1B,QAAQ,CAACO,EAAE,EAAE,MAAM,IAAIE,KAAK,CAAC,6BAA6B,CAAC;MAEhE,MAAMK,IAAI,GAAG,MAAMd,QAAQ,CAACW,IAAI,CAAC,CAAC;MAClCnB,cAAc,CAACsB,IAAI,CAACC,OAAO,CAAC;IAC9B,CAAC,CAAC,OAAOH,KAAK,EAAE;MACdjB,OAAO,CAACiB,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC7C;EACF,CAAC;;EAED;EACA,MAAMgB,uBAAuB,GAAG,MAAOC,CAAC,IAAK;IAC3C,MAAMC,KAAK,GAAGC,MAAM,CAACF,CAAC,CAACG,MAAM,CAACF,KAAK,CAAC;IACpC,IAAIA,KAAK,GAAG,EAAE,IAAIA,KAAK,GAAG,EAAE,EAAE;MAC5B,IAAI;QACF,MAAM9B,QAAQ,GAAG,MAAMC,KAAK,CAAC,sDAAsD,EAAE;UACnFC,MAAM,EAAE,KAAK;UACbC,OAAO,EAAE;YACP,cAAc,EAAE,kBAAkB;YAClCC,aAAa,EAAE,UAAUP,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;UACxD,CAAC;UACDsB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAE7B,WAAW,EAAEqC;UAAM,CAAC;QAC7C,CAAC,CAAC;QAEF,IAAI,CAAC9B,QAAQ,CAACO,EAAE,EAAE,MAAM,IAAIE,KAAK,CAAC,+BAA+B,CAAC;QAElE,MAAMK,IAAI,GAAG,MAAMd,QAAQ,CAACW,IAAI,CAAC,CAAC;QAClCjB,cAAc,CAACoB,IAAI,CAACrB,WAAW,CAAC;MAClC,CAAC,CAAC,OAAOmB,KAAK,EAAE;QACdjB,OAAO,CAACiB,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACtD;IACF;EACF,CAAC;EACD;EACA,MAAMqB,YAAY,GAAG1C,WAAW,CAAC2C,GAAG,CAAC,CAACP,IAAI,EAAEQ,CAAC,KAC3CA,CAAC,GAAG,CAAC,GAAG,CAAC,IAAIC,IAAI,CAACT,IAAI,CAAC,GAAG,IAAIS,IAAI,CAAC7C,WAAW,CAAC4C,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,IACpF,CAAC,CAACE,MAAM,CAACC,MAAM,IAAIA,MAAM,KAAK,IAAI,CAAC;;EAEnC;EACA,MAAMC,cAAc,GAAGN,YAAY,CAACK,MAAM,GAAG,CAAC,GAC5CE,IAAI,CAACC,KAAK,CAACR,YAAY,CAACS,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,EAAE,CAAC,CAAC,GAAGX,YAAY,CAACK,MAAM,CAAC,GACvE,EAAE,CAAC,CAAC;;EAER;EACA,MAAMO,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,IAAItD,WAAW,CAAC+C,MAAM,GAAG,CAAC,EAAE;MAC1B,IAAIQ,UAAU,GAAG,IAAIV,IAAI,CAAC7C,WAAW,CAACA,WAAW,CAAC+C,MAAM,GAAG,CAAC,CAAC,CAAC;MAC9D,IAAIS,UAAU,GAAG,IAAIX,IAAI,CAACU,UAAU,CAAC;MACrCC,UAAU,CAACC,OAAO,CAACD,UAAU,CAACE,OAAO,CAAC,CAAC,GAAGxD,WAAW,CAAC,CAAC,CAAC;MACxD,OAAOsD,UAAU,CAACG,YAAY,CAAC,CAAC;IAClC;IACA,OAAO,6BAA6B;EACtC,CAAC;;EAED;EACA,MAAM1B,gBAAgB,GAAIX,OAAO,IAAK;IACpC,IAAIsC,YAAY,CAACC,UAAU,KAAK,SAAS,EAAE;MACzC,IAAID,YAAY,CAAC,mBAAmB,EAAE;QAAE/B,IAAI,EAAEP;MAAQ,CAAC,CAAC;IAC1D;EACF,CAAC;;EAED;EACA,MAAMwC,UAAU,GAAGA,CAAA,KAAM;IACvB,MAAMC,UAAU,GAAG,QAAQ,GAAG/D,WAAW,CAACgE,IAAI,CAAC,IAAI,CAAC;IACpD,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACH,UAAU,CAAC,EAAE;MAAEI,IAAI,EAAE;IAA0B,CAAC,CAAC;IACxExE,MAAM,CAACsE,IAAI,EAAE,mBAAmB,CAAC;EACnC,CAAC;EAED,oBACEpE,OAAA;IAAKuE,SAAS,EAAC,mBAAmB;IAAAC,QAAA,gBAChCxE,OAAA;MAAAwE,QAAA,EAAI;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChC5E,OAAA,CAACJ,QAAQ;MAACiF,UAAU,EAAEjD,gBAAiB;MAACc,KAAK,EAAE,IAAIM,IAAI,CAAC;IAAE;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAE7D5E,OAAA;MAAAwE,QAAA,EAAI;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC7B5E,OAAA;MAAAwE,QAAA,EACGrE,WAAW,CAAC2C,GAAG,CAAC,CAACgC,CAAC,EAAEC,KAAK,kBACxB/E,OAAA;QAAAwE,QAAA,GACG,IAAIxB,IAAI,CAAC8B,CAAC,CAAC,CAAChB,YAAY,CAAC,CAAC,eAC3B9D,OAAA;UAAQgF,OAAO,EAAEA,CAAA,KAAM3C,SAAS,CAAC,IAAIW,IAAI,CAAC8B,CAAC,CAAC,CAAC/C,WAAW,CAAC,CAAC,CAAE;UAAAyC,QAAA,EAAC;QAAC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,GAFhEG,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGV,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eAEL5E,OAAA;MAAAwE,QAAA,EAAO;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eACtC5E,OAAA;MACEsE,IAAI,EAAC,QAAQ;MACb5B,KAAK,EAAErC,WAAY;MACnB4E,QAAQ,EAAEzC,uBAAwB;MAClC0C,GAAG,EAAC,IAAI;MACRC,GAAG,EAAC;IAAI;MAAAV,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACT,CAAC,eACF5E,OAAA;MAAAwE,QAAA,GAAI,yBAAuB,EAACf,iBAAiB,CAAC,CAAC;IAAA;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACrD5E,OAAA;MAAAwE,QAAA,GAAI,qBAAmB,EAAC3B,YAAY,CAACK,MAAM,GAAG,CAAC,GAAGL,YAAY,CAACA,YAAY,CAACK,MAAM,GAAG,CAAC,CAAC,GAAG,OAAO,GAAG,KAAK;IAAA;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAC/G5E,OAAA;MAAAwE,QAAA,GAAI,wBAAsB,EAACrB,cAAc,EAAC,OAAK;IAAA;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAGpD5E,OAAA;MAAQgF,OAAO,EAAEf,UAAW;MAAAO,QAAA,EAAC;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAG1D5E,OAAA,CAACH,OAAO;MAACM,WAAW,EAAEA;IAAY;MAAAsE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClC,CAAC;AAEV;AAAC1E,EAAA,CAxLQD,OAAO;AAAAmF,EAAA,GAAPnF,OAAO;AA0LhB,eAAeA,OAAO;AAAC,IAAAmF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}