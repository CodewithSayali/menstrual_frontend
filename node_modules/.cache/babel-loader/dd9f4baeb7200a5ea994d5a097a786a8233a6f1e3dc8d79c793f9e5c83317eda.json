{"ast":null,"code":"var _jsxFileName = \"C:\\\\vardha\\\\Menstrual\\\\frontend\\\\src\\\\pages\\\\MoodTracker.js\",\n  _s = $RefreshSig$();\n/*import React, { useState } from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport { Chart, registerables } from 'chart.js';\r\nimport \"../styles/MoodTracker.css\";\r\n\r\n// Register all Chart.js components\r\nChart.register(...registerables);\r\n\r\nfunction MoodTracker() {\r\n  const [moodData, setMoodData] = useState([]);\r\n  const [mood, setMood] = useState(\"\");\r\n\r\n  // Handle mood selection\r\n  const handleMoodSubmit = () => {\r\n    const newMoodData = [...moodData, { mood, date: new Date().toLocaleDateString() }];\r\n    setMoodData(newMoodData);\r\n    setMood(\"\");\r\n  };\r\n\r\n  // Prepare data for graph\r\n  const chartData = {\r\n    labels: moodData.map(entry => entry.date),\r\n    datasets: [\r\n      {\r\n        label: \"Mood Trends\",\r\n        data: moodData.map(entry => (entry.mood === \"Happy\" ? 1 : entry.mood === \"Sad\" ? -1 : 0)),\r\n        backgroundColor: [\"#ff4d6d\"],\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div className=\"mood-container\">\r\n      <h2>Mood Tracker</h2>\r\n      <select value={mood} onChange={(e) => setMood(e.target.value)}>\r\n        <option value=\"\">Select Mood</option>\r\n        <option value=\"Happy\">üòä Happy</option>\r\n        <option value=\"Sad\">üò¢ Sad</option>\r\n        <option value=\"Stressed\">üòñ Stressed</option>\r\n        <option value=\"Energetic\">‚ö° Energetic</option>\r\n      </select>\r\n      <button onClick={handleMoodSubmit}>Log Mood</button>\r\n      <Bar data={chartData} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MoodTracker;\r\n*/\n\n/*\r\nimport { useState } from \"react\";\r\n\r\nconst moods = [\"üòä\", \"üò¢\", \"üò°\", \"üò¥\", \"üòÅ\"];\r\n\r\nexport default function MoodTracker() {\r\n  const [selectedMood, setSelectedMood] = useState(null);\r\n\r\n  return (\r\n    <div>\r\n      <h3>How do you feel today?</h3>\r\n      <div>\r\n        {moods.map((mood, index) => (\r\n          <button key={index} onClick={() => setSelectedMood(mood)}>\r\n            {mood}\r\n          </button>\r\n        ))}\r\n      </div>\r\n      {selectedMood && <p>You selected: {selectedMood}</p>}\r\n    </div>\r\n  );\r\n}\r\n*/\n\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst moods = [\"üòä\", \"üò¢\", \"üò°\", \"üò¥\", \"üòÅ\"];\nconst userId = \"123456\"; // Replace with actual user ID from authentication\n\nexport default function MoodTracker() {\n  _s();\n  const [selectedMood, setSelectedMood] = useState(null);\n  const [moodHistory, setMoodHistory] = useState([]);\n\n  // Fetch mood history from MongoDB\n  useEffect(() => {\n    axios.get(`http://localhost:5000/moods/${userId}/history`).then(response => setMoodHistory(response.data)).catch(error => console.error(\"Error fetching mood history:\", error));\n  }, []);\n\n  // Save selected mood in MongoDB\n  const handleMoodSelect = async mood => {\n    setSelectedMood(mood);\n    try {\n      await axios.post(\"http://localhost:5000/moods/add\", {\n        userId,\n        mood\n      });\n      setMoodHistory([...moodHistory, {\n        date: new Date().toISOString(),\n        mood\n      }].slice(-7)); // Update UI\n    } catch (error) {\n      console.error(\"Error saving mood:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"How do you feel today?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: moods.map((mood, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleMoodSelect(mood),\n        children: mood\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), selectedMood && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Today's Mood: \", selectedMood]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Mood History (Last 7 Days):\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: moodHistory.map((entry, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [new Date(entry.date).toDateString(), \": \", entry.mood]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n_s(MoodTracker, \"xXDU2kXZjo93KsMYeyiJDta9c7k=\");\n_c = MoodTracker;\nvar _c;\n$RefreshReg$(_c, \"MoodTracker\");","map":{"version":3,"names":["useState","useEffect","axios","jsxDEV","_jsxDEV","moods","userId","MoodTracker","_s","selectedMood","setSelectedMood","moodHistory","setMoodHistory","get","then","response","data","catch","error","console","handleMoodSelect","mood","post","date","Date","toISOString","slice","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","onClick","entry","toDateString","_c","$RefreshReg$"],"sources":["C:/vardha/Menstrual/frontend/src/pages/MoodTracker.js"],"sourcesContent":["/*import React, { useState } from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport { Chart, registerables } from 'chart.js';\r\nimport \"../styles/MoodTracker.css\";\r\n\r\n// Register all Chart.js components\r\nChart.register(...registerables);\r\n\r\nfunction MoodTracker() {\r\n  const [moodData, setMoodData] = useState([]);\r\n  const [mood, setMood] = useState(\"\");\r\n\r\n  // Handle mood selection\r\n  const handleMoodSubmit = () => {\r\n    const newMoodData = [...moodData, { mood, date: new Date().toLocaleDateString() }];\r\n    setMoodData(newMoodData);\r\n    setMood(\"\");\r\n  };\r\n\r\n  // Prepare data for graph\r\n  const chartData = {\r\n    labels: moodData.map(entry => entry.date),\r\n    datasets: [\r\n      {\r\n        label: \"Mood Trends\",\r\n        data: moodData.map(entry => (entry.mood === \"Happy\" ? 1 : entry.mood === \"Sad\" ? -1 : 0)),\r\n        backgroundColor: [\"#ff4d6d\"],\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div className=\"mood-container\">\r\n      <h2>Mood Tracker</h2>\r\n      <select value={mood} onChange={(e) => setMood(e.target.value)}>\r\n        <option value=\"\">Select Mood</option>\r\n        <option value=\"Happy\">üòä Happy</option>\r\n        <option value=\"Sad\">üò¢ Sad</option>\r\n        <option value=\"Stressed\">üòñ Stressed</option>\r\n        <option value=\"Energetic\">‚ö° Energetic</option>\r\n      </select>\r\n      <button onClick={handleMoodSubmit}>Log Mood</button>\r\n      <Bar data={chartData} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MoodTracker;\r\n*/\r\n\r\n/*\r\nimport { useState } from \"react\";\r\n\r\nconst moods = [\"üòä\", \"üò¢\", \"üò°\", \"üò¥\", \"üòÅ\"];\r\n\r\nexport default function MoodTracker() {\r\n  const [selectedMood, setSelectedMood] = useState(null);\r\n\r\n  return (\r\n    <div>\r\n      <h3>How do you feel today?</h3>\r\n      <div>\r\n        {moods.map((mood, index) => (\r\n          <button key={index} onClick={() => setSelectedMood(mood)}>\r\n            {mood}\r\n          </button>\r\n        ))}\r\n      </div>\r\n      {selectedMood && <p>You selected: {selectedMood}</p>}\r\n    </div>\r\n  );\r\n}\r\n*/\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport axios from \"axios\"; \r\n\r\nconst moods = [\"üòä\", \"üò¢\", \"üò°\", \"üò¥\", \"üòÅ\"];\r\nconst userId = \"123456\"; // Replace with actual user ID from authentication\r\n\r\nexport default function MoodTracker() {\r\n  const [selectedMood, setSelectedMood] = useState(null);\r\n  const [moodHistory, setMoodHistory] = useState([]);\r\n\r\n  // Fetch mood history from MongoDB\r\n  useEffect(() => {\r\n    axios.get(`http://localhost:5000/moods/${userId}/history`)\r\n      .then((response) => setMoodHistory(response.data))\r\n      .catch((error) => console.error(\"Error fetching mood history:\", error));\r\n  }, []);\r\n\r\n  // Save selected mood in MongoDB\r\n  const handleMoodSelect = async (mood) => {\r\n    setSelectedMood(mood);\r\n    try {\r\n      await axios.post(\"http://localhost:5000/moods/add\", { userId, mood });\r\n      setMoodHistory([...moodHistory, { date: new Date().toISOString(), mood }].slice(-7)); // Update UI\r\n    } catch (error) {\r\n      console.error(\"Error saving mood:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3>How do you feel today?</h3>\r\n      <div>\r\n        {moods.map((mood, index) => (\r\n          <button key={index} onClick={() => handleMoodSelect(mood)}>\r\n            {mood}\r\n          </button>\r\n        ))}\r\n      </div>\r\n      {selectedMood && <p>Today's Mood: {selectedMood}</p>}\r\n\r\n      <h3>Mood History (Last 7 Days):</h3>\r\n      <ul>\r\n        {moodHistory.map((entry, index) => (\r\n          <li key={index}>\r\n            {new Date(entry.date).toDateString()}: {entry.mood}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,KAAK,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;AAC5C,MAAMC,MAAM,GAAG,QAAQ,CAAC,CAAC;;AAEzB,eAAe,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACpC,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;;EAElD;EACAC,SAAS,CAAC,MAAM;IACdC,KAAK,CAACW,GAAG,CAAC,+BAA+BP,MAAM,UAAU,CAAC,CACvDQ,IAAI,CAAEC,QAAQ,IAAKH,cAAc,CAACG,QAAQ,CAACC,IAAI,CAAC,CAAC,CACjDC,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC,CAAC;EAC3E,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAME,gBAAgB,GAAG,MAAOC,IAAI,IAAK;IACvCX,eAAe,CAACW,IAAI,CAAC;IACrB,IAAI;MACF,MAAMnB,KAAK,CAACoB,IAAI,CAAC,iCAAiC,EAAE;QAAEhB,MAAM;QAAEe;MAAK,CAAC,CAAC;MACrET,cAAc,CAAC,CAAC,GAAGD,WAAW,EAAE;QAAEY,IAAI,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;QAAEJ;MAAK,CAAC,CAAC,CAACK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACxF,CAAC,CAAC,OAAOR,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC5C;EACF,CAAC;EAED,oBACEd,OAAA;IAAAuB,QAAA,gBACEvB,OAAA;MAAAuB,QAAA,EAAI;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC/B3B,OAAA;MAAAuB,QAAA,EACGtB,KAAK,CAAC2B,GAAG,CAAC,CAACX,IAAI,EAAEY,KAAK,kBACrB7B,OAAA;QAAoB8B,OAAO,EAAEA,CAAA,KAAMd,gBAAgB,CAACC,IAAI,CAAE;QAAAM,QAAA,EACvDN;MAAI,GADMY,KAAK;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACT;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,EACLtB,YAAY,iBAAIL,OAAA;MAAAuB,QAAA,GAAG,gBAAc,EAAClB,YAAY;IAAA;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEpD3B,OAAA;MAAAuB,QAAA,EAAI;IAA2B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpC3B,OAAA;MAAAuB,QAAA,EACGhB,WAAW,CAACqB,GAAG,CAAC,CAACG,KAAK,EAAEF,KAAK,kBAC5B7B,OAAA;QAAAuB,QAAA,GACG,IAAIH,IAAI,CAACW,KAAK,CAACZ,IAAI,CAAC,CAACa,YAAY,CAAC,CAAC,EAAC,IAAE,EAACD,KAAK,CAACd,IAAI;MAAA,GAD3CY,KAAK;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV;AAACvB,EAAA,CA5CuBD,WAAW;AAAA8B,EAAA,GAAX9B,WAAW;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}